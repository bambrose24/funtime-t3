
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * WARNING: This is an internal file that is subject to change!
 * 
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 * 
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 * 
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective 
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/client"
import type * as Prisma from "../models"
import { type PrismaClient } from "./class"

export type * from '../models'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Validator
 */
export const validator = runtime.Public.validator

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
export const prismaVersion: PrismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull

type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  EmailLogs: 'EmailLogs',
  WeekWinners: 'WeekWinners',
  games: 'games',
  leaguemembers: 'leaguemembers',
  leaguemessages: 'leaguemessages',
  leagues: 'leagues',
  people: 'people',
  picks: 'picks',
  superbowl: 'superbowl',
  superbowlsquares: 'superbowlsquares',
  teams: 'teams'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<ClientOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "emailLogs" | "weekWinners" | "games" | "leaguemembers" | "leaguemessages" | "leagues" | "people" | "picks" | "superbowl" | "superbowlsquares" | "teams"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    EmailLogs: {
      payload: Prisma.$EmailLogsPayload<ExtArgs>
      fields: Prisma.EmailLogsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.EmailLogsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmailLogsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.EmailLogsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmailLogsPayload>
        }
        findFirst: {
          args: Prisma.EmailLogsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmailLogsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.EmailLogsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmailLogsPayload>
        }
        findMany: {
          args: Prisma.EmailLogsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmailLogsPayload>[]
        }
        create: {
          args: Prisma.EmailLogsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmailLogsPayload>
        }
        createMany: {
          args: Prisma.EmailLogsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.EmailLogsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmailLogsPayload>[]
        }
        delete: {
          args: Prisma.EmailLogsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmailLogsPayload>
        }
        update: {
          args: Prisma.EmailLogsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmailLogsPayload>
        }
        deleteMany: {
          args: Prisma.EmailLogsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.EmailLogsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.EmailLogsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmailLogsPayload>[]
        }
        upsert: {
          args: Prisma.EmailLogsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$EmailLogsPayload>
        }
        aggregate: {
          args: Prisma.EmailLogsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateEmailLogs>
        }
        groupBy: {
          args: Prisma.EmailLogsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EmailLogsGroupByOutputType>[]
        }
        count: {
          args: Prisma.EmailLogsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EmailLogsCountAggregateOutputType> | number
        }
      }
    }
    WeekWinners: {
      payload: Prisma.$WeekWinnersPayload<ExtArgs>
      fields: Prisma.WeekWinnersFieldRefs
      operations: {
        findUnique: {
          args: Prisma.WeekWinnersFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WeekWinnersPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.WeekWinnersFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WeekWinnersPayload>
        }
        findFirst: {
          args: Prisma.WeekWinnersFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WeekWinnersPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.WeekWinnersFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WeekWinnersPayload>
        }
        findMany: {
          args: Prisma.WeekWinnersFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WeekWinnersPayload>[]
        }
        create: {
          args: Prisma.WeekWinnersCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WeekWinnersPayload>
        }
        createMany: {
          args: Prisma.WeekWinnersCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.WeekWinnersCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WeekWinnersPayload>[]
        }
        delete: {
          args: Prisma.WeekWinnersDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WeekWinnersPayload>
        }
        update: {
          args: Prisma.WeekWinnersUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WeekWinnersPayload>
        }
        deleteMany: {
          args: Prisma.WeekWinnersDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.WeekWinnersUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.WeekWinnersUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WeekWinnersPayload>[]
        }
        upsert: {
          args: Prisma.WeekWinnersUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$WeekWinnersPayload>
        }
        aggregate: {
          args: Prisma.WeekWinnersAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateWeekWinners>
        }
        groupBy: {
          args: Prisma.WeekWinnersGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WeekWinnersGroupByOutputType>[]
        }
        count: {
          args: Prisma.WeekWinnersCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.WeekWinnersCountAggregateOutputType> | number
        }
      }
    }
    games: {
      payload: Prisma.$gamesPayload<ExtArgs>
      fields: Prisma.gamesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.gamesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$gamesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.gamesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$gamesPayload>
        }
        findFirst: {
          args: Prisma.gamesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$gamesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.gamesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$gamesPayload>
        }
        findMany: {
          args: Prisma.gamesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$gamesPayload>[]
        }
        create: {
          args: Prisma.gamesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$gamesPayload>
        }
        createMany: {
          args: Prisma.gamesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.gamesCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$gamesPayload>[]
        }
        delete: {
          args: Prisma.gamesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$gamesPayload>
        }
        update: {
          args: Prisma.gamesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$gamesPayload>
        }
        deleteMany: {
          args: Prisma.gamesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.gamesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.gamesUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$gamesPayload>[]
        }
        upsert: {
          args: Prisma.gamesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$gamesPayload>
        }
        aggregate: {
          args: Prisma.GamesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateGames>
        }
        groupBy: {
          args: Prisma.gamesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.GamesGroupByOutputType>[]
        }
        count: {
          args: Prisma.gamesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.GamesCountAggregateOutputType> | number
        }
      }
    }
    leaguemembers: {
      payload: Prisma.$leaguemembersPayload<ExtArgs>
      fields: Prisma.leaguemembersFieldRefs
      operations: {
        findUnique: {
          args: Prisma.leaguemembersFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguemembersPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.leaguemembersFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguemembersPayload>
        }
        findFirst: {
          args: Prisma.leaguemembersFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguemembersPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.leaguemembersFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguemembersPayload>
        }
        findMany: {
          args: Prisma.leaguemembersFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguemembersPayload>[]
        }
        create: {
          args: Prisma.leaguemembersCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguemembersPayload>
        }
        createMany: {
          args: Prisma.leaguemembersCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.leaguemembersCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguemembersPayload>[]
        }
        delete: {
          args: Prisma.leaguemembersDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguemembersPayload>
        }
        update: {
          args: Prisma.leaguemembersUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguemembersPayload>
        }
        deleteMany: {
          args: Prisma.leaguemembersDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.leaguemembersUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.leaguemembersUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguemembersPayload>[]
        }
        upsert: {
          args: Prisma.leaguemembersUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguemembersPayload>
        }
        aggregate: {
          args: Prisma.LeaguemembersAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLeaguemembers>
        }
        groupBy: {
          args: Prisma.leaguemembersGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LeaguemembersGroupByOutputType>[]
        }
        count: {
          args: Prisma.leaguemembersCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LeaguemembersCountAggregateOutputType> | number
        }
      }
    }
    leaguemessages: {
      payload: Prisma.$leaguemessagesPayload<ExtArgs>
      fields: Prisma.leaguemessagesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.leaguemessagesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguemessagesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.leaguemessagesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguemessagesPayload>
        }
        findFirst: {
          args: Prisma.leaguemessagesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguemessagesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.leaguemessagesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguemessagesPayload>
        }
        findMany: {
          args: Prisma.leaguemessagesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguemessagesPayload>[]
        }
        create: {
          args: Prisma.leaguemessagesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguemessagesPayload>
        }
        createMany: {
          args: Prisma.leaguemessagesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.leaguemessagesCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguemessagesPayload>[]
        }
        delete: {
          args: Prisma.leaguemessagesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguemessagesPayload>
        }
        update: {
          args: Prisma.leaguemessagesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguemessagesPayload>
        }
        deleteMany: {
          args: Prisma.leaguemessagesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.leaguemessagesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.leaguemessagesUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguemessagesPayload>[]
        }
        upsert: {
          args: Prisma.leaguemessagesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguemessagesPayload>
        }
        aggregate: {
          args: Prisma.LeaguemessagesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLeaguemessages>
        }
        groupBy: {
          args: Prisma.leaguemessagesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LeaguemessagesGroupByOutputType>[]
        }
        count: {
          args: Prisma.leaguemessagesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LeaguemessagesCountAggregateOutputType> | number
        }
      }
    }
    leagues: {
      payload: Prisma.$leaguesPayload<ExtArgs>
      fields: Prisma.leaguesFieldRefs
      operations: {
        findUnique: {
          args: Prisma.leaguesFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguesPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.leaguesFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguesPayload>
        }
        findFirst: {
          args: Prisma.leaguesFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguesPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.leaguesFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguesPayload>
        }
        findMany: {
          args: Prisma.leaguesFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguesPayload>[]
        }
        create: {
          args: Prisma.leaguesCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguesPayload>
        }
        createMany: {
          args: Prisma.leaguesCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.leaguesCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguesPayload>[]
        }
        delete: {
          args: Prisma.leaguesDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguesPayload>
        }
        update: {
          args: Prisma.leaguesUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguesPayload>
        }
        deleteMany: {
          args: Prisma.leaguesDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.leaguesUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.leaguesUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguesPayload>[]
        }
        upsert: {
          args: Prisma.leaguesUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$leaguesPayload>
        }
        aggregate: {
          args: Prisma.LeaguesAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateLeagues>
        }
        groupBy: {
          args: Prisma.leaguesGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LeaguesGroupByOutputType>[]
        }
        count: {
          args: Prisma.leaguesCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.LeaguesCountAggregateOutputType> | number
        }
      }
    }
    people: {
      payload: Prisma.$peoplePayload<ExtArgs>
      fields: Prisma.peopleFieldRefs
      operations: {
        findUnique: {
          args: Prisma.peopleFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$peoplePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.peopleFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$peoplePayload>
        }
        findFirst: {
          args: Prisma.peopleFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$peoplePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.peopleFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$peoplePayload>
        }
        findMany: {
          args: Prisma.peopleFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$peoplePayload>[]
        }
        create: {
          args: Prisma.peopleCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$peoplePayload>
        }
        createMany: {
          args: Prisma.peopleCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.peopleCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$peoplePayload>[]
        }
        delete: {
          args: Prisma.peopleDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$peoplePayload>
        }
        update: {
          args: Prisma.peopleUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$peoplePayload>
        }
        deleteMany: {
          args: Prisma.peopleDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.peopleUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.peopleUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$peoplePayload>[]
        }
        upsert: {
          args: Prisma.peopleUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$peoplePayload>
        }
        aggregate: {
          args: Prisma.PeopleAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePeople>
        }
        groupBy: {
          args: Prisma.peopleGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PeopleGroupByOutputType>[]
        }
        count: {
          args: Prisma.peopleCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PeopleCountAggregateOutputType> | number
        }
      }
    }
    picks: {
      payload: Prisma.$picksPayload<ExtArgs>
      fields: Prisma.picksFieldRefs
      operations: {
        findUnique: {
          args: Prisma.picksFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$picksPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.picksFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$picksPayload>
        }
        findFirst: {
          args: Prisma.picksFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$picksPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.picksFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$picksPayload>
        }
        findMany: {
          args: Prisma.picksFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$picksPayload>[]
        }
        create: {
          args: Prisma.picksCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$picksPayload>
        }
        createMany: {
          args: Prisma.picksCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.picksCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$picksPayload>[]
        }
        delete: {
          args: Prisma.picksDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$picksPayload>
        }
        update: {
          args: Prisma.picksUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$picksPayload>
        }
        deleteMany: {
          args: Prisma.picksDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.picksUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.picksUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$picksPayload>[]
        }
        upsert: {
          args: Prisma.picksUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$picksPayload>
        }
        aggregate: {
          args: Prisma.PicksAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregatePicks>
        }
        groupBy: {
          args: Prisma.picksGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PicksGroupByOutputType>[]
        }
        count: {
          args: Prisma.picksCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.PicksCountAggregateOutputType> | number
        }
      }
    }
    superbowl: {
      payload: Prisma.$superbowlPayload<ExtArgs>
      fields: Prisma.superbowlFieldRefs
      operations: {
        findUnique: {
          args: Prisma.superbowlFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$superbowlPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.superbowlFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$superbowlPayload>
        }
        findFirst: {
          args: Prisma.superbowlFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$superbowlPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.superbowlFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$superbowlPayload>
        }
        findMany: {
          args: Prisma.superbowlFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$superbowlPayload>[]
        }
        create: {
          args: Prisma.superbowlCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$superbowlPayload>
        }
        createMany: {
          args: Prisma.superbowlCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.superbowlCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$superbowlPayload>[]
        }
        delete: {
          args: Prisma.superbowlDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$superbowlPayload>
        }
        update: {
          args: Prisma.superbowlUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$superbowlPayload>
        }
        deleteMany: {
          args: Prisma.superbowlDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.superbowlUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.superbowlUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$superbowlPayload>[]
        }
        upsert: {
          args: Prisma.superbowlUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$superbowlPayload>
        }
        aggregate: {
          args: Prisma.SuperbowlAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSuperbowl>
        }
        groupBy: {
          args: Prisma.superbowlGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SuperbowlGroupByOutputType>[]
        }
        count: {
          args: Prisma.superbowlCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SuperbowlCountAggregateOutputType> | number
        }
      }
    }
    superbowlsquares: {
      payload: Prisma.$superbowlsquaresPayload<ExtArgs>
      fields: Prisma.superbowlsquaresFieldRefs
      operations: {
        findUnique: {
          args: Prisma.superbowlsquaresFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$superbowlsquaresPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.superbowlsquaresFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$superbowlsquaresPayload>
        }
        findFirst: {
          args: Prisma.superbowlsquaresFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$superbowlsquaresPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.superbowlsquaresFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$superbowlsquaresPayload>
        }
        findMany: {
          args: Prisma.superbowlsquaresFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$superbowlsquaresPayload>[]
        }
        create: {
          args: Prisma.superbowlsquaresCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$superbowlsquaresPayload>
        }
        createMany: {
          args: Prisma.superbowlsquaresCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.superbowlsquaresCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$superbowlsquaresPayload>[]
        }
        delete: {
          args: Prisma.superbowlsquaresDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$superbowlsquaresPayload>
        }
        update: {
          args: Prisma.superbowlsquaresUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$superbowlsquaresPayload>
        }
        deleteMany: {
          args: Prisma.superbowlsquaresDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.superbowlsquaresUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.superbowlsquaresUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$superbowlsquaresPayload>[]
        }
        upsert: {
          args: Prisma.superbowlsquaresUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$superbowlsquaresPayload>
        }
        aggregate: {
          args: Prisma.SuperbowlsquaresAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSuperbowlsquares>
        }
        groupBy: {
          args: Prisma.superbowlsquaresGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SuperbowlsquaresGroupByOutputType>[]
        }
        count: {
          args: Prisma.superbowlsquaresCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SuperbowlsquaresCountAggregateOutputType> | number
        }
      }
    }
    teams: {
      payload: Prisma.$teamsPayload<ExtArgs>
      fields: Prisma.teamsFieldRefs
      operations: {
        findUnique: {
          args: Prisma.teamsFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$teamsPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.teamsFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$teamsPayload>
        }
        findFirst: {
          args: Prisma.teamsFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$teamsPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.teamsFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$teamsPayload>
        }
        findMany: {
          args: Prisma.teamsFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$teamsPayload>[]
        }
        create: {
          args: Prisma.teamsCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$teamsPayload>
        }
        createMany: {
          args: Prisma.teamsCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.teamsCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$teamsPayload>[]
        }
        delete: {
          args: Prisma.teamsDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$teamsPayload>
        }
        update: {
          args: Prisma.teamsUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$teamsPayload>
        }
        deleteMany: {
          args: Prisma.teamsDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.teamsUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.teamsUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$teamsPayload>[]
        }
        upsert: {
          args: Prisma.teamsUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$teamsPayload>
        }
        aggregate: {
          args: Prisma.TeamsAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTeams>
        }
        groupBy: {
          args: Prisma.teamsGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TeamsGroupByOutputType>[]
        }
        count: {
          args: Prisma.teamsCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.TeamsCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const EmailLogsScalarFieldEnum = {
  email_log_id: 'email_log_id',
  league_id: 'league_id',
  member_id: 'member_id',
  email_type: 'email_type',
  ts: 'ts',
  week: 'week',
  resend_id: 'resend_id'
} as const

export type EmailLogsScalarFieldEnum = (typeof EmailLogsScalarFieldEnum)[keyof typeof EmailLogsScalarFieldEnum]


export const WeekWinnersScalarFieldEnum = {
  id: 'id',
  league_id: 'league_id',
  membership_id: 'membership_id',
  week: 'week',
  correct_count: 'correct_count',
  score_diff: 'score_diff'
} as const

export type WeekWinnersScalarFieldEnum = (typeof WeekWinnersScalarFieldEnum)[keyof typeof WeekWinnersScalarFieldEnum]


export const GamesScalarFieldEnum = {
  gid: 'gid',
  season: 'season',
  week: 'week',
  ts: 'ts',
  home: 'home',
  away: 'away',
  homescore: 'homescore',
  awayscore: 'awayscore',
  done: 'done',
  winner: 'winner',
  international: 'international',
  seconds: 'seconds',
  current_record: 'current_record',
  is_tiebreaker: 'is_tiebreaker',
  homerecord: 'homerecord',
  awayrecord: 'awayrecord',
  current_quarter_seconds_remaining: 'current_quarter_seconds_remaining',
  current_quarter: 'current_quarter',
  msf_id: 'msf_id',
  espn_id: 'espn_id'
} as const

export type GamesScalarFieldEnum = (typeof GamesScalarFieldEnum)[keyof typeof GamesScalarFieldEnum]


export const LeaguemembersScalarFieldEnum = {
  membership_id: 'membership_id',
  league_id: 'league_id',
  user_id: 'user_id',
  ts: 'ts',
  role: 'role',
  paid: 'paid'
} as const

export type LeaguemembersScalarFieldEnum = (typeof LeaguemembersScalarFieldEnum)[keyof typeof LeaguemembersScalarFieldEnum]


export const LeaguemessagesScalarFieldEnum = {
  message_id: 'message_id',
  content: 'content',
  member_id: 'member_id',
  league_id: 'league_id',
  week: 'week',
  message_type: 'message_type',
  createdAt: 'createdAt',
  status: 'status'
} as const

export type LeaguemessagesScalarFieldEnum = (typeof LeaguemessagesScalarFieldEnum)[keyof typeof LeaguemessagesScalarFieldEnum]


export const LeaguesScalarFieldEnum = {
  league_id: 'league_id',
  created_by_user_id: 'created_by_user_id',
  name: 'name',
  created_time: 'created_time',
  season: 'season',
  late_policy: 'late_policy',
  pick_policy: 'pick_policy',
  reminder_policy: 'reminder_policy',
  scoring_type: 'scoring_type',
  share_code: 'share_code',
  superbowl_competition: 'superbowl_competition',
  prior_league_id: 'prior_league_id',
  status: 'status'
} as const

export type LeaguesScalarFieldEnum = (typeof LeaguesScalarFieldEnum)[keyof typeof LeaguesScalarFieldEnum]


export const PeopleScalarFieldEnum = {
  uid: 'uid',
  username: 'username',
  fname: 'fname',
  lname: 'lname',
  email: 'email',
  season: 'season',
  email2: 'email2',
  google_photo_url: 'google_photo_url',
  google_email: 'google_email',
  google_userid: 'google_userid',
  supabase_id: 'supabase_id'
} as const

export type PeopleScalarFieldEnum = (typeof PeopleScalarFieldEnum)[keyof typeof PeopleScalarFieldEnum]


export const PicksScalarFieldEnum = {
  pickid: 'pickid',
  uid: 'uid',
  season: 'season',
  week: 'week',
  gid: 'gid',
  winner: 'winner',
  loser: 'loser',
  score: 'score',
  ts: 'ts',
  correct: 'correct',
  done: 'done',
  is_random: 'is_random',
  member_id: 'member_id'
} as const

export type PicksScalarFieldEnum = (typeof PicksScalarFieldEnum)[keyof typeof PicksScalarFieldEnum]


export const SuperbowlScalarFieldEnum = {
  pickid: 'pickid',
  uid: 'uid',
  winner: 'winner',
  loser: 'loser',
  score: 'score',
  ts: 'ts',
  season: 'season',
  member_id: 'member_id'
} as const

export type SuperbowlScalarFieldEnum = (typeof SuperbowlScalarFieldEnum)[keyof typeof SuperbowlScalarFieldEnum]


export const SuperbowlsquaresScalarFieldEnum = {
  square_id: 'square_id',
  uid: 'uid',
  league_id: 'league_id',
  afc_score_index: 'afc_score_index',
  nfc_score_index: 'nfc_score_index',
  correct: 'correct',
  ts: 'ts'
} as const

export type SuperbowlsquaresScalarFieldEnum = (typeof SuperbowlsquaresScalarFieldEnum)[keyof typeof SuperbowlsquaresScalarFieldEnum]


export const TeamsScalarFieldEnum = {
  teamid: 'teamid',
  abbrev: 'abbrev',
  loc: 'loc',
  name: 'name',
  conference: 'conference',
  primary_color: 'primary_color',
  secondary_color: 'secondary_color',
  tertiary_color: 'tertiary_color'
} as const

export type TeamsScalarFieldEnum = (typeof TeamsScalarFieldEnum)[keyof typeof TeamsScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]



/**
 * Field references 
 */


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


/**
 * Reference to a field of type 'EmailType'
 */
export type EnumEmailTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmailType'>
    


/**
 * Reference to a field of type 'EmailType[]'
 */
export type ListEnumEmailTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmailType[]'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


/**
 * Reference to a field of type 'MemberRole'
 */
export type EnumMemberRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MemberRole'>
    


/**
 * Reference to a field of type 'MemberRole[]'
 */
export type ListEnumMemberRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MemberRole[]'>
    


/**
 * Reference to a field of type 'MessageType'
 */
export type EnumMessageTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MessageType'>
    


/**
 * Reference to a field of type 'MessageType[]'
 */
export type ListEnumMessageTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MessageType[]'>
    


/**
 * Reference to a field of type 'MessageStatus'
 */
export type EnumMessageStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MessageStatus'>
    


/**
 * Reference to a field of type 'MessageStatus[]'
 */
export type ListEnumMessageStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MessageStatus[]'>
    


/**
 * Reference to a field of type 'LatePolicy'
 */
export type EnumLatePolicyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LatePolicy'>
    


/**
 * Reference to a field of type 'LatePolicy[]'
 */
export type ListEnumLatePolicyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LatePolicy[]'>
    


/**
 * Reference to a field of type 'PickPolicy'
 */
export type EnumPickPolicyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PickPolicy'>
    


/**
 * Reference to a field of type 'PickPolicy[]'
 */
export type ListEnumPickPolicyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PickPolicy[]'>
    


/**
 * Reference to a field of type 'ReminderPolicy'
 */
export type EnumReminderPolicyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReminderPolicy'>
    


/**
 * Reference to a field of type 'ReminderPolicy[]'
 */
export type ListEnumReminderPolicyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReminderPolicy[]'>
    


/**
 * Reference to a field of type 'ScoringType'
 */
export type EnumScoringTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ScoringType'>
    


/**
 * Reference to a field of type 'ScoringType[]'
 */
export type ListEnumScoringTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ScoringType[]'>
    


/**
 * Reference to a field of type 'LeagueStatus'
 */
export type EnumLeagueStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LeagueStatus'>
    


/**
 * Reference to a field of type 'LeagueStatus[]'
 */
export type ListEnumLeagueStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LeagueStatus[]'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *   { emit: 'stdout', level: 'query' },
   *   { emit: 'stdout', level: 'info' },
   *   { emit: 'stdout', level: 'warn' }
   *   { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
   */
  adapter?: runtime.SqlDriverAdapterFactory | null
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  emailLogs?: Prisma.EmailLogsOmit
  weekWinners?: Prisma.WeekWinnersOmit
  games?: Prisma.gamesOmit
  leaguemembers?: Prisma.leaguemembersOmit
  leaguemessages?: Prisma.leaguemessagesOmit
  leagues?: Prisma.leaguesOmit
  people?: Prisma.peopleOmit
  picks?: Prisma.picksOmit
  superbowl?: Prisma.superbowlOmit
  superbowlsquares?: Prisma.superbowlsquaresOmit
  teams?: Prisma.teamsOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw' 
  | 'groupBy'

/**
 * These options are being passed into the middleware as "params"
 */
export type MiddlewareParams = {
  model?: ModelName
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => runtime.Types.Utils.JsPromise<T>,
) => runtime.Types.Utils.JsPromise<T>

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

