
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `leaguemessages` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model leaguemessages
 * 
 */
export type leaguemessagesModel = runtime.Types.Result.DefaultSelection<Prisma.$leaguemessagesPayload>

export type AggregateLeaguemessages = {
  _count: LeaguemessagesCountAggregateOutputType | null
  _avg: LeaguemessagesAvgAggregateOutputType | null
  _sum: LeaguemessagesSumAggregateOutputType | null
  _min: LeaguemessagesMinAggregateOutputType | null
  _max: LeaguemessagesMaxAggregateOutputType | null
}

export type LeaguemessagesAvgAggregateOutputType = {
  member_id: number | null
  league_id: number | null
  week: number | null
}

export type LeaguemessagesSumAggregateOutputType = {
  member_id: number | null
  league_id: number | null
  week: number | null
}

export type LeaguemessagesMinAggregateOutputType = {
  message_id: string | null
  content: string | null
  member_id: number | null
  league_id: number | null
  week: number | null
  message_type: $Enums.MessageType | null
  createdAt: Date | null
  status: $Enums.MessageStatus | null
}

export type LeaguemessagesMaxAggregateOutputType = {
  message_id: string | null
  content: string | null
  member_id: number | null
  league_id: number | null
  week: number | null
  message_type: $Enums.MessageType | null
  createdAt: Date | null
  status: $Enums.MessageStatus | null
}

export type LeaguemessagesCountAggregateOutputType = {
  message_id: number
  content: number
  member_id: number
  league_id: number
  week: number
  message_type: number
  createdAt: number
  status: number
  _all: number
}


export type LeaguemessagesAvgAggregateInputType = {
  member_id?: true
  league_id?: true
  week?: true
}

export type LeaguemessagesSumAggregateInputType = {
  member_id?: true
  league_id?: true
  week?: true
}

export type LeaguemessagesMinAggregateInputType = {
  message_id?: true
  content?: true
  member_id?: true
  league_id?: true
  week?: true
  message_type?: true
  createdAt?: true
  status?: true
}

export type LeaguemessagesMaxAggregateInputType = {
  message_id?: true
  content?: true
  member_id?: true
  league_id?: true
  week?: true
  message_type?: true
  createdAt?: true
  status?: true
}

export type LeaguemessagesCountAggregateInputType = {
  message_id?: true
  content?: true
  member_id?: true
  league_id?: true
  week?: true
  message_type?: true
  createdAt?: true
  status?: true
  _all?: true
}

export type LeaguemessagesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which leaguemessages to aggregate.
   */
  where?: Prisma.leaguemessagesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of leaguemessages to fetch.
   */
  orderBy?: Prisma.leaguemessagesOrderByWithRelationInput | Prisma.leaguemessagesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.leaguemessagesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` leaguemessages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` leaguemessages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned leaguemessages
  **/
  _count?: true | LeaguemessagesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: LeaguemessagesAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: LeaguemessagesSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: LeaguemessagesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: LeaguemessagesMaxAggregateInputType
}

export type GetLeaguemessagesAggregateType<T extends LeaguemessagesAggregateArgs> = {
      [P in keyof T & keyof AggregateLeaguemessages]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLeaguemessages[P]>
    : Prisma.GetScalarType<T[P], AggregateLeaguemessages[P]>
}




export type leaguemessagesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.leaguemessagesWhereInput
  orderBy?: Prisma.leaguemessagesOrderByWithAggregationInput | Prisma.leaguemessagesOrderByWithAggregationInput[]
  by: Prisma.LeaguemessagesScalarFieldEnum[] | Prisma.LeaguemessagesScalarFieldEnum
  having?: Prisma.leaguemessagesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: LeaguemessagesCountAggregateInputType | true
  _avg?: LeaguemessagesAvgAggregateInputType
  _sum?: LeaguemessagesSumAggregateInputType
  _min?: LeaguemessagesMinAggregateInputType
  _max?: LeaguemessagesMaxAggregateInputType
}

export type LeaguemessagesGroupByOutputType = {
  message_id: string
  content: string
  member_id: number
  league_id: number
  week: number | null
  message_type: $Enums.MessageType
  createdAt: Date
  status: $Enums.MessageStatus
  _count: LeaguemessagesCountAggregateOutputType | null
  _avg: LeaguemessagesAvgAggregateOutputType | null
  _sum: LeaguemessagesSumAggregateOutputType | null
  _min: LeaguemessagesMinAggregateOutputType | null
  _max: LeaguemessagesMaxAggregateOutputType | null
}

type GetLeaguemessagesGroupByPayload<T extends leaguemessagesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<LeaguemessagesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof LeaguemessagesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], LeaguemessagesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], LeaguemessagesGroupByOutputType[P]>
      }
    >
  > 



export type leaguemessagesWhereInput = {
  AND?: Prisma.leaguemessagesWhereInput | Prisma.leaguemessagesWhereInput[]
  OR?: Prisma.leaguemessagesWhereInput[]
  NOT?: Prisma.leaguemessagesWhereInput | Prisma.leaguemessagesWhereInput[]
  message_id?: Prisma.StringFilter<"leaguemessages"> | string
  content?: Prisma.StringFilter<"leaguemessages"> | string
  member_id?: Prisma.IntFilter<"leaguemessages"> | number
  league_id?: Prisma.IntFilter<"leaguemessages"> | number
  week?: Prisma.IntNullableFilter<"leaguemessages"> | number | null
  message_type?: Prisma.EnumMessageTypeFilter<"leaguemessages"> | $Enums.MessageType
  createdAt?: Prisma.DateTimeFilter<"leaguemessages"> | Date | string
  status?: Prisma.EnumMessageStatusFilter<"leaguemessages"> | $Enums.MessageStatus
  leagues?: Prisma.XOR<Prisma.LeaguesScalarRelationFilter, Prisma.leaguesWhereInput>
  leaguemembers?: Prisma.XOR<Prisma.LeaguemembersScalarRelationFilter, Prisma.leaguemembersWhereInput>
}

export type leaguemessagesOrderByWithRelationInput = {
  message_id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  member_id?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  week?: Prisma.SortOrderInput | Prisma.SortOrder
  message_type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  status?: Prisma.SortOrder
  leagues?: Prisma.leaguesOrderByWithRelationInput
  leaguemembers?: Prisma.leaguemembersOrderByWithRelationInput
}

export type leaguemessagesWhereUniqueInput = Prisma.AtLeast<{
  message_id?: string
  AND?: Prisma.leaguemessagesWhereInput | Prisma.leaguemessagesWhereInput[]
  OR?: Prisma.leaguemessagesWhereInput[]
  NOT?: Prisma.leaguemessagesWhereInput | Prisma.leaguemessagesWhereInput[]
  content?: Prisma.StringFilter<"leaguemessages"> | string
  member_id?: Prisma.IntFilter<"leaguemessages"> | number
  league_id?: Prisma.IntFilter<"leaguemessages"> | number
  week?: Prisma.IntNullableFilter<"leaguemessages"> | number | null
  message_type?: Prisma.EnumMessageTypeFilter<"leaguemessages"> | $Enums.MessageType
  createdAt?: Prisma.DateTimeFilter<"leaguemessages"> | Date | string
  status?: Prisma.EnumMessageStatusFilter<"leaguemessages"> | $Enums.MessageStatus
  leagues?: Prisma.XOR<Prisma.LeaguesScalarRelationFilter, Prisma.leaguesWhereInput>
  leaguemembers?: Prisma.XOR<Prisma.LeaguemembersScalarRelationFilter, Prisma.leaguemembersWhereInput>
}, "message_id">

export type leaguemessagesOrderByWithAggregationInput = {
  message_id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  member_id?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  week?: Prisma.SortOrderInput | Prisma.SortOrder
  message_type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  status?: Prisma.SortOrder
  _count?: Prisma.leaguemessagesCountOrderByAggregateInput
  _avg?: Prisma.leaguemessagesAvgOrderByAggregateInput
  _max?: Prisma.leaguemessagesMaxOrderByAggregateInput
  _min?: Prisma.leaguemessagesMinOrderByAggregateInput
  _sum?: Prisma.leaguemessagesSumOrderByAggregateInput
}

export type leaguemessagesScalarWhereWithAggregatesInput = {
  AND?: Prisma.leaguemessagesScalarWhereWithAggregatesInput | Prisma.leaguemessagesScalarWhereWithAggregatesInput[]
  OR?: Prisma.leaguemessagesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.leaguemessagesScalarWhereWithAggregatesInput | Prisma.leaguemessagesScalarWhereWithAggregatesInput[]
  message_id?: Prisma.StringWithAggregatesFilter<"leaguemessages"> | string
  content?: Prisma.StringWithAggregatesFilter<"leaguemessages"> | string
  member_id?: Prisma.IntWithAggregatesFilter<"leaguemessages"> | number
  league_id?: Prisma.IntWithAggregatesFilter<"leaguemessages"> | number
  week?: Prisma.IntNullableWithAggregatesFilter<"leaguemessages"> | number | null
  message_type?: Prisma.EnumMessageTypeWithAggregatesFilter<"leaguemessages"> | $Enums.MessageType
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"leaguemessages"> | Date | string
  status?: Prisma.EnumMessageStatusWithAggregatesFilter<"leaguemessages"> | $Enums.MessageStatus
}

export type leaguemessagesCreateInput = {
  message_id?: string
  content: string
  week?: number | null
  message_type: $Enums.MessageType
  createdAt?: Date | string
  status?: $Enums.MessageStatus
  leagues: Prisma.leaguesCreateNestedOneWithoutLeaguemessagesInput
  leaguemembers: Prisma.leaguemembersCreateNestedOneWithoutLeaguemessagesInput
}

export type leaguemessagesUncheckedCreateInput = {
  message_id?: string
  content: string
  member_id: number
  league_id: number
  week?: number | null
  message_type: $Enums.MessageType
  createdAt?: Date | string
  status?: $Enums.MessageStatus
}

export type leaguemessagesUpdateInput = {
  message_id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  week?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  message_type?: Prisma.EnumMessageTypeFieldUpdateOperationsInput | $Enums.MessageType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumMessageStatusFieldUpdateOperationsInput | $Enums.MessageStatus
  leagues?: Prisma.leaguesUpdateOneRequiredWithoutLeaguemessagesNestedInput
  leaguemembers?: Prisma.leaguemembersUpdateOneRequiredWithoutLeaguemessagesNestedInput
}

export type leaguemessagesUncheckedUpdateInput = {
  message_id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  member_id?: Prisma.IntFieldUpdateOperationsInput | number
  league_id?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  message_type?: Prisma.EnumMessageTypeFieldUpdateOperationsInput | $Enums.MessageType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumMessageStatusFieldUpdateOperationsInput | $Enums.MessageStatus
}

export type leaguemessagesCreateManyInput = {
  message_id?: string
  content: string
  member_id: number
  league_id: number
  week?: number | null
  message_type: $Enums.MessageType
  createdAt?: Date | string
  status?: $Enums.MessageStatus
}

export type leaguemessagesUpdateManyMutationInput = {
  message_id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  week?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  message_type?: Prisma.EnumMessageTypeFieldUpdateOperationsInput | $Enums.MessageType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumMessageStatusFieldUpdateOperationsInput | $Enums.MessageStatus
}

export type leaguemessagesUncheckedUpdateManyInput = {
  message_id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  member_id?: Prisma.IntFieldUpdateOperationsInput | number
  league_id?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  message_type?: Prisma.EnumMessageTypeFieldUpdateOperationsInput | $Enums.MessageType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumMessageStatusFieldUpdateOperationsInput | $Enums.MessageStatus
}

export type LeaguemessagesListRelationFilter = {
  every?: Prisma.leaguemessagesWhereInput
  some?: Prisma.leaguemessagesWhereInput
  none?: Prisma.leaguemessagesWhereInput
}

export type leaguemessagesOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type leaguemessagesCountOrderByAggregateInput = {
  message_id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  member_id?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  week?: Prisma.SortOrder
  message_type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type leaguemessagesAvgOrderByAggregateInput = {
  member_id?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  week?: Prisma.SortOrder
}

export type leaguemessagesMaxOrderByAggregateInput = {
  message_id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  member_id?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  week?: Prisma.SortOrder
  message_type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type leaguemessagesMinOrderByAggregateInput = {
  message_id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  member_id?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  week?: Prisma.SortOrder
  message_type?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type leaguemessagesSumOrderByAggregateInput = {
  member_id?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  week?: Prisma.SortOrder
}

export type leaguemessagesCreateNestedManyWithoutLeaguemembersInput = {
  create?: Prisma.XOR<Prisma.leaguemessagesCreateWithoutLeaguemembersInput, Prisma.leaguemessagesUncheckedCreateWithoutLeaguemembersInput> | Prisma.leaguemessagesCreateWithoutLeaguemembersInput[] | Prisma.leaguemessagesUncheckedCreateWithoutLeaguemembersInput[]
  connectOrCreate?: Prisma.leaguemessagesCreateOrConnectWithoutLeaguemembersInput | Prisma.leaguemessagesCreateOrConnectWithoutLeaguemembersInput[]
  createMany?: Prisma.leaguemessagesCreateManyLeaguemembersInputEnvelope
  connect?: Prisma.leaguemessagesWhereUniqueInput | Prisma.leaguemessagesWhereUniqueInput[]
}

export type leaguemessagesUncheckedCreateNestedManyWithoutLeaguemembersInput = {
  create?: Prisma.XOR<Prisma.leaguemessagesCreateWithoutLeaguemembersInput, Prisma.leaguemessagesUncheckedCreateWithoutLeaguemembersInput> | Prisma.leaguemessagesCreateWithoutLeaguemembersInput[] | Prisma.leaguemessagesUncheckedCreateWithoutLeaguemembersInput[]
  connectOrCreate?: Prisma.leaguemessagesCreateOrConnectWithoutLeaguemembersInput | Prisma.leaguemessagesCreateOrConnectWithoutLeaguemembersInput[]
  createMany?: Prisma.leaguemessagesCreateManyLeaguemembersInputEnvelope
  connect?: Prisma.leaguemessagesWhereUniqueInput | Prisma.leaguemessagesWhereUniqueInput[]
}

export type leaguemessagesUpdateManyWithoutLeaguemembersNestedInput = {
  create?: Prisma.XOR<Prisma.leaguemessagesCreateWithoutLeaguemembersInput, Prisma.leaguemessagesUncheckedCreateWithoutLeaguemembersInput> | Prisma.leaguemessagesCreateWithoutLeaguemembersInput[] | Prisma.leaguemessagesUncheckedCreateWithoutLeaguemembersInput[]
  connectOrCreate?: Prisma.leaguemessagesCreateOrConnectWithoutLeaguemembersInput | Prisma.leaguemessagesCreateOrConnectWithoutLeaguemembersInput[]
  upsert?: Prisma.leaguemessagesUpsertWithWhereUniqueWithoutLeaguemembersInput | Prisma.leaguemessagesUpsertWithWhereUniqueWithoutLeaguemembersInput[]
  createMany?: Prisma.leaguemessagesCreateManyLeaguemembersInputEnvelope
  set?: Prisma.leaguemessagesWhereUniqueInput | Prisma.leaguemessagesWhereUniqueInput[]
  disconnect?: Prisma.leaguemessagesWhereUniqueInput | Prisma.leaguemessagesWhereUniqueInput[]
  delete?: Prisma.leaguemessagesWhereUniqueInput | Prisma.leaguemessagesWhereUniqueInput[]
  connect?: Prisma.leaguemessagesWhereUniqueInput | Prisma.leaguemessagesWhereUniqueInput[]
  update?: Prisma.leaguemessagesUpdateWithWhereUniqueWithoutLeaguemembersInput | Prisma.leaguemessagesUpdateWithWhereUniqueWithoutLeaguemembersInput[]
  updateMany?: Prisma.leaguemessagesUpdateManyWithWhereWithoutLeaguemembersInput | Prisma.leaguemessagesUpdateManyWithWhereWithoutLeaguemembersInput[]
  deleteMany?: Prisma.leaguemessagesScalarWhereInput | Prisma.leaguemessagesScalarWhereInput[]
}

export type leaguemessagesUncheckedUpdateManyWithoutLeaguemembersNestedInput = {
  create?: Prisma.XOR<Prisma.leaguemessagesCreateWithoutLeaguemembersInput, Prisma.leaguemessagesUncheckedCreateWithoutLeaguemembersInput> | Prisma.leaguemessagesCreateWithoutLeaguemembersInput[] | Prisma.leaguemessagesUncheckedCreateWithoutLeaguemembersInput[]
  connectOrCreate?: Prisma.leaguemessagesCreateOrConnectWithoutLeaguemembersInput | Prisma.leaguemessagesCreateOrConnectWithoutLeaguemembersInput[]
  upsert?: Prisma.leaguemessagesUpsertWithWhereUniqueWithoutLeaguemembersInput | Prisma.leaguemessagesUpsertWithWhereUniqueWithoutLeaguemembersInput[]
  createMany?: Prisma.leaguemessagesCreateManyLeaguemembersInputEnvelope
  set?: Prisma.leaguemessagesWhereUniqueInput | Prisma.leaguemessagesWhereUniqueInput[]
  disconnect?: Prisma.leaguemessagesWhereUniqueInput | Prisma.leaguemessagesWhereUniqueInput[]
  delete?: Prisma.leaguemessagesWhereUniqueInput | Prisma.leaguemessagesWhereUniqueInput[]
  connect?: Prisma.leaguemessagesWhereUniqueInput | Prisma.leaguemessagesWhereUniqueInput[]
  update?: Prisma.leaguemessagesUpdateWithWhereUniqueWithoutLeaguemembersInput | Prisma.leaguemessagesUpdateWithWhereUniqueWithoutLeaguemembersInput[]
  updateMany?: Prisma.leaguemessagesUpdateManyWithWhereWithoutLeaguemembersInput | Prisma.leaguemessagesUpdateManyWithWhereWithoutLeaguemembersInput[]
  deleteMany?: Prisma.leaguemessagesScalarWhereInput | Prisma.leaguemessagesScalarWhereInput[]
}

export type EnumMessageTypeFieldUpdateOperationsInput = {
  set?: $Enums.MessageType
}

export type EnumMessageStatusFieldUpdateOperationsInput = {
  set?: $Enums.MessageStatus
}

export type leaguemessagesCreateNestedManyWithoutLeaguesInput = {
  create?: Prisma.XOR<Prisma.leaguemessagesCreateWithoutLeaguesInput, Prisma.leaguemessagesUncheckedCreateWithoutLeaguesInput> | Prisma.leaguemessagesCreateWithoutLeaguesInput[] | Prisma.leaguemessagesUncheckedCreateWithoutLeaguesInput[]
  connectOrCreate?: Prisma.leaguemessagesCreateOrConnectWithoutLeaguesInput | Prisma.leaguemessagesCreateOrConnectWithoutLeaguesInput[]
  createMany?: Prisma.leaguemessagesCreateManyLeaguesInputEnvelope
  connect?: Prisma.leaguemessagesWhereUniqueInput | Prisma.leaguemessagesWhereUniqueInput[]
}

export type leaguemessagesUncheckedCreateNestedManyWithoutLeaguesInput = {
  create?: Prisma.XOR<Prisma.leaguemessagesCreateWithoutLeaguesInput, Prisma.leaguemessagesUncheckedCreateWithoutLeaguesInput> | Prisma.leaguemessagesCreateWithoutLeaguesInput[] | Prisma.leaguemessagesUncheckedCreateWithoutLeaguesInput[]
  connectOrCreate?: Prisma.leaguemessagesCreateOrConnectWithoutLeaguesInput | Prisma.leaguemessagesCreateOrConnectWithoutLeaguesInput[]
  createMany?: Prisma.leaguemessagesCreateManyLeaguesInputEnvelope
  connect?: Prisma.leaguemessagesWhereUniqueInput | Prisma.leaguemessagesWhereUniqueInput[]
}

export type leaguemessagesUpdateManyWithoutLeaguesNestedInput = {
  create?: Prisma.XOR<Prisma.leaguemessagesCreateWithoutLeaguesInput, Prisma.leaguemessagesUncheckedCreateWithoutLeaguesInput> | Prisma.leaguemessagesCreateWithoutLeaguesInput[] | Prisma.leaguemessagesUncheckedCreateWithoutLeaguesInput[]
  connectOrCreate?: Prisma.leaguemessagesCreateOrConnectWithoutLeaguesInput | Prisma.leaguemessagesCreateOrConnectWithoutLeaguesInput[]
  upsert?: Prisma.leaguemessagesUpsertWithWhereUniqueWithoutLeaguesInput | Prisma.leaguemessagesUpsertWithWhereUniqueWithoutLeaguesInput[]
  createMany?: Prisma.leaguemessagesCreateManyLeaguesInputEnvelope
  set?: Prisma.leaguemessagesWhereUniqueInput | Prisma.leaguemessagesWhereUniqueInput[]
  disconnect?: Prisma.leaguemessagesWhereUniqueInput | Prisma.leaguemessagesWhereUniqueInput[]
  delete?: Prisma.leaguemessagesWhereUniqueInput | Prisma.leaguemessagesWhereUniqueInput[]
  connect?: Prisma.leaguemessagesWhereUniqueInput | Prisma.leaguemessagesWhereUniqueInput[]
  update?: Prisma.leaguemessagesUpdateWithWhereUniqueWithoutLeaguesInput | Prisma.leaguemessagesUpdateWithWhereUniqueWithoutLeaguesInput[]
  updateMany?: Prisma.leaguemessagesUpdateManyWithWhereWithoutLeaguesInput | Prisma.leaguemessagesUpdateManyWithWhereWithoutLeaguesInput[]
  deleteMany?: Prisma.leaguemessagesScalarWhereInput | Prisma.leaguemessagesScalarWhereInput[]
}

export type leaguemessagesUncheckedUpdateManyWithoutLeaguesNestedInput = {
  create?: Prisma.XOR<Prisma.leaguemessagesCreateWithoutLeaguesInput, Prisma.leaguemessagesUncheckedCreateWithoutLeaguesInput> | Prisma.leaguemessagesCreateWithoutLeaguesInput[] | Prisma.leaguemessagesUncheckedCreateWithoutLeaguesInput[]
  connectOrCreate?: Prisma.leaguemessagesCreateOrConnectWithoutLeaguesInput | Prisma.leaguemessagesCreateOrConnectWithoutLeaguesInput[]
  upsert?: Prisma.leaguemessagesUpsertWithWhereUniqueWithoutLeaguesInput | Prisma.leaguemessagesUpsertWithWhereUniqueWithoutLeaguesInput[]
  createMany?: Prisma.leaguemessagesCreateManyLeaguesInputEnvelope
  set?: Prisma.leaguemessagesWhereUniqueInput | Prisma.leaguemessagesWhereUniqueInput[]
  disconnect?: Prisma.leaguemessagesWhereUniqueInput | Prisma.leaguemessagesWhereUniqueInput[]
  delete?: Prisma.leaguemessagesWhereUniqueInput | Prisma.leaguemessagesWhereUniqueInput[]
  connect?: Prisma.leaguemessagesWhereUniqueInput | Prisma.leaguemessagesWhereUniqueInput[]
  update?: Prisma.leaguemessagesUpdateWithWhereUniqueWithoutLeaguesInput | Prisma.leaguemessagesUpdateWithWhereUniqueWithoutLeaguesInput[]
  updateMany?: Prisma.leaguemessagesUpdateManyWithWhereWithoutLeaguesInput | Prisma.leaguemessagesUpdateManyWithWhereWithoutLeaguesInput[]
  deleteMany?: Prisma.leaguemessagesScalarWhereInput | Prisma.leaguemessagesScalarWhereInput[]
}

export type leaguemessagesCreateWithoutLeaguemembersInput = {
  message_id?: string
  content: string
  week?: number | null
  message_type: $Enums.MessageType
  createdAt?: Date | string
  status?: $Enums.MessageStatus
  leagues: Prisma.leaguesCreateNestedOneWithoutLeaguemessagesInput
}

export type leaguemessagesUncheckedCreateWithoutLeaguemembersInput = {
  message_id?: string
  content: string
  league_id: number
  week?: number | null
  message_type: $Enums.MessageType
  createdAt?: Date | string
  status?: $Enums.MessageStatus
}

export type leaguemessagesCreateOrConnectWithoutLeaguemembersInput = {
  where: Prisma.leaguemessagesWhereUniqueInput
  create: Prisma.XOR<Prisma.leaguemessagesCreateWithoutLeaguemembersInput, Prisma.leaguemessagesUncheckedCreateWithoutLeaguemembersInput>
}

export type leaguemessagesCreateManyLeaguemembersInputEnvelope = {
  data: Prisma.leaguemessagesCreateManyLeaguemembersInput | Prisma.leaguemessagesCreateManyLeaguemembersInput[]
  skipDuplicates?: boolean
}

export type leaguemessagesUpsertWithWhereUniqueWithoutLeaguemembersInput = {
  where: Prisma.leaguemessagesWhereUniqueInput
  update: Prisma.XOR<Prisma.leaguemessagesUpdateWithoutLeaguemembersInput, Prisma.leaguemessagesUncheckedUpdateWithoutLeaguemembersInput>
  create: Prisma.XOR<Prisma.leaguemessagesCreateWithoutLeaguemembersInput, Prisma.leaguemessagesUncheckedCreateWithoutLeaguemembersInput>
}

export type leaguemessagesUpdateWithWhereUniqueWithoutLeaguemembersInput = {
  where: Prisma.leaguemessagesWhereUniqueInput
  data: Prisma.XOR<Prisma.leaguemessagesUpdateWithoutLeaguemembersInput, Prisma.leaguemessagesUncheckedUpdateWithoutLeaguemembersInput>
}

export type leaguemessagesUpdateManyWithWhereWithoutLeaguemembersInput = {
  where: Prisma.leaguemessagesScalarWhereInput
  data: Prisma.XOR<Prisma.leaguemessagesUpdateManyMutationInput, Prisma.leaguemessagesUncheckedUpdateManyWithoutLeaguemembersInput>
}

export type leaguemessagesScalarWhereInput = {
  AND?: Prisma.leaguemessagesScalarWhereInput | Prisma.leaguemessagesScalarWhereInput[]
  OR?: Prisma.leaguemessagesScalarWhereInput[]
  NOT?: Prisma.leaguemessagesScalarWhereInput | Prisma.leaguemessagesScalarWhereInput[]
  message_id?: Prisma.StringFilter<"leaguemessages"> | string
  content?: Prisma.StringFilter<"leaguemessages"> | string
  member_id?: Prisma.IntFilter<"leaguemessages"> | number
  league_id?: Prisma.IntFilter<"leaguemessages"> | number
  week?: Prisma.IntNullableFilter<"leaguemessages"> | number | null
  message_type?: Prisma.EnumMessageTypeFilter<"leaguemessages"> | $Enums.MessageType
  createdAt?: Prisma.DateTimeFilter<"leaguemessages"> | Date | string
  status?: Prisma.EnumMessageStatusFilter<"leaguemessages"> | $Enums.MessageStatus
}

export type leaguemessagesCreateWithoutLeaguesInput = {
  message_id?: string
  content: string
  week?: number | null
  message_type: $Enums.MessageType
  createdAt?: Date | string
  status?: $Enums.MessageStatus
  leaguemembers: Prisma.leaguemembersCreateNestedOneWithoutLeaguemessagesInput
}

export type leaguemessagesUncheckedCreateWithoutLeaguesInput = {
  message_id?: string
  content: string
  member_id: number
  week?: number | null
  message_type: $Enums.MessageType
  createdAt?: Date | string
  status?: $Enums.MessageStatus
}

export type leaguemessagesCreateOrConnectWithoutLeaguesInput = {
  where: Prisma.leaguemessagesWhereUniqueInput
  create: Prisma.XOR<Prisma.leaguemessagesCreateWithoutLeaguesInput, Prisma.leaguemessagesUncheckedCreateWithoutLeaguesInput>
}

export type leaguemessagesCreateManyLeaguesInputEnvelope = {
  data: Prisma.leaguemessagesCreateManyLeaguesInput | Prisma.leaguemessagesCreateManyLeaguesInput[]
  skipDuplicates?: boolean
}

export type leaguemessagesUpsertWithWhereUniqueWithoutLeaguesInput = {
  where: Prisma.leaguemessagesWhereUniqueInput
  update: Prisma.XOR<Prisma.leaguemessagesUpdateWithoutLeaguesInput, Prisma.leaguemessagesUncheckedUpdateWithoutLeaguesInput>
  create: Prisma.XOR<Prisma.leaguemessagesCreateWithoutLeaguesInput, Prisma.leaguemessagesUncheckedCreateWithoutLeaguesInput>
}

export type leaguemessagesUpdateWithWhereUniqueWithoutLeaguesInput = {
  where: Prisma.leaguemessagesWhereUniqueInput
  data: Prisma.XOR<Prisma.leaguemessagesUpdateWithoutLeaguesInput, Prisma.leaguemessagesUncheckedUpdateWithoutLeaguesInput>
}

export type leaguemessagesUpdateManyWithWhereWithoutLeaguesInput = {
  where: Prisma.leaguemessagesScalarWhereInput
  data: Prisma.XOR<Prisma.leaguemessagesUpdateManyMutationInput, Prisma.leaguemessagesUncheckedUpdateManyWithoutLeaguesInput>
}

export type leaguemessagesCreateManyLeaguemembersInput = {
  message_id?: string
  content: string
  league_id: number
  week?: number | null
  message_type: $Enums.MessageType
  createdAt?: Date | string
  status?: $Enums.MessageStatus
}

export type leaguemessagesUpdateWithoutLeaguemembersInput = {
  message_id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  week?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  message_type?: Prisma.EnumMessageTypeFieldUpdateOperationsInput | $Enums.MessageType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumMessageStatusFieldUpdateOperationsInput | $Enums.MessageStatus
  leagues?: Prisma.leaguesUpdateOneRequiredWithoutLeaguemessagesNestedInput
}

export type leaguemessagesUncheckedUpdateWithoutLeaguemembersInput = {
  message_id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  league_id?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  message_type?: Prisma.EnumMessageTypeFieldUpdateOperationsInput | $Enums.MessageType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumMessageStatusFieldUpdateOperationsInput | $Enums.MessageStatus
}

export type leaguemessagesUncheckedUpdateManyWithoutLeaguemembersInput = {
  message_id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  league_id?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  message_type?: Prisma.EnumMessageTypeFieldUpdateOperationsInput | $Enums.MessageType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumMessageStatusFieldUpdateOperationsInput | $Enums.MessageStatus
}

export type leaguemessagesCreateManyLeaguesInput = {
  message_id?: string
  content: string
  member_id: number
  week?: number | null
  message_type: $Enums.MessageType
  createdAt?: Date | string
  status?: $Enums.MessageStatus
}

export type leaguemessagesUpdateWithoutLeaguesInput = {
  message_id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  week?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  message_type?: Prisma.EnumMessageTypeFieldUpdateOperationsInput | $Enums.MessageType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumMessageStatusFieldUpdateOperationsInput | $Enums.MessageStatus
  leaguemembers?: Prisma.leaguemembersUpdateOneRequiredWithoutLeaguemessagesNestedInput
}

export type leaguemessagesUncheckedUpdateWithoutLeaguesInput = {
  message_id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  member_id?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  message_type?: Prisma.EnumMessageTypeFieldUpdateOperationsInput | $Enums.MessageType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumMessageStatusFieldUpdateOperationsInput | $Enums.MessageStatus
}

export type leaguemessagesUncheckedUpdateManyWithoutLeaguesInput = {
  message_id?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  member_id?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  message_type?: Prisma.EnumMessageTypeFieldUpdateOperationsInput | $Enums.MessageType
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumMessageStatusFieldUpdateOperationsInput | $Enums.MessageStatus
}



export type leaguemessagesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  message_id?: boolean
  content?: boolean
  member_id?: boolean
  league_id?: boolean
  week?: boolean
  message_type?: boolean
  createdAt?: boolean
  status?: boolean
  leagues?: boolean | Prisma.leaguesDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.leaguemembersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["leaguemessages"]>

export type leaguemessagesSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  message_id?: boolean
  content?: boolean
  member_id?: boolean
  league_id?: boolean
  week?: boolean
  message_type?: boolean
  createdAt?: boolean
  status?: boolean
  leagues?: boolean | Prisma.leaguesDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.leaguemembersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["leaguemessages"]>

export type leaguemessagesSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  message_id?: boolean
  content?: boolean
  member_id?: boolean
  league_id?: boolean
  week?: boolean
  message_type?: boolean
  createdAt?: boolean
  status?: boolean
  leagues?: boolean | Prisma.leaguesDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.leaguemembersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["leaguemessages"]>

export type leaguemessagesSelectScalar = {
  message_id?: boolean
  content?: boolean
  member_id?: boolean
  league_id?: boolean
  week?: boolean
  message_type?: boolean
  createdAt?: boolean
  status?: boolean
}

export type leaguemessagesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"message_id" | "content" | "member_id" | "league_id" | "week" | "message_type" | "createdAt" | "status", ExtArgs["result"]["leaguemessages"]>
export type leaguemessagesInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  leagues?: boolean | Prisma.leaguesDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.leaguemembersDefaultArgs<ExtArgs>
}
export type leaguemessagesIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  leagues?: boolean | Prisma.leaguesDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.leaguemembersDefaultArgs<ExtArgs>
}
export type leaguemessagesIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  leagues?: boolean | Prisma.leaguesDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.leaguemembersDefaultArgs<ExtArgs>
}

export type $leaguemessagesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "leaguemessages"
  objects: {
    leagues: Prisma.$leaguesPayload<ExtArgs>
    leaguemembers: Prisma.$leaguemembersPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    message_id: string
    content: string
    member_id: number
    league_id: number
    week: number | null
    message_type: $Enums.MessageType
    createdAt: Date
    status: $Enums.MessageStatus
  }, ExtArgs["result"]["leaguemessages"]>
  composites: {}
}

export type leaguemessagesGetPayload<S extends boolean | null | undefined | leaguemessagesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$leaguemessagesPayload, S>

export type leaguemessagesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<leaguemessagesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: LeaguemessagesCountAggregateInputType | true
  }

export interface leaguemessagesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['leaguemessages'], meta: { name: 'leaguemessages' } }
  /**
   * Find zero or one Leaguemessages that matches the filter.
   * @param {leaguemessagesFindUniqueArgs} args - Arguments to find a Leaguemessages
   * @example
   * // Get one Leaguemessages
   * const leaguemessages = await prisma.leaguemessages.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends leaguemessagesFindUniqueArgs>(args: Prisma.SelectSubset<T, leaguemessagesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__leaguemessagesClient<runtime.Types.Result.GetResult<Prisma.$leaguemessagesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Leaguemessages that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {leaguemessagesFindUniqueOrThrowArgs} args - Arguments to find a Leaguemessages
   * @example
   * // Get one Leaguemessages
   * const leaguemessages = await prisma.leaguemessages.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends leaguemessagesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, leaguemessagesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__leaguemessagesClient<runtime.Types.Result.GetResult<Prisma.$leaguemessagesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Leaguemessages that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {leaguemessagesFindFirstArgs} args - Arguments to find a Leaguemessages
   * @example
   * // Get one Leaguemessages
   * const leaguemessages = await prisma.leaguemessages.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends leaguemessagesFindFirstArgs>(args?: Prisma.SelectSubset<T, leaguemessagesFindFirstArgs<ExtArgs>>): Prisma.Prisma__leaguemessagesClient<runtime.Types.Result.GetResult<Prisma.$leaguemessagesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Leaguemessages that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {leaguemessagesFindFirstOrThrowArgs} args - Arguments to find a Leaguemessages
   * @example
   * // Get one Leaguemessages
   * const leaguemessages = await prisma.leaguemessages.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends leaguemessagesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, leaguemessagesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__leaguemessagesClient<runtime.Types.Result.GetResult<Prisma.$leaguemessagesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Leaguemessages that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {leaguemessagesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Leaguemessages
   * const leaguemessages = await prisma.leaguemessages.findMany()
   * 
   * // Get first 10 Leaguemessages
   * const leaguemessages = await prisma.leaguemessages.findMany({ take: 10 })
   * 
   * // Only select the `message_id`
   * const leaguemessagesWithMessage_idOnly = await prisma.leaguemessages.findMany({ select: { message_id: true } })
   * 
   */
  findMany<T extends leaguemessagesFindManyArgs>(args?: Prisma.SelectSubset<T, leaguemessagesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$leaguemessagesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Leaguemessages.
   * @param {leaguemessagesCreateArgs} args - Arguments to create a Leaguemessages.
   * @example
   * // Create one Leaguemessages
   * const Leaguemessages = await prisma.leaguemessages.create({
   *   data: {
   *     // ... data to create a Leaguemessages
   *   }
   * })
   * 
   */
  create<T extends leaguemessagesCreateArgs>(args: Prisma.SelectSubset<T, leaguemessagesCreateArgs<ExtArgs>>): Prisma.Prisma__leaguemessagesClient<runtime.Types.Result.GetResult<Prisma.$leaguemessagesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Leaguemessages.
   * @param {leaguemessagesCreateManyArgs} args - Arguments to create many Leaguemessages.
   * @example
   * // Create many Leaguemessages
   * const leaguemessages = await prisma.leaguemessages.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends leaguemessagesCreateManyArgs>(args?: Prisma.SelectSubset<T, leaguemessagesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Leaguemessages and returns the data saved in the database.
   * @param {leaguemessagesCreateManyAndReturnArgs} args - Arguments to create many Leaguemessages.
   * @example
   * // Create many Leaguemessages
   * const leaguemessages = await prisma.leaguemessages.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Leaguemessages and only return the `message_id`
   * const leaguemessagesWithMessage_idOnly = await prisma.leaguemessages.createManyAndReturn({
   *   select: { message_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends leaguemessagesCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, leaguemessagesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$leaguemessagesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Leaguemessages.
   * @param {leaguemessagesDeleteArgs} args - Arguments to delete one Leaguemessages.
   * @example
   * // Delete one Leaguemessages
   * const Leaguemessages = await prisma.leaguemessages.delete({
   *   where: {
   *     // ... filter to delete one Leaguemessages
   *   }
   * })
   * 
   */
  delete<T extends leaguemessagesDeleteArgs>(args: Prisma.SelectSubset<T, leaguemessagesDeleteArgs<ExtArgs>>): Prisma.Prisma__leaguemessagesClient<runtime.Types.Result.GetResult<Prisma.$leaguemessagesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Leaguemessages.
   * @param {leaguemessagesUpdateArgs} args - Arguments to update one Leaguemessages.
   * @example
   * // Update one Leaguemessages
   * const leaguemessages = await prisma.leaguemessages.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends leaguemessagesUpdateArgs>(args: Prisma.SelectSubset<T, leaguemessagesUpdateArgs<ExtArgs>>): Prisma.Prisma__leaguemessagesClient<runtime.Types.Result.GetResult<Prisma.$leaguemessagesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Leaguemessages.
   * @param {leaguemessagesDeleteManyArgs} args - Arguments to filter Leaguemessages to delete.
   * @example
   * // Delete a few Leaguemessages
   * const { count } = await prisma.leaguemessages.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends leaguemessagesDeleteManyArgs>(args?: Prisma.SelectSubset<T, leaguemessagesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Leaguemessages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {leaguemessagesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Leaguemessages
   * const leaguemessages = await prisma.leaguemessages.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends leaguemessagesUpdateManyArgs>(args: Prisma.SelectSubset<T, leaguemessagesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Leaguemessages and returns the data updated in the database.
   * @param {leaguemessagesUpdateManyAndReturnArgs} args - Arguments to update many Leaguemessages.
   * @example
   * // Update many Leaguemessages
   * const leaguemessages = await prisma.leaguemessages.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Leaguemessages and only return the `message_id`
   * const leaguemessagesWithMessage_idOnly = await prisma.leaguemessages.updateManyAndReturn({
   *   select: { message_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends leaguemessagesUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, leaguemessagesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$leaguemessagesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Leaguemessages.
   * @param {leaguemessagesUpsertArgs} args - Arguments to update or create a Leaguemessages.
   * @example
   * // Update or create a Leaguemessages
   * const leaguemessages = await prisma.leaguemessages.upsert({
   *   create: {
   *     // ... data to create a Leaguemessages
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Leaguemessages we want to update
   *   }
   * })
   */
  upsert<T extends leaguemessagesUpsertArgs>(args: Prisma.SelectSubset<T, leaguemessagesUpsertArgs<ExtArgs>>): Prisma.Prisma__leaguemessagesClient<runtime.Types.Result.GetResult<Prisma.$leaguemessagesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Leaguemessages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {leaguemessagesCountArgs} args - Arguments to filter Leaguemessages to count.
   * @example
   * // Count the number of Leaguemessages
   * const count = await prisma.leaguemessages.count({
   *   where: {
   *     // ... the filter for the Leaguemessages we want to count
   *   }
   * })
  **/
  count<T extends leaguemessagesCountArgs>(
    args?: Prisma.Subset<T, leaguemessagesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], LeaguemessagesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Leaguemessages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeaguemessagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends LeaguemessagesAggregateArgs>(args: Prisma.Subset<T, LeaguemessagesAggregateArgs>): Prisma.PrismaPromise<GetLeaguemessagesAggregateType<T>>

  /**
   * Group by Leaguemessages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {leaguemessagesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends leaguemessagesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: leaguemessagesGroupByArgs['orderBy'] }
      : { orderBy?: leaguemessagesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, leaguemessagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeaguemessagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the leaguemessages model
 */
readonly fields: leaguemessagesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for leaguemessages.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__leaguemessagesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  leagues<T extends Prisma.leaguesDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.leaguesDefaultArgs<ExtArgs>>): Prisma.Prisma__leaguesClient<runtime.Types.Result.GetResult<Prisma.$leaguesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  leaguemembers<T extends Prisma.leaguemembersDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.leaguemembersDefaultArgs<ExtArgs>>): Prisma.Prisma__leaguemembersClient<runtime.Types.Result.GetResult<Prisma.$leaguemembersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the leaguemessages model
 */
export interface leaguemessagesFieldRefs {
  readonly message_id: Prisma.FieldRef<"leaguemessages", 'String'>
  readonly content: Prisma.FieldRef<"leaguemessages", 'String'>
  readonly member_id: Prisma.FieldRef<"leaguemessages", 'Int'>
  readonly league_id: Prisma.FieldRef<"leaguemessages", 'Int'>
  readonly week: Prisma.FieldRef<"leaguemessages", 'Int'>
  readonly message_type: Prisma.FieldRef<"leaguemessages", 'MessageType'>
  readonly createdAt: Prisma.FieldRef<"leaguemessages", 'DateTime'>
  readonly status: Prisma.FieldRef<"leaguemessages", 'MessageStatus'>
}
    

// Custom InputTypes
/**
 * leaguemessages findUnique
 */
export type leaguemessagesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaguemessages
   */
  select?: Prisma.leaguemessagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaguemessages
   */
  omit?: Prisma.leaguemessagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.leaguemessagesInclude<ExtArgs> | null
  /**
   * Filter, which leaguemessages to fetch.
   */
  where: Prisma.leaguemessagesWhereUniqueInput
}

/**
 * leaguemessages findUniqueOrThrow
 */
export type leaguemessagesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaguemessages
   */
  select?: Prisma.leaguemessagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaguemessages
   */
  omit?: Prisma.leaguemessagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.leaguemessagesInclude<ExtArgs> | null
  /**
   * Filter, which leaguemessages to fetch.
   */
  where: Prisma.leaguemessagesWhereUniqueInput
}

/**
 * leaguemessages findFirst
 */
export type leaguemessagesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaguemessages
   */
  select?: Prisma.leaguemessagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaguemessages
   */
  omit?: Prisma.leaguemessagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.leaguemessagesInclude<ExtArgs> | null
  /**
   * Filter, which leaguemessages to fetch.
   */
  where?: Prisma.leaguemessagesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of leaguemessages to fetch.
   */
  orderBy?: Prisma.leaguemessagesOrderByWithRelationInput | Prisma.leaguemessagesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for leaguemessages.
   */
  cursor?: Prisma.leaguemessagesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` leaguemessages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` leaguemessages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of leaguemessages.
   */
  distinct?: Prisma.LeaguemessagesScalarFieldEnum | Prisma.LeaguemessagesScalarFieldEnum[]
}

/**
 * leaguemessages findFirstOrThrow
 */
export type leaguemessagesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaguemessages
   */
  select?: Prisma.leaguemessagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaguemessages
   */
  omit?: Prisma.leaguemessagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.leaguemessagesInclude<ExtArgs> | null
  /**
   * Filter, which leaguemessages to fetch.
   */
  where?: Prisma.leaguemessagesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of leaguemessages to fetch.
   */
  orderBy?: Prisma.leaguemessagesOrderByWithRelationInput | Prisma.leaguemessagesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for leaguemessages.
   */
  cursor?: Prisma.leaguemessagesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` leaguemessages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` leaguemessages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of leaguemessages.
   */
  distinct?: Prisma.LeaguemessagesScalarFieldEnum | Prisma.LeaguemessagesScalarFieldEnum[]
}

/**
 * leaguemessages findMany
 */
export type leaguemessagesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaguemessages
   */
  select?: Prisma.leaguemessagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaguemessages
   */
  omit?: Prisma.leaguemessagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.leaguemessagesInclude<ExtArgs> | null
  /**
   * Filter, which leaguemessages to fetch.
   */
  where?: Prisma.leaguemessagesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of leaguemessages to fetch.
   */
  orderBy?: Prisma.leaguemessagesOrderByWithRelationInput | Prisma.leaguemessagesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing leaguemessages.
   */
  cursor?: Prisma.leaguemessagesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` leaguemessages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` leaguemessages.
   */
  skip?: number
  distinct?: Prisma.LeaguemessagesScalarFieldEnum | Prisma.LeaguemessagesScalarFieldEnum[]
}

/**
 * leaguemessages create
 */
export type leaguemessagesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaguemessages
   */
  select?: Prisma.leaguemessagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaguemessages
   */
  omit?: Prisma.leaguemessagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.leaguemessagesInclude<ExtArgs> | null
  /**
   * The data needed to create a leaguemessages.
   */
  data: Prisma.XOR<Prisma.leaguemessagesCreateInput, Prisma.leaguemessagesUncheckedCreateInput>
}

/**
 * leaguemessages createMany
 */
export type leaguemessagesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many leaguemessages.
   */
  data: Prisma.leaguemessagesCreateManyInput | Prisma.leaguemessagesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * leaguemessages createManyAndReturn
 */
export type leaguemessagesCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaguemessages
   */
  select?: Prisma.leaguemessagesSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the leaguemessages
   */
  omit?: Prisma.leaguemessagesOmit<ExtArgs> | null
  /**
   * The data used to create many leaguemessages.
   */
  data: Prisma.leaguemessagesCreateManyInput | Prisma.leaguemessagesCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.leaguemessagesIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * leaguemessages update
 */
export type leaguemessagesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaguemessages
   */
  select?: Prisma.leaguemessagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaguemessages
   */
  omit?: Prisma.leaguemessagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.leaguemessagesInclude<ExtArgs> | null
  /**
   * The data needed to update a leaguemessages.
   */
  data: Prisma.XOR<Prisma.leaguemessagesUpdateInput, Prisma.leaguemessagesUncheckedUpdateInput>
  /**
   * Choose, which leaguemessages to update.
   */
  where: Prisma.leaguemessagesWhereUniqueInput
}

/**
 * leaguemessages updateMany
 */
export type leaguemessagesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update leaguemessages.
   */
  data: Prisma.XOR<Prisma.leaguemessagesUpdateManyMutationInput, Prisma.leaguemessagesUncheckedUpdateManyInput>
  /**
   * Filter which leaguemessages to update
   */
  where?: Prisma.leaguemessagesWhereInput
  /**
   * Limit how many leaguemessages to update.
   */
  limit?: number
}

/**
 * leaguemessages updateManyAndReturn
 */
export type leaguemessagesUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaguemessages
   */
  select?: Prisma.leaguemessagesSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the leaguemessages
   */
  omit?: Prisma.leaguemessagesOmit<ExtArgs> | null
  /**
   * The data used to update leaguemessages.
   */
  data: Prisma.XOR<Prisma.leaguemessagesUpdateManyMutationInput, Prisma.leaguemessagesUncheckedUpdateManyInput>
  /**
   * Filter which leaguemessages to update
   */
  where?: Prisma.leaguemessagesWhereInput
  /**
   * Limit how many leaguemessages to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.leaguemessagesIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * leaguemessages upsert
 */
export type leaguemessagesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaguemessages
   */
  select?: Prisma.leaguemessagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaguemessages
   */
  omit?: Prisma.leaguemessagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.leaguemessagesInclude<ExtArgs> | null
  /**
   * The filter to search for the leaguemessages to update in case it exists.
   */
  where: Prisma.leaguemessagesWhereUniqueInput
  /**
   * In case the leaguemessages found by the `where` argument doesn't exist, create a new leaguemessages with this data.
   */
  create: Prisma.XOR<Prisma.leaguemessagesCreateInput, Prisma.leaguemessagesUncheckedCreateInput>
  /**
   * In case the leaguemessages was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.leaguemessagesUpdateInput, Prisma.leaguemessagesUncheckedUpdateInput>
}

/**
 * leaguemessages delete
 */
export type leaguemessagesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaguemessages
   */
  select?: Prisma.leaguemessagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaguemessages
   */
  omit?: Prisma.leaguemessagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.leaguemessagesInclude<ExtArgs> | null
  /**
   * Filter which leaguemessages to delete.
   */
  where: Prisma.leaguemessagesWhereUniqueInput
}

/**
 * leaguemessages deleteMany
 */
export type leaguemessagesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which leaguemessages to delete
   */
  where?: Prisma.leaguemessagesWhereInput
  /**
   * Limit how many leaguemessages to delete.
   */
  limit?: number
}

/**
 * leaguemessages without action
 */
export type leaguemessagesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaguemessages
   */
  select?: Prisma.leaguemessagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaguemessages
   */
  omit?: Prisma.leaguemessagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.leaguemessagesInclude<ExtArgs> | null
}
