
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `picks` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model picks
 * 
 */
export type picksModel = runtime.Types.Result.DefaultSelection<Prisma.$picksPayload>

export type AggregatePicks = {
  _count: PicksCountAggregateOutputType | null
  _avg: PicksAvgAggregateOutputType | null
  _sum: PicksSumAggregateOutputType | null
  _min: PicksMinAggregateOutputType | null
  _max: PicksMaxAggregateOutputType | null
}

export type PicksAvgAggregateOutputType = {
  pickid: number | null
  uid: number | null
  season: number | null
  week: number | null
  gid: number | null
  winner: number | null
  loser: number | null
  score: number | null
  correct: number | null
  done: number | null
  member_id: number | null
}

export type PicksSumAggregateOutputType = {
  pickid: number | null
  uid: number | null
  season: number | null
  week: number | null
  gid: number | null
  winner: number | null
  loser: number | null
  score: number | null
  correct: number | null
  done: number | null
  member_id: number | null
}

export type PicksMinAggregateOutputType = {
  pickid: number | null
  uid: number | null
  season: number | null
  week: number | null
  gid: number | null
  winner: number | null
  loser: number | null
  score: number | null
  ts: Date | null
  correct: number | null
  done: number | null
  is_random: boolean | null
  member_id: number | null
}

export type PicksMaxAggregateOutputType = {
  pickid: number | null
  uid: number | null
  season: number | null
  week: number | null
  gid: number | null
  winner: number | null
  loser: number | null
  score: number | null
  ts: Date | null
  correct: number | null
  done: number | null
  is_random: boolean | null
  member_id: number | null
}

export type PicksCountAggregateOutputType = {
  pickid: number
  uid: number
  season: number
  week: number
  gid: number
  winner: number
  loser: number
  score: number
  ts: number
  correct: number
  done: number
  is_random: number
  member_id: number
  _all: number
}


export type PicksAvgAggregateInputType = {
  pickid?: true
  uid?: true
  season?: true
  week?: true
  gid?: true
  winner?: true
  loser?: true
  score?: true
  correct?: true
  done?: true
  member_id?: true
}

export type PicksSumAggregateInputType = {
  pickid?: true
  uid?: true
  season?: true
  week?: true
  gid?: true
  winner?: true
  loser?: true
  score?: true
  correct?: true
  done?: true
  member_id?: true
}

export type PicksMinAggregateInputType = {
  pickid?: true
  uid?: true
  season?: true
  week?: true
  gid?: true
  winner?: true
  loser?: true
  score?: true
  ts?: true
  correct?: true
  done?: true
  is_random?: true
  member_id?: true
}

export type PicksMaxAggregateInputType = {
  pickid?: true
  uid?: true
  season?: true
  week?: true
  gid?: true
  winner?: true
  loser?: true
  score?: true
  ts?: true
  correct?: true
  done?: true
  is_random?: true
  member_id?: true
}

export type PicksCountAggregateInputType = {
  pickid?: true
  uid?: true
  season?: true
  week?: true
  gid?: true
  winner?: true
  loser?: true
  score?: true
  ts?: true
  correct?: true
  done?: true
  is_random?: true
  member_id?: true
  _all?: true
}

export type PicksAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which picks to aggregate.
   */
  where?: Prisma.picksWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of picks to fetch.
   */
  orderBy?: Prisma.picksOrderByWithRelationInput | Prisma.picksOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.picksWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` picks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` picks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned picks
  **/
  _count?: true | PicksCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PicksAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PicksSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PicksMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PicksMaxAggregateInputType
}

export type GetPicksAggregateType<T extends PicksAggregateArgs> = {
      [P in keyof T & keyof AggregatePicks]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePicks[P]>
    : Prisma.GetScalarType<T[P], AggregatePicks[P]>
}




export type picksGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.picksWhereInput
  orderBy?: Prisma.picksOrderByWithAggregationInput | Prisma.picksOrderByWithAggregationInput[]
  by: Prisma.PicksScalarFieldEnum[] | Prisma.PicksScalarFieldEnum
  having?: Prisma.picksScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PicksCountAggregateInputType | true
  _avg?: PicksAvgAggregateInputType
  _sum?: PicksSumAggregateInputType
  _min?: PicksMinAggregateInputType
  _max?: PicksMaxAggregateInputType
}

export type PicksGroupByOutputType = {
  pickid: number
  uid: number
  season: number
  week: number
  gid: number
  winner: number | null
  loser: number | null
  score: number | null
  ts: Date
  correct: number | null
  done: number | null
  is_random: boolean | null
  member_id: number | null
  _count: PicksCountAggregateOutputType | null
  _avg: PicksAvgAggregateOutputType | null
  _sum: PicksSumAggregateOutputType | null
  _min: PicksMinAggregateOutputType | null
  _max: PicksMaxAggregateOutputType | null
}

type GetPicksGroupByPayload<T extends picksGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PicksGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PicksGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PicksGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PicksGroupByOutputType[P]>
      }
    >
  > 



export type picksWhereInput = {
  AND?: Prisma.picksWhereInput | Prisma.picksWhereInput[]
  OR?: Prisma.picksWhereInput[]
  NOT?: Prisma.picksWhereInput | Prisma.picksWhereInput[]
  pickid?: Prisma.IntFilter<"picks"> | number
  uid?: Prisma.IntFilter<"picks"> | number
  season?: Prisma.IntFilter<"picks"> | number
  week?: Prisma.IntFilter<"picks"> | number
  gid?: Prisma.IntFilter<"picks"> | number
  winner?: Prisma.IntNullableFilter<"picks"> | number | null
  loser?: Prisma.IntNullableFilter<"picks"> | number | null
  score?: Prisma.IntNullableFilter<"picks"> | number | null
  ts?: Prisma.DateTimeFilter<"picks"> | Date | string
  correct?: Prisma.IntNullableFilter<"picks"> | number | null
  done?: Prisma.IntNullableFilter<"picks"> | number | null
  is_random?: Prisma.BoolNullableFilter<"picks"> | boolean | null
  member_id?: Prisma.IntNullableFilter<"picks"> | number | null
  games?: Prisma.XOR<Prisma.GamesScalarRelationFilter, Prisma.gamesWhereInput>
  people?: Prisma.XOR<Prisma.PeopleScalarRelationFilter, Prisma.peopleWhereInput>
  leaguemembers?: Prisma.XOR<Prisma.LeaguemembersNullableScalarRelationFilter, Prisma.leaguemembersWhereInput> | null
  teams?: Prisma.XOR<Prisma.TeamsNullableScalarRelationFilter, Prisma.teamsWhereInput> | null
}

export type picksOrderByWithRelationInput = {
  pickid?: Prisma.SortOrder
  uid?: Prisma.SortOrder
  season?: Prisma.SortOrder
  week?: Prisma.SortOrder
  gid?: Prisma.SortOrder
  winner?: Prisma.SortOrderInput | Prisma.SortOrder
  loser?: Prisma.SortOrderInput | Prisma.SortOrder
  score?: Prisma.SortOrderInput | Prisma.SortOrder
  ts?: Prisma.SortOrder
  correct?: Prisma.SortOrderInput | Prisma.SortOrder
  done?: Prisma.SortOrderInput | Prisma.SortOrder
  is_random?: Prisma.SortOrderInput | Prisma.SortOrder
  member_id?: Prisma.SortOrderInput | Prisma.SortOrder
  games?: Prisma.gamesOrderByWithRelationInput
  people?: Prisma.peopleOrderByWithRelationInput
  leaguemembers?: Prisma.leaguemembersOrderByWithRelationInput
  teams?: Prisma.teamsOrderByWithRelationInput
}

export type picksWhereUniqueInput = Prisma.AtLeast<{
  pickid?: number
  AND?: Prisma.picksWhereInput | Prisma.picksWhereInput[]
  OR?: Prisma.picksWhereInput[]
  NOT?: Prisma.picksWhereInput | Prisma.picksWhereInput[]
  uid?: Prisma.IntFilter<"picks"> | number
  season?: Prisma.IntFilter<"picks"> | number
  week?: Prisma.IntFilter<"picks"> | number
  gid?: Prisma.IntFilter<"picks"> | number
  winner?: Prisma.IntNullableFilter<"picks"> | number | null
  loser?: Prisma.IntNullableFilter<"picks"> | number | null
  score?: Prisma.IntNullableFilter<"picks"> | number | null
  ts?: Prisma.DateTimeFilter<"picks"> | Date | string
  correct?: Prisma.IntNullableFilter<"picks"> | number | null
  done?: Prisma.IntNullableFilter<"picks"> | number | null
  is_random?: Prisma.BoolNullableFilter<"picks"> | boolean | null
  member_id?: Prisma.IntNullableFilter<"picks"> | number | null
  games?: Prisma.XOR<Prisma.GamesScalarRelationFilter, Prisma.gamesWhereInput>
  people?: Prisma.XOR<Prisma.PeopleScalarRelationFilter, Prisma.peopleWhereInput>
  leaguemembers?: Prisma.XOR<Prisma.LeaguemembersNullableScalarRelationFilter, Prisma.leaguemembersWhereInput> | null
  teams?: Prisma.XOR<Prisma.TeamsNullableScalarRelationFilter, Prisma.teamsWhereInput> | null
}, "pickid">

export type picksOrderByWithAggregationInput = {
  pickid?: Prisma.SortOrder
  uid?: Prisma.SortOrder
  season?: Prisma.SortOrder
  week?: Prisma.SortOrder
  gid?: Prisma.SortOrder
  winner?: Prisma.SortOrderInput | Prisma.SortOrder
  loser?: Prisma.SortOrderInput | Prisma.SortOrder
  score?: Prisma.SortOrderInput | Prisma.SortOrder
  ts?: Prisma.SortOrder
  correct?: Prisma.SortOrderInput | Prisma.SortOrder
  done?: Prisma.SortOrderInput | Prisma.SortOrder
  is_random?: Prisma.SortOrderInput | Prisma.SortOrder
  member_id?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.picksCountOrderByAggregateInput
  _avg?: Prisma.picksAvgOrderByAggregateInput
  _max?: Prisma.picksMaxOrderByAggregateInput
  _min?: Prisma.picksMinOrderByAggregateInput
  _sum?: Prisma.picksSumOrderByAggregateInput
}

export type picksScalarWhereWithAggregatesInput = {
  AND?: Prisma.picksScalarWhereWithAggregatesInput | Prisma.picksScalarWhereWithAggregatesInput[]
  OR?: Prisma.picksScalarWhereWithAggregatesInput[]
  NOT?: Prisma.picksScalarWhereWithAggregatesInput | Prisma.picksScalarWhereWithAggregatesInput[]
  pickid?: Prisma.IntWithAggregatesFilter<"picks"> | number
  uid?: Prisma.IntWithAggregatesFilter<"picks"> | number
  season?: Prisma.IntWithAggregatesFilter<"picks"> | number
  week?: Prisma.IntWithAggregatesFilter<"picks"> | number
  gid?: Prisma.IntWithAggregatesFilter<"picks"> | number
  winner?: Prisma.IntNullableWithAggregatesFilter<"picks"> | number | null
  loser?: Prisma.IntNullableWithAggregatesFilter<"picks"> | number | null
  score?: Prisma.IntNullableWithAggregatesFilter<"picks"> | number | null
  ts?: Prisma.DateTimeWithAggregatesFilter<"picks"> | Date | string
  correct?: Prisma.IntNullableWithAggregatesFilter<"picks"> | number | null
  done?: Prisma.IntNullableWithAggregatesFilter<"picks"> | number | null
  is_random?: Prisma.BoolNullableWithAggregatesFilter<"picks"> | boolean | null
  member_id?: Prisma.IntNullableWithAggregatesFilter<"picks"> | number | null
}

export type picksCreateInput = {
  season: number
  week: number
  loser?: number | null
  score?: number | null
  ts?: Date | string
  correct?: number | null
  done?: number | null
  is_random?: boolean | null
  games: Prisma.gamesCreateNestedOneWithoutPicksInput
  people: Prisma.peopleCreateNestedOneWithoutPicksInput
  leaguemembers?: Prisma.leaguemembersCreateNestedOneWithoutPicksInput
  teams?: Prisma.teamsCreateNestedOneWithoutPicksInput
}

export type picksUncheckedCreateInput = {
  pickid?: number
  uid: number
  season: number
  week: number
  gid: number
  winner?: number | null
  loser?: number | null
  score?: number | null
  ts?: Date | string
  correct?: number | null
  done?: number | null
  is_random?: boolean | null
  member_id?: number | null
}

export type picksUpdateInput = {
  season?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  loser?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  correct?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  done?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  is_random?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  games?: Prisma.gamesUpdateOneRequiredWithoutPicksNestedInput
  people?: Prisma.peopleUpdateOneRequiredWithoutPicksNestedInput
  leaguemembers?: Prisma.leaguemembersUpdateOneWithoutPicksNestedInput
  teams?: Prisma.teamsUpdateOneWithoutPicksNestedInput
}

export type picksUncheckedUpdateInput = {
  pickid?: Prisma.IntFieldUpdateOperationsInput | number
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  season?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  gid?: Prisma.IntFieldUpdateOperationsInput | number
  winner?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  loser?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  correct?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  done?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  is_random?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  member_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type picksCreateManyInput = {
  pickid?: number
  uid: number
  season: number
  week: number
  gid: number
  winner?: number | null
  loser?: number | null
  score?: number | null
  ts?: Date | string
  correct?: number | null
  done?: number | null
  is_random?: boolean | null
  member_id?: number | null
}

export type picksUpdateManyMutationInput = {
  season?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  loser?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  correct?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  done?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  is_random?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type picksUncheckedUpdateManyInput = {
  pickid?: Prisma.IntFieldUpdateOperationsInput | number
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  season?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  gid?: Prisma.IntFieldUpdateOperationsInput | number
  winner?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  loser?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  correct?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  done?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  is_random?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  member_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type PicksListRelationFilter = {
  every?: Prisma.picksWhereInput
  some?: Prisma.picksWhereInput
  none?: Prisma.picksWhereInput
}

export type picksOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type picksCountOrderByAggregateInput = {
  pickid?: Prisma.SortOrder
  uid?: Prisma.SortOrder
  season?: Prisma.SortOrder
  week?: Prisma.SortOrder
  gid?: Prisma.SortOrder
  winner?: Prisma.SortOrder
  loser?: Prisma.SortOrder
  score?: Prisma.SortOrder
  ts?: Prisma.SortOrder
  correct?: Prisma.SortOrder
  done?: Prisma.SortOrder
  is_random?: Prisma.SortOrder
  member_id?: Prisma.SortOrder
}

export type picksAvgOrderByAggregateInput = {
  pickid?: Prisma.SortOrder
  uid?: Prisma.SortOrder
  season?: Prisma.SortOrder
  week?: Prisma.SortOrder
  gid?: Prisma.SortOrder
  winner?: Prisma.SortOrder
  loser?: Prisma.SortOrder
  score?: Prisma.SortOrder
  correct?: Prisma.SortOrder
  done?: Prisma.SortOrder
  member_id?: Prisma.SortOrder
}

export type picksMaxOrderByAggregateInput = {
  pickid?: Prisma.SortOrder
  uid?: Prisma.SortOrder
  season?: Prisma.SortOrder
  week?: Prisma.SortOrder
  gid?: Prisma.SortOrder
  winner?: Prisma.SortOrder
  loser?: Prisma.SortOrder
  score?: Prisma.SortOrder
  ts?: Prisma.SortOrder
  correct?: Prisma.SortOrder
  done?: Prisma.SortOrder
  is_random?: Prisma.SortOrder
  member_id?: Prisma.SortOrder
}

export type picksMinOrderByAggregateInput = {
  pickid?: Prisma.SortOrder
  uid?: Prisma.SortOrder
  season?: Prisma.SortOrder
  week?: Prisma.SortOrder
  gid?: Prisma.SortOrder
  winner?: Prisma.SortOrder
  loser?: Prisma.SortOrder
  score?: Prisma.SortOrder
  ts?: Prisma.SortOrder
  correct?: Prisma.SortOrder
  done?: Prisma.SortOrder
  is_random?: Prisma.SortOrder
  member_id?: Prisma.SortOrder
}

export type picksSumOrderByAggregateInput = {
  pickid?: Prisma.SortOrder
  uid?: Prisma.SortOrder
  season?: Prisma.SortOrder
  week?: Prisma.SortOrder
  gid?: Prisma.SortOrder
  winner?: Prisma.SortOrder
  loser?: Prisma.SortOrder
  score?: Prisma.SortOrder
  correct?: Prisma.SortOrder
  done?: Prisma.SortOrder
  member_id?: Prisma.SortOrder
}

export type picksCreateNestedManyWithoutGamesInput = {
  create?: Prisma.XOR<Prisma.picksCreateWithoutGamesInput, Prisma.picksUncheckedCreateWithoutGamesInput> | Prisma.picksCreateWithoutGamesInput[] | Prisma.picksUncheckedCreateWithoutGamesInput[]
  connectOrCreate?: Prisma.picksCreateOrConnectWithoutGamesInput | Prisma.picksCreateOrConnectWithoutGamesInput[]
  createMany?: Prisma.picksCreateManyGamesInputEnvelope
  connect?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
}

export type picksUncheckedCreateNestedManyWithoutGamesInput = {
  create?: Prisma.XOR<Prisma.picksCreateWithoutGamesInput, Prisma.picksUncheckedCreateWithoutGamesInput> | Prisma.picksCreateWithoutGamesInput[] | Prisma.picksUncheckedCreateWithoutGamesInput[]
  connectOrCreate?: Prisma.picksCreateOrConnectWithoutGamesInput | Prisma.picksCreateOrConnectWithoutGamesInput[]
  createMany?: Prisma.picksCreateManyGamesInputEnvelope
  connect?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
}

export type picksUpdateManyWithoutGamesNestedInput = {
  create?: Prisma.XOR<Prisma.picksCreateWithoutGamesInput, Prisma.picksUncheckedCreateWithoutGamesInput> | Prisma.picksCreateWithoutGamesInput[] | Prisma.picksUncheckedCreateWithoutGamesInput[]
  connectOrCreate?: Prisma.picksCreateOrConnectWithoutGamesInput | Prisma.picksCreateOrConnectWithoutGamesInput[]
  upsert?: Prisma.picksUpsertWithWhereUniqueWithoutGamesInput | Prisma.picksUpsertWithWhereUniqueWithoutGamesInput[]
  createMany?: Prisma.picksCreateManyGamesInputEnvelope
  set?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  disconnect?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  delete?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  connect?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  update?: Prisma.picksUpdateWithWhereUniqueWithoutGamesInput | Prisma.picksUpdateWithWhereUniqueWithoutGamesInput[]
  updateMany?: Prisma.picksUpdateManyWithWhereWithoutGamesInput | Prisma.picksUpdateManyWithWhereWithoutGamesInput[]
  deleteMany?: Prisma.picksScalarWhereInput | Prisma.picksScalarWhereInput[]
}

export type picksUncheckedUpdateManyWithoutGamesNestedInput = {
  create?: Prisma.XOR<Prisma.picksCreateWithoutGamesInput, Prisma.picksUncheckedCreateWithoutGamesInput> | Prisma.picksCreateWithoutGamesInput[] | Prisma.picksUncheckedCreateWithoutGamesInput[]
  connectOrCreate?: Prisma.picksCreateOrConnectWithoutGamesInput | Prisma.picksCreateOrConnectWithoutGamesInput[]
  upsert?: Prisma.picksUpsertWithWhereUniqueWithoutGamesInput | Prisma.picksUpsertWithWhereUniqueWithoutGamesInput[]
  createMany?: Prisma.picksCreateManyGamesInputEnvelope
  set?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  disconnect?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  delete?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  connect?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  update?: Prisma.picksUpdateWithWhereUniqueWithoutGamesInput | Prisma.picksUpdateWithWhereUniqueWithoutGamesInput[]
  updateMany?: Prisma.picksUpdateManyWithWhereWithoutGamesInput | Prisma.picksUpdateManyWithWhereWithoutGamesInput[]
  deleteMany?: Prisma.picksScalarWhereInput | Prisma.picksScalarWhereInput[]
}

export type picksCreateNestedManyWithoutLeaguemembersInput = {
  create?: Prisma.XOR<Prisma.picksCreateWithoutLeaguemembersInput, Prisma.picksUncheckedCreateWithoutLeaguemembersInput> | Prisma.picksCreateWithoutLeaguemembersInput[] | Prisma.picksUncheckedCreateWithoutLeaguemembersInput[]
  connectOrCreate?: Prisma.picksCreateOrConnectWithoutLeaguemembersInput | Prisma.picksCreateOrConnectWithoutLeaguemembersInput[]
  createMany?: Prisma.picksCreateManyLeaguemembersInputEnvelope
  connect?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
}

export type picksUncheckedCreateNestedManyWithoutLeaguemembersInput = {
  create?: Prisma.XOR<Prisma.picksCreateWithoutLeaguemembersInput, Prisma.picksUncheckedCreateWithoutLeaguemembersInput> | Prisma.picksCreateWithoutLeaguemembersInput[] | Prisma.picksUncheckedCreateWithoutLeaguemembersInput[]
  connectOrCreate?: Prisma.picksCreateOrConnectWithoutLeaguemembersInput | Prisma.picksCreateOrConnectWithoutLeaguemembersInput[]
  createMany?: Prisma.picksCreateManyLeaguemembersInputEnvelope
  connect?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
}

export type picksUpdateManyWithoutLeaguemembersNestedInput = {
  create?: Prisma.XOR<Prisma.picksCreateWithoutLeaguemembersInput, Prisma.picksUncheckedCreateWithoutLeaguemembersInput> | Prisma.picksCreateWithoutLeaguemembersInput[] | Prisma.picksUncheckedCreateWithoutLeaguemembersInput[]
  connectOrCreate?: Prisma.picksCreateOrConnectWithoutLeaguemembersInput | Prisma.picksCreateOrConnectWithoutLeaguemembersInput[]
  upsert?: Prisma.picksUpsertWithWhereUniqueWithoutLeaguemembersInput | Prisma.picksUpsertWithWhereUniqueWithoutLeaguemembersInput[]
  createMany?: Prisma.picksCreateManyLeaguemembersInputEnvelope
  set?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  disconnect?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  delete?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  connect?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  update?: Prisma.picksUpdateWithWhereUniqueWithoutLeaguemembersInput | Prisma.picksUpdateWithWhereUniqueWithoutLeaguemembersInput[]
  updateMany?: Prisma.picksUpdateManyWithWhereWithoutLeaguemembersInput | Prisma.picksUpdateManyWithWhereWithoutLeaguemembersInput[]
  deleteMany?: Prisma.picksScalarWhereInput | Prisma.picksScalarWhereInput[]
}

export type picksUncheckedUpdateManyWithoutLeaguemembersNestedInput = {
  create?: Prisma.XOR<Prisma.picksCreateWithoutLeaguemembersInput, Prisma.picksUncheckedCreateWithoutLeaguemembersInput> | Prisma.picksCreateWithoutLeaguemembersInput[] | Prisma.picksUncheckedCreateWithoutLeaguemembersInput[]
  connectOrCreate?: Prisma.picksCreateOrConnectWithoutLeaguemembersInput | Prisma.picksCreateOrConnectWithoutLeaguemembersInput[]
  upsert?: Prisma.picksUpsertWithWhereUniqueWithoutLeaguemembersInput | Prisma.picksUpsertWithWhereUniqueWithoutLeaguemembersInput[]
  createMany?: Prisma.picksCreateManyLeaguemembersInputEnvelope
  set?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  disconnect?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  delete?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  connect?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  update?: Prisma.picksUpdateWithWhereUniqueWithoutLeaguemembersInput | Prisma.picksUpdateWithWhereUniqueWithoutLeaguemembersInput[]
  updateMany?: Prisma.picksUpdateManyWithWhereWithoutLeaguemembersInput | Prisma.picksUpdateManyWithWhereWithoutLeaguemembersInput[]
  deleteMany?: Prisma.picksScalarWhereInput | Prisma.picksScalarWhereInput[]
}

export type picksCreateNestedManyWithoutPeopleInput = {
  create?: Prisma.XOR<Prisma.picksCreateWithoutPeopleInput, Prisma.picksUncheckedCreateWithoutPeopleInput> | Prisma.picksCreateWithoutPeopleInput[] | Prisma.picksUncheckedCreateWithoutPeopleInput[]
  connectOrCreate?: Prisma.picksCreateOrConnectWithoutPeopleInput | Prisma.picksCreateOrConnectWithoutPeopleInput[]
  createMany?: Prisma.picksCreateManyPeopleInputEnvelope
  connect?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
}

export type picksUncheckedCreateNestedManyWithoutPeopleInput = {
  create?: Prisma.XOR<Prisma.picksCreateWithoutPeopleInput, Prisma.picksUncheckedCreateWithoutPeopleInput> | Prisma.picksCreateWithoutPeopleInput[] | Prisma.picksUncheckedCreateWithoutPeopleInput[]
  connectOrCreate?: Prisma.picksCreateOrConnectWithoutPeopleInput | Prisma.picksCreateOrConnectWithoutPeopleInput[]
  createMany?: Prisma.picksCreateManyPeopleInputEnvelope
  connect?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
}

export type picksUpdateManyWithoutPeopleNestedInput = {
  create?: Prisma.XOR<Prisma.picksCreateWithoutPeopleInput, Prisma.picksUncheckedCreateWithoutPeopleInput> | Prisma.picksCreateWithoutPeopleInput[] | Prisma.picksUncheckedCreateWithoutPeopleInput[]
  connectOrCreate?: Prisma.picksCreateOrConnectWithoutPeopleInput | Prisma.picksCreateOrConnectWithoutPeopleInput[]
  upsert?: Prisma.picksUpsertWithWhereUniqueWithoutPeopleInput | Prisma.picksUpsertWithWhereUniqueWithoutPeopleInput[]
  createMany?: Prisma.picksCreateManyPeopleInputEnvelope
  set?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  disconnect?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  delete?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  connect?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  update?: Prisma.picksUpdateWithWhereUniqueWithoutPeopleInput | Prisma.picksUpdateWithWhereUniqueWithoutPeopleInput[]
  updateMany?: Prisma.picksUpdateManyWithWhereWithoutPeopleInput | Prisma.picksUpdateManyWithWhereWithoutPeopleInput[]
  deleteMany?: Prisma.picksScalarWhereInput | Prisma.picksScalarWhereInput[]
}

export type picksUncheckedUpdateManyWithoutPeopleNestedInput = {
  create?: Prisma.XOR<Prisma.picksCreateWithoutPeopleInput, Prisma.picksUncheckedCreateWithoutPeopleInput> | Prisma.picksCreateWithoutPeopleInput[] | Prisma.picksUncheckedCreateWithoutPeopleInput[]
  connectOrCreate?: Prisma.picksCreateOrConnectWithoutPeopleInput | Prisma.picksCreateOrConnectWithoutPeopleInput[]
  upsert?: Prisma.picksUpsertWithWhereUniqueWithoutPeopleInput | Prisma.picksUpsertWithWhereUniqueWithoutPeopleInput[]
  createMany?: Prisma.picksCreateManyPeopleInputEnvelope
  set?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  disconnect?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  delete?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  connect?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  update?: Prisma.picksUpdateWithWhereUniqueWithoutPeopleInput | Prisma.picksUpdateWithWhereUniqueWithoutPeopleInput[]
  updateMany?: Prisma.picksUpdateManyWithWhereWithoutPeopleInput | Prisma.picksUpdateManyWithWhereWithoutPeopleInput[]
  deleteMany?: Prisma.picksScalarWhereInput | Prisma.picksScalarWhereInput[]
}

export type picksCreateNestedManyWithoutTeamsInput = {
  create?: Prisma.XOR<Prisma.picksCreateWithoutTeamsInput, Prisma.picksUncheckedCreateWithoutTeamsInput> | Prisma.picksCreateWithoutTeamsInput[] | Prisma.picksUncheckedCreateWithoutTeamsInput[]
  connectOrCreate?: Prisma.picksCreateOrConnectWithoutTeamsInput | Prisma.picksCreateOrConnectWithoutTeamsInput[]
  createMany?: Prisma.picksCreateManyTeamsInputEnvelope
  connect?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
}

export type picksUncheckedCreateNestedManyWithoutTeamsInput = {
  create?: Prisma.XOR<Prisma.picksCreateWithoutTeamsInput, Prisma.picksUncheckedCreateWithoutTeamsInput> | Prisma.picksCreateWithoutTeamsInput[] | Prisma.picksUncheckedCreateWithoutTeamsInput[]
  connectOrCreate?: Prisma.picksCreateOrConnectWithoutTeamsInput | Prisma.picksCreateOrConnectWithoutTeamsInput[]
  createMany?: Prisma.picksCreateManyTeamsInputEnvelope
  connect?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
}

export type picksUpdateManyWithoutTeamsNestedInput = {
  create?: Prisma.XOR<Prisma.picksCreateWithoutTeamsInput, Prisma.picksUncheckedCreateWithoutTeamsInput> | Prisma.picksCreateWithoutTeamsInput[] | Prisma.picksUncheckedCreateWithoutTeamsInput[]
  connectOrCreate?: Prisma.picksCreateOrConnectWithoutTeamsInput | Prisma.picksCreateOrConnectWithoutTeamsInput[]
  upsert?: Prisma.picksUpsertWithWhereUniqueWithoutTeamsInput | Prisma.picksUpsertWithWhereUniqueWithoutTeamsInput[]
  createMany?: Prisma.picksCreateManyTeamsInputEnvelope
  set?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  disconnect?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  delete?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  connect?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  update?: Prisma.picksUpdateWithWhereUniqueWithoutTeamsInput | Prisma.picksUpdateWithWhereUniqueWithoutTeamsInput[]
  updateMany?: Prisma.picksUpdateManyWithWhereWithoutTeamsInput | Prisma.picksUpdateManyWithWhereWithoutTeamsInput[]
  deleteMany?: Prisma.picksScalarWhereInput | Prisma.picksScalarWhereInput[]
}

export type picksUncheckedUpdateManyWithoutTeamsNestedInput = {
  create?: Prisma.XOR<Prisma.picksCreateWithoutTeamsInput, Prisma.picksUncheckedCreateWithoutTeamsInput> | Prisma.picksCreateWithoutTeamsInput[] | Prisma.picksUncheckedCreateWithoutTeamsInput[]
  connectOrCreate?: Prisma.picksCreateOrConnectWithoutTeamsInput | Prisma.picksCreateOrConnectWithoutTeamsInput[]
  upsert?: Prisma.picksUpsertWithWhereUniqueWithoutTeamsInput | Prisma.picksUpsertWithWhereUniqueWithoutTeamsInput[]
  createMany?: Prisma.picksCreateManyTeamsInputEnvelope
  set?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  disconnect?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  delete?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  connect?: Prisma.picksWhereUniqueInput | Prisma.picksWhereUniqueInput[]
  update?: Prisma.picksUpdateWithWhereUniqueWithoutTeamsInput | Prisma.picksUpdateWithWhereUniqueWithoutTeamsInput[]
  updateMany?: Prisma.picksUpdateManyWithWhereWithoutTeamsInput | Prisma.picksUpdateManyWithWhereWithoutTeamsInput[]
  deleteMany?: Prisma.picksScalarWhereInput | Prisma.picksScalarWhereInput[]
}

export type picksCreateWithoutGamesInput = {
  season: number
  week: number
  loser?: number | null
  score?: number | null
  ts?: Date | string
  correct?: number | null
  done?: number | null
  is_random?: boolean | null
  people: Prisma.peopleCreateNestedOneWithoutPicksInput
  leaguemembers?: Prisma.leaguemembersCreateNestedOneWithoutPicksInput
  teams?: Prisma.teamsCreateNestedOneWithoutPicksInput
}

export type picksUncheckedCreateWithoutGamesInput = {
  pickid?: number
  uid: number
  season: number
  week: number
  winner?: number | null
  loser?: number | null
  score?: number | null
  ts?: Date | string
  correct?: number | null
  done?: number | null
  is_random?: boolean | null
  member_id?: number | null
}

export type picksCreateOrConnectWithoutGamesInput = {
  where: Prisma.picksWhereUniqueInput
  create: Prisma.XOR<Prisma.picksCreateWithoutGamesInput, Prisma.picksUncheckedCreateWithoutGamesInput>
}

export type picksCreateManyGamesInputEnvelope = {
  data: Prisma.picksCreateManyGamesInput | Prisma.picksCreateManyGamesInput[]
  skipDuplicates?: boolean
}

export type picksUpsertWithWhereUniqueWithoutGamesInput = {
  where: Prisma.picksWhereUniqueInput
  update: Prisma.XOR<Prisma.picksUpdateWithoutGamesInput, Prisma.picksUncheckedUpdateWithoutGamesInput>
  create: Prisma.XOR<Prisma.picksCreateWithoutGamesInput, Prisma.picksUncheckedCreateWithoutGamesInput>
}

export type picksUpdateWithWhereUniqueWithoutGamesInput = {
  where: Prisma.picksWhereUniqueInput
  data: Prisma.XOR<Prisma.picksUpdateWithoutGamesInput, Prisma.picksUncheckedUpdateWithoutGamesInput>
}

export type picksUpdateManyWithWhereWithoutGamesInput = {
  where: Prisma.picksScalarWhereInput
  data: Prisma.XOR<Prisma.picksUpdateManyMutationInput, Prisma.picksUncheckedUpdateManyWithoutGamesInput>
}

export type picksScalarWhereInput = {
  AND?: Prisma.picksScalarWhereInput | Prisma.picksScalarWhereInput[]
  OR?: Prisma.picksScalarWhereInput[]
  NOT?: Prisma.picksScalarWhereInput | Prisma.picksScalarWhereInput[]
  pickid?: Prisma.IntFilter<"picks"> | number
  uid?: Prisma.IntFilter<"picks"> | number
  season?: Prisma.IntFilter<"picks"> | number
  week?: Prisma.IntFilter<"picks"> | number
  gid?: Prisma.IntFilter<"picks"> | number
  winner?: Prisma.IntNullableFilter<"picks"> | number | null
  loser?: Prisma.IntNullableFilter<"picks"> | number | null
  score?: Prisma.IntNullableFilter<"picks"> | number | null
  ts?: Prisma.DateTimeFilter<"picks"> | Date | string
  correct?: Prisma.IntNullableFilter<"picks"> | number | null
  done?: Prisma.IntNullableFilter<"picks"> | number | null
  is_random?: Prisma.BoolNullableFilter<"picks"> | boolean | null
  member_id?: Prisma.IntNullableFilter<"picks"> | number | null
}

export type picksCreateWithoutLeaguemembersInput = {
  season: number
  week: number
  loser?: number | null
  score?: number | null
  ts?: Date | string
  correct?: number | null
  done?: number | null
  is_random?: boolean | null
  games: Prisma.gamesCreateNestedOneWithoutPicksInput
  people: Prisma.peopleCreateNestedOneWithoutPicksInput
  teams?: Prisma.teamsCreateNestedOneWithoutPicksInput
}

export type picksUncheckedCreateWithoutLeaguemembersInput = {
  pickid?: number
  uid: number
  season: number
  week: number
  gid: number
  winner?: number | null
  loser?: number | null
  score?: number | null
  ts?: Date | string
  correct?: number | null
  done?: number | null
  is_random?: boolean | null
}

export type picksCreateOrConnectWithoutLeaguemembersInput = {
  where: Prisma.picksWhereUniqueInput
  create: Prisma.XOR<Prisma.picksCreateWithoutLeaguemembersInput, Prisma.picksUncheckedCreateWithoutLeaguemembersInput>
}

export type picksCreateManyLeaguemembersInputEnvelope = {
  data: Prisma.picksCreateManyLeaguemembersInput | Prisma.picksCreateManyLeaguemembersInput[]
  skipDuplicates?: boolean
}

export type picksUpsertWithWhereUniqueWithoutLeaguemembersInput = {
  where: Prisma.picksWhereUniqueInput
  update: Prisma.XOR<Prisma.picksUpdateWithoutLeaguemembersInput, Prisma.picksUncheckedUpdateWithoutLeaguemembersInput>
  create: Prisma.XOR<Prisma.picksCreateWithoutLeaguemembersInput, Prisma.picksUncheckedCreateWithoutLeaguemembersInput>
}

export type picksUpdateWithWhereUniqueWithoutLeaguemembersInput = {
  where: Prisma.picksWhereUniqueInput
  data: Prisma.XOR<Prisma.picksUpdateWithoutLeaguemembersInput, Prisma.picksUncheckedUpdateWithoutLeaguemembersInput>
}

export type picksUpdateManyWithWhereWithoutLeaguemembersInput = {
  where: Prisma.picksScalarWhereInput
  data: Prisma.XOR<Prisma.picksUpdateManyMutationInput, Prisma.picksUncheckedUpdateManyWithoutLeaguemembersInput>
}

export type picksCreateWithoutPeopleInput = {
  season: number
  week: number
  loser?: number | null
  score?: number | null
  ts?: Date | string
  correct?: number | null
  done?: number | null
  is_random?: boolean | null
  games: Prisma.gamesCreateNestedOneWithoutPicksInput
  leaguemembers?: Prisma.leaguemembersCreateNestedOneWithoutPicksInput
  teams?: Prisma.teamsCreateNestedOneWithoutPicksInput
}

export type picksUncheckedCreateWithoutPeopleInput = {
  pickid?: number
  season: number
  week: number
  gid: number
  winner?: number | null
  loser?: number | null
  score?: number | null
  ts?: Date | string
  correct?: number | null
  done?: number | null
  is_random?: boolean | null
  member_id?: number | null
}

export type picksCreateOrConnectWithoutPeopleInput = {
  where: Prisma.picksWhereUniqueInput
  create: Prisma.XOR<Prisma.picksCreateWithoutPeopleInput, Prisma.picksUncheckedCreateWithoutPeopleInput>
}

export type picksCreateManyPeopleInputEnvelope = {
  data: Prisma.picksCreateManyPeopleInput | Prisma.picksCreateManyPeopleInput[]
  skipDuplicates?: boolean
}

export type picksUpsertWithWhereUniqueWithoutPeopleInput = {
  where: Prisma.picksWhereUniqueInput
  update: Prisma.XOR<Prisma.picksUpdateWithoutPeopleInput, Prisma.picksUncheckedUpdateWithoutPeopleInput>
  create: Prisma.XOR<Prisma.picksCreateWithoutPeopleInput, Prisma.picksUncheckedCreateWithoutPeopleInput>
}

export type picksUpdateWithWhereUniqueWithoutPeopleInput = {
  where: Prisma.picksWhereUniqueInput
  data: Prisma.XOR<Prisma.picksUpdateWithoutPeopleInput, Prisma.picksUncheckedUpdateWithoutPeopleInput>
}

export type picksUpdateManyWithWhereWithoutPeopleInput = {
  where: Prisma.picksScalarWhereInput
  data: Prisma.XOR<Prisma.picksUpdateManyMutationInput, Prisma.picksUncheckedUpdateManyWithoutPeopleInput>
}

export type picksCreateWithoutTeamsInput = {
  season: number
  week: number
  loser?: number | null
  score?: number | null
  ts?: Date | string
  correct?: number | null
  done?: number | null
  is_random?: boolean | null
  games: Prisma.gamesCreateNestedOneWithoutPicksInput
  people: Prisma.peopleCreateNestedOneWithoutPicksInput
  leaguemembers?: Prisma.leaguemembersCreateNestedOneWithoutPicksInput
}

export type picksUncheckedCreateWithoutTeamsInput = {
  pickid?: number
  uid: number
  season: number
  week: number
  gid: number
  loser?: number | null
  score?: number | null
  ts?: Date | string
  correct?: number | null
  done?: number | null
  is_random?: boolean | null
  member_id?: number | null
}

export type picksCreateOrConnectWithoutTeamsInput = {
  where: Prisma.picksWhereUniqueInput
  create: Prisma.XOR<Prisma.picksCreateWithoutTeamsInput, Prisma.picksUncheckedCreateWithoutTeamsInput>
}

export type picksCreateManyTeamsInputEnvelope = {
  data: Prisma.picksCreateManyTeamsInput | Prisma.picksCreateManyTeamsInput[]
  skipDuplicates?: boolean
}

export type picksUpsertWithWhereUniqueWithoutTeamsInput = {
  where: Prisma.picksWhereUniqueInput
  update: Prisma.XOR<Prisma.picksUpdateWithoutTeamsInput, Prisma.picksUncheckedUpdateWithoutTeamsInput>
  create: Prisma.XOR<Prisma.picksCreateWithoutTeamsInput, Prisma.picksUncheckedCreateWithoutTeamsInput>
}

export type picksUpdateWithWhereUniqueWithoutTeamsInput = {
  where: Prisma.picksWhereUniqueInput
  data: Prisma.XOR<Prisma.picksUpdateWithoutTeamsInput, Prisma.picksUncheckedUpdateWithoutTeamsInput>
}

export type picksUpdateManyWithWhereWithoutTeamsInput = {
  where: Prisma.picksScalarWhereInput
  data: Prisma.XOR<Prisma.picksUpdateManyMutationInput, Prisma.picksUncheckedUpdateManyWithoutTeamsInput>
}

export type picksCreateManyGamesInput = {
  pickid?: number
  uid: number
  season: number
  week: number
  winner?: number | null
  loser?: number | null
  score?: number | null
  ts?: Date | string
  correct?: number | null
  done?: number | null
  is_random?: boolean | null
  member_id?: number | null
}

export type picksUpdateWithoutGamesInput = {
  season?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  loser?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  correct?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  done?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  is_random?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  people?: Prisma.peopleUpdateOneRequiredWithoutPicksNestedInput
  leaguemembers?: Prisma.leaguemembersUpdateOneWithoutPicksNestedInput
  teams?: Prisma.teamsUpdateOneWithoutPicksNestedInput
}

export type picksUncheckedUpdateWithoutGamesInput = {
  pickid?: Prisma.IntFieldUpdateOperationsInput | number
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  season?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  winner?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  loser?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  correct?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  done?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  is_random?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  member_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type picksUncheckedUpdateManyWithoutGamesInput = {
  pickid?: Prisma.IntFieldUpdateOperationsInput | number
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  season?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  winner?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  loser?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  correct?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  done?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  is_random?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  member_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type picksCreateManyLeaguemembersInput = {
  pickid?: number
  uid: number
  season: number
  week: number
  gid: number
  winner?: number | null
  loser?: number | null
  score?: number | null
  ts?: Date | string
  correct?: number | null
  done?: number | null
  is_random?: boolean | null
}

export type picksUpdateWithoutLeaguemembersInput = {
  season?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  loser?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  correct?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  done?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  is_random?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  games?: Prisma.gamesUpdateOneRequiredWithoutPicksNestedInput
  people?: Prisma.peopleUpdateOneRequiredWithoutPicksNestedInput
  teams?: Prisma.teamsUpdateOneWithoutPicksNestedInput
}

export type picksUncheckedUpdateWithoutLeaguemembersInput = {
  pickid?: Prisma.IntFieldUpdateOperationsInput | number
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  season?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  gid?: Prisma.IntFieldUpdateOperationsInput | number
  winner?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  loser?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  correct?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  done?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  is_random?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type picksUncheckedUpdateManyWithoutLeaguemembersInput = {
  pickid?: Prisma.IntFieldUpdateOperationsInput | number
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  season?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  gid?: Prisma.IntFieldUpdateOperationsInput | number
  winner?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  loser?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  correct?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  done?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  is_random?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type picksCreateManyPeopleInput = {
  pickid?: number
  season: number
  week: number
  gid: number
  winner?: number | null
  loser?: number | null
  score?: number | null
  ts?: Date | string
  correct?: number | null
  done?: number | null
  is_random?: boolean | null
  member_id?: number | null
}

export type picksUpdateWithoutPeopleInput = {
  season?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  loser?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  correct?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  done?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  is_random?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  games?: Prisma.gamesUpdateOneRequiredWithoutPicksNestedInput
  leaguemembers?: Prisma.leaguemembersUpdateOneWithoutPicksNestedInput
  teams?: Prisma.teamsUpdateOneWithoutPicksNestedInput
}

export type picksUncheckedUpdateWithoutPeopleInput = {
  pickid?: Prisma.IntFieldUpdateOperationsInput | number
  season?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  gid?: Prisma.IntFieldUpdateOperationsInput | number
  winner?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  loser?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  correct?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  done?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  is_random?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  member_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type picksUncheckedUpdateManyWithoutPeopleInput = {
  pickid?: Prisma.IntFieldUpdateOperationsInput | number
  season?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  gid?: Prisma.IntFieldUpdateOperationsInput | number
  winner?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  loser?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  correct?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  done?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  is_random?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  member_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type picksCreateManyTeamsInput = {
  pickid?: number
  uid: number
  season: number
  week: number
  gid: number
  loser?: number | null
  score?: number | null
  ts?: Date | string
  correct?: number | null
  done?: number | null
  is_random?: boolean | null
  member_id?: number | null
}

export type picksUpdateWithoutTeamsInput = {
  season?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  loser?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  correct?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  done?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  is_random?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  games?: Prisma.gamesUpdateOneRequiredWithoutPicksNestedInput
  people?: Prisma.peopleUpdateOneRequiredWithoutPicksNestedInput
  leaguemembers?: Prisma.leaguemembersUpdateOneWithoutPicksNestedInput
}

export type picksUncheckedUpdateWithoutTeamsInput = {
  pickid?: Prisma.IntFieldUpdateOperationsInput | number
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  season?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  gid?: Prisma.IntFieldUpdateOperationsInput | number
  loser?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  correct?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  done?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  is_random?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  member_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type picksUncheckedUpdateManyWithoutTeamsInput = {
  pickid?: Prisma.IntFieldUpdateOperationsInput | number
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  season?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  gid?: Prisma.IntFieldUpdateOperationsInput | number
  loser?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  score?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  correct?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  done?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  is_random?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  member_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}



export type picksSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  pickid?: boolean
  uid?: boolean
  season?: boolean
  week?: boolean
  gid?: boolean
  winner?: boolean
  loser?: boolean
  score?: boolean
  ts?: boolean
  correct?: boolean
  done?: boolean
  is_random?: boolean
  member_id?: boolean
  games?: boolean | Prisma.gamesDefaultArgs<ExtArgs>
  people?: boolean | Prisma.peopleDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.picks$leaguemembersArgs<ExtArgs>
  teams?: boolean | Prisma.picks$teamsArgs<ExtArgs>
}, ExtArgs["result"]["picks"]>

export type picksSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  pickid?: boolean
  uid?: boolean
  season?: boolean
  week?: boolean
  gid?: boolean
  winner?: boolean
  loser?: boolean
  score?: boolean
  ts?: boolean
  correct?: boolean
  done?: boolean
  is_random?: boolean
  member_id?: boolean
  games?: boolean | Prisma.gamesDefaultArgs<ExtArgs>
  people?: boolean | Prisma.peopleDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.picks$leaguemembersArgs<ExtArgs>
  teams?: boolean | Prisma.picks$teamsArgs<ExtArgs>
}, ExtArgs["result"]["picks"]>

export type picksSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  pickid?: boolean
  uid?: boolean
  season?: boolean
  week?: boolean
  gid?: boolean
  winner?: boolean
  loser?: boolean
  score?: boolean
  ts?: boolean
  correct?: boolean
  done?: boolean
  is_random?: boolean
  member_id?: boolean
  games?: boolean | Prisma.gamesDefaultArgs<ExtArgs>
  people?: boolean | Prisma.peopleDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.picks$leaguemembersArgs<ExtArgs>
  teams?: boolean | Prisma.picks$teamsArgs<ExtArgs>
}, ExtArgs["result"]["picks"]>

export type picksSelectScalar = {
  pickid?: boolean
  uid?: boolean
  season?: boolean
  week?: boolean
  gid?: boolean
  winner?: boolean
  loser?: boolean
  score?: boolean
  ts?: boolean
  correct?: boolean
  done?: boolean
  is_random?: boolean
  member_id?: boolean
}

export type picksOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"pickid" | "uid" | "season" | "week" | "gid" | "winner" | "loser" | "score" | "ts" | "correct" | "done" | "is_random" | "member_id", ExtArgs["result"]["picks"]>
export type picksInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  games?: boolean | Prisma.gamesDefaultArgs<ExtArgs>
  people?: boolean | Prisma.peopleDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.picks$leaguemembersArgs<ExtArgs>
  teams?: boolean | Prisma.picks$teamsArgs<ExtArgs>
}
export type picksIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  games?: boolean | Prisma.gamesDefaultArgs<ExtArgs>
  people?: boolean | Prisma.peopleDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.picks$leaguemembersArgs<ExtArgs>
  teams?: boolean | Prisma.picks$teamsArgs<ExtArgs>
}
export type picksIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  games?: boolean | Prisma.gamesDefaultArgs<ExtArgs>
  people?: boolean | Prisma.peopleDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.picks$leaguemembersArgs<ExtArgs>
  teams?: boolean | Prisma.picks$teamsArgs<ExtArgs>
}

export type $picksPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "picks"
  objects: {
    games: Prisma.$gamesPayload<ExtArgs>
    people: Prisma.$peoplePayload<ExtArgs>
    leaguemembers: Prisma.$leaguemembersPayload<ExtArgs> | null
    teams: Prisma.$teamsPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    pickid: number
    uid: number
    season: number
    week: number
    gid: number
    winner: number | null
    loser: number | null
    score: number | null
    ts: Date
    correct: number | null
    done: number | null
    is_random: boolean | null
    member_id: number | null
  }, ExtArgs["result"]["picks"]>
  composites: {}
}

export type picksGetPayload<S extends boolean | null | undefined | picksDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$picksPayload, S>

export type picksCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<picksFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PicksCountAggregateInputType | true
  }

export interface picksDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['picks'], meta: { name: 'picks' } }
  /**
   * Find zero or one Picks that matches the filter.
   * @param {picksFindUniqueArgs} args - Arguments to find a Picks
   * @example
   * // Get one Picks
   * const picks = await prisma.picks.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends picksFindUniqueArgs>(args: Prisma.SelectSubset<T, picksFindUniqueArgs<ExtArgs>>): Prisma.Prisma__picksClient<runtime.Types.Result.GetResult<Prisma.$picksPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Picks that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {picksFindUniqueOrThrowArgs} args - Arguments to find a Picks
   * @example
   * // Get one Picks
   * const picks = await prisma.picks.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends picksFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, picksFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__picksClient<runtime.Types.Result.GetResult<Prisma.$picksPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Picks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {picksFindFirstArgs} args - Arguments to find a Picks
   * @example
   * // Get one Picks
   * const picks = await prisma.picks.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends picksFindFirstArgs>(args?: Prisma.SelectSubset<T, picksFindFirstArgs<ExtArgs>>): Prisma.Prisma__picksClient<runtime.Types.Result.GetResult<Prisma.$picksPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Picks that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {picksFindFirstOrThrowArgs} args - Arguments to find a Picks
   * @example
   * // Get one Picks
   * const picks = await prisma.picks.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends picksFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, picksFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__picksClient<runtime.Types.Result.GetResult<Prisma.$picksPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Picks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {picksFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Picks
   * const picks = await prisma.picks.findMany()
   * 
   * // Get first 10 Picks
   * const picks = await prisma.picks.findMany({ take: 10 })
   * 
   * // Only select the `pickid`
   * const picksWithPickidOnly = await prisma.picks.findMany({ select: { pickid: true } })
   * 
   */
  findMany<T extends picksFindManyArgs>(args?: Prisma.SelectSubset<T, picksFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$picksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Picks.
   * @param {picksCreateArgs} args - Arguments to create a Picks.
   * @example
   * // Create one Picks
   * const Picks = await prisma.picks.create({
   *   data: {
   *     // ... data to create a Picks
   *   }
   * })
   * 
   */
  create<T extends picksCreateArgs>(args: Prisma.SelectSubset<T, picksCreateArgs<ExtArgs>>): Prisma.Prisma__picksClient<runtime.Types.Result.GetResult<Prisma.$picksPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Picks.
   * @param {picksCreateManyArgs} args - Arguments to create many Picks.
   * @example
   * // Create many Picks
   * const picks = await prisma.picks.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends picksCreateManyArgs>(args?: Prisma.SelectSubset<T, picksCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Picks and returns the data saved in the database.
   * @param {picksCreateManyAndReturnArgs} args - Arguments to create many Picks.
   * @example
   * // Create many Picks
   * const picks = await prisma.picks.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Picks and only return the `pickid`
   * const picksWithPickidOnly = await prisma.picks.createManyAndReturn({
   *   select: { pickid: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends picksCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, picksCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$picksPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Picks.
   * @param {picksDeleteArgs} args - Arguments to delete one Picks.
   * @example
   * // Delete one Picks
   * const Picks = await prisma.picks.delete({
   *   where: {
   *     // ... filter to delete one Picks
   *   }
   * })
   * 
   */
  delete<T extends picksDeleteArgs>(args: Prisma.SelectSubset<T, picksDeleteArgs<ExtArgs>>): Prisma.Prisma__picksClient<runtime.Types.Result.GetResult<Prisma.$picksPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Picks.
   * @param {picksUpdateArgs} args - Arguments to update one Picks.
   * @example
   * // Update one Picks
   * const picks = await prisma.picks.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends picksUpdateArgs>(args: Prisma.SelectSubset<T, picksUpdateArgs<ExtArgs>>): Prisma.Prisma__picksClient<runtime.Types.Result.GetResult<Prisma.$picksPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Picks.
   * @param {picksDeleteManyArgs} args - Arguments to filter Picks to delete.
   * @example
   * // Delete a few Picks
   * const { count } = await prisma.picks.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends picksDeleteManyArgs>(args?: Prisma.SelectSubset<T, picksDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Picks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {picksUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Picks
   * const picks = await prisma.picks.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends picksUpdateManyArgs>(args: Prisma.SelectSubset<T, picksUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Picks and returns the data updated in the database.
   * @param {picksUpdateManyAndReturnArgs} args - Arguments to update many Picks.
   * @example
   * // Update many Picks
   * const picks = await prisma.picks.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Picks and only return the `pickid`
   * const picksWithPickidOnly = await prisma.picks.updateManyAndReturn({
   *   select: { pickid: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends picksUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, picksUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$picksPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Picks.
   * @param {picksUpsertArgs} args - Arguments to update or create a Picks.
   * @example
   * // Update or create a Picks
   * const picks = await prisma.picks.upsert({
   *   create: {
   *     // ... data to create a Picks
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Picks we want to update
   *   }
   * })
   */
  upsert<T extends picksUpsertArgs>(args: Prisma.SelectSubset<T, picksUpsertArgs<ExtArgs>>): Prisma.Prisma__picksClient<runtime.Types.Result.GetResult<Prisma.$picksPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Picks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {picksCountArgs} args - Arguments to filter Picks to count.
   * @example
   * // Count the number of Picks
   * const count = await prisma.picks.count({
   *   where: {
   *     // ... the filter for the Picks we want to count
   *   }
   * })
  **/
  count<T extends picksCountArgs>(
    args?: Prisma.Subset<T, picksCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PicksCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Picks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PicksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PicksAggregateArgs>(args: Prisma.Subset<T, PicksAggregateArgs>): Prisma.PrismaPromise<GetPicksAggregateType<T>>

  /**
   * Group by Picks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {picksGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends picksGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: picksGroupByArgs['orderBy'] }
      : { orderBy?: picksGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, picksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPicksGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the picks model
 */
readonly fields: picksFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for picks.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__picksClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  games<T extends Prisma.gamesDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.gamesDefaultArgs<ExtArgs>>): Prisma.Prisma__gamesClient<runtime.Types.Result.GetResult<Prisma.$gamesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  people<T extends Prisma.peopleDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.peopleDefaultArgs<ExtArgs>>): Prisma.Prisma__peopleClient<runtime.Types.Result.GetResult<Prisma.$peoplePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  leaguemembers<T extends Prisma.picks$leaguemembersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.picks$leaguemembersArgs<ExtArgs>>): Prisma.Prisma__leaguemembersClient<runtime.Types.Result.GetResult<Prisma.$leaguemembersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  teams<T extends Prisma.picks$teamsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.picks$teamsArgs<ExtArgs>>): Prisma.Prisma__teamsClient<runtime.Types.Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the picks model
 */
export interface picksFieldRefs {
  readonly pickid: Prisma.FieldRef<"picks", 'Int'>
  readonly uid: Prisma.FieldRef<"picks", 'Int'>
  readonly season: Prisma.FieldRef<"picks", 'Int'>
  readonly week: Prisma.FieldRef<"picks", 'Int'>
  readonly gid: Prisma.FieldRef<"picks", 'Int'>
  readonly winner: Prisma.FieldRef<"picks", 'Int'>
  readonly loser: Prisma.FieldRef<"picks", 'Int'>
  readonly score: Prisma.FieldRef<"picks", 'Int'>
  readonly ts: Prisma.FieldRef<"picks", 'DateTime'>
  readonly correct: Prisma.FieldRef<"picks", 'Int'>
  readonly done: Prisma.FieldRef<"picks", 'Int'>
  readonly is_random: Prisma.FieldRef<"picks", 'Boolean'>
  readonly member_id: Prisma.FieldRef<"picks", 'Int'>
}
    

// Custom InputTypes
/**
 * picks findUnique
 */
export type picksFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the picks
   */
  select?: Prisma.picksSelect<ExtArgs> | null
  /**
   * Omit specific fields from the picks
   */
  omit?: Prisma.picksOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.picksInclude<ExtArgs> | null
  /**
   * Filter, which picks to fetch.
   */
  where: Prisma.picksWhereUniqueInput
}

/**
 * picks findUniqueOrThrow
 */
export type picksFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the picks
   */
  select?: Prisma.picksSelect<ExtArgs> | null
  /**
   * Omit specific fields from the picks
   */
  omit?: Prisma.picksOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.picksInclude<ExtArgs> | null
  /**
   * Filter, which picks to fetch.
   */
  where: Prisma.picksWhereUniqueInput
}

/**
 * picks findFirst
 */
export type picksFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the picks
   */
  select?: Prisma.picksSelect<ExtArgs> | null
  /**
   * Omit specific fields from the picks
   */
  omit?: Prisma.picksOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.picksInclude<ExtArgs> | null
  /**
   * Filter, which picks to fetch.
   */
  where?: Prisma.picksWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of picks to fetch.
   */
  orderBy?: Prisma.picksOrderByWithRelationInput | Prisma.picksOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for picks.
   */
  cursor?: Prisma.picksWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` picks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` picks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of picks.
   */
  distinct?: Prisma.PicksScalarFieldEnum | Prisma.PicksScalarFieldEnum[]
}

/**
 * picks findFirstOrThrow
 */
export type picksFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the picks
   */
  select?: Prisma.picksSelect<ExtArgs> | null
  /**
   * Omit specific fields from the picks
   */
  omit?: Prisma.picksOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.picksInclude<ExtArgs> | null
  /**
   * Filter, which picks to fetch.
   */
  where?: Prisma.picksWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of picks to fetch.
   */
  orderBy?: Prisma.picksOrderByWithRelationInput | Prisma.picksOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for picks.
   */
  cursor?: Prisma.picksWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` picks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` picks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of picks.
   */
  distinct?: Prisma.PicksScalarFieldEnum | Prisma.PicksScalarFieldEnum[]
}

/**
 * picks findMany
 */
export type picksFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the picks
   */
  select?: Prisma.picksSelect<ExtArgs> | null
  /**
   * Omit specific fields from the picks
   */
  omit?: Prisma.picksOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.picksInclude<ExtArgs> | null
  /**
   * Filter, which picks to fetch.
   */
  where?: Prisma.picksWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of picks to fetch.
   */
  orderBy?: Prisma.picksOrderByWithRelationInput | Prisma.picksOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing picks.
   */
  cursor?: Prisma.picksWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` picks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` picks.
   */
  skip?: number
  distinct?: Prisma.PicksScalarFieldEnum | Prisma.PicksScalarFieldEnum[]
}

/**
 * picks create
 */
export type picksCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the picks
   */
  select?: Prisma.picksSelect<ExtArgs> | null
  /**
   * Omit specific fields from the picks
   */
  omit?: Prisma.picksOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.picksInclude<ExtArgs> | null
  /**
   * The data needed to create a picks.
   */
  data: Prisma.XOR<Prisma.picksCreateInput, Prisma.picksUncheckedCreateInput>
}

/**
 * picks createMany
 */
export type picksCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many picks.
   */
  data: Prisma.picksCreateManyInput | Prisma.picksCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * picks createManyAndReturn
 */
export type picksCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the picks
   */
  select?: Prisma.picksSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the picks
   */
  omit?: Prisma.picksOmit<ExtArgs> | null
  /**
   * The data used to create many picks.
   */
  data: Prisma.picksCreateManyInput | Prisma.picksCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.picksIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * picks update
 */
export type picksUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the picks
   */
  select?: Prisma.picksSelect<ExtArgs> | null
  /**
   * Omit specific fields from the picks
   */
  omit?: Prisma.picksOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.picksInclude<ExtArgs> | null
  /**
   * The data needed to update a picks.
   */
  data: Prisma.XOR<Prisma.picksUpdateInput, Prisma.picksUncheckedUpdateInput>
  /**
   * Choose, which picks to update.
   */
  where: Prisma.picksWhereUniqueInput
}

/**
 * picks updateMany
 */
export type picksUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update picks.
   */
  data: Prisma.XOR<Prisma.picksUpdateManyMutationInput, Prisma.picksUncheckedUpdateManyInput>
  /**
   * Filter which picks to update
   */
  where?: Prisma.picksWhereInput
  /**
   * Limit how many picks to update.
   */
  limit?: number
}

/**
 * picks updateManyAndReturn
 */
export type picksUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the picks
   */
  select?: Prisma.picksSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the picks
   */
  omit?: Prisma.picksOmit<ExtArgs> | null
  /**
   * The data used to update picks.
   */
  data: Prisma.XOR<Prisma.picksUpdateManyMutationInput, Prisma.picksUncheckedUpdateManyInput>
  /**
   * Filter which picks to update
   */
  where?: Prisma.picksWhereInput
  /**
   * Limit how many picks to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.picksIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * picks upsert
 */
export type picksUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the picks
   */
  select?: Prisma.picksSelect<ExtArgs> | null
  /**
   * Omit specific fields from the picks
   */
  omit?: Prisma.picksOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.picksInclude<ExtArgs> | null
  /**
   * The filter to search for the picks to update in case it exists.
   */
  where: Prisma.picksWhereUniqueInput
  /**
   * In case the picks found by the `where` argument doesn't exist, create a new picks with this data.
   */
  create: Prisma.XOR<Prisma.picksCreateInput, Prisma.picksUncheckedCreateInput>
  /**
   * In case the picks was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.picksUpdateInput, Prisma.picksUncheckedUpdateInput>
}

/**
 * picks delete
 */
export type picksDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the picks
   */
  select?: Prisma.picksSelect<ExtArgs> | null
  /**
   * Omit specific fields from the picks
   */
  omit?: Prisma.picksOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.picksInclude<ExtArgs> | null
  /**
   * Filter which picks to delete.
   */
  where: Prisma.picksWhereUniqueInput
}

/**
 * picks deleteMany
 */
export type picksDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which picks to delete
   */
  where?: Prisma.picksWhereInput
  /**
   * Limit how many picks to delete.
   */
  limit?: number
}

/**
 * picks.leaguemembers
 */
export type picks$leaguemembersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaguemembers
   */
  select?: Prisma.leaguemembersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaguemembers
   */
  omit?: Prisma.leaguemembersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.leaguemembersInclude<ExtArgs> | null
  where?: Prisma.leaguemembersWhereInput
}

/**
 * picks.teams
 */
export type picks$teamsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the teams
   */
  select?: Prisma.teamsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the teams
   */
  omit?: Prisma.teamsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.teamsInclude<ExtArgs> | null
  where?: Prisma.teamsWhereInput
}

/**
 * picks without action
 */
export type picksDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the picks
   */
  select?: Prisma.picksSelect<ExtArgs> | null
  /**
   * Omit specific fields from the picks
   */
  omit?: Prisma.picksOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.picksInclude<ExtArgs> | null
}
