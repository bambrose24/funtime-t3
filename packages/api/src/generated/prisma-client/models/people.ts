
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `people` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model people
 * 
 */
export type peopleModel = runtime.Types.Result.DefaultSelection<Prisma.$peoplePayload>

export type AggregatePeople = {
  _count: PeopleCountAggregateOutputType | null
  _avg: PeopleAvgAggregateOutputType | null
  _sum: PeopleSumAggregateOutputType | null
  _min: PeopleMinAggregateOutputType | null
  _max: PeopleMaxAggregateOutputType | null
}

export type PeopleAvgAggregateOutputType = {
  uid: number | null
  season: number | null
}

export type PeopleSumAggregateOutputType = {
  uid: number | null
  season: number | null
}

export type PeopleMinAggregateOutputType = {
  uid: number | null
  username: string | null
  fname: string | null
  lname: string | null
  email: string | null
  season: number | null
  email2: string | null
  google_photo_url: string | null
  google_email: string | null
  google_userid: string | null
  supabase_id: string | null
}

export type PeopleMaxAggregateOutputType = {
  uid: number | null
  username: string | null
  fname: string | null
  lname: string | null
  email: string | null
  season: number | null
  email2: string | null
  google_photo_url: string | null
  google_email: string | null
  google_userid: string | null
  supabase_id: string | null
}

export type PeopleCountAggregateOutputType = {
  uid: number
  username: number
  fname: number
  lname: number
  email: number
  season: number
  email2: number
  google_photo_url: number
  google_email: number
  google_userid: number
  supabase_id: number
  _all: number
}


export type PeopleAvgAggregateInputType = {
  uid?: true
  season?: true
}

export type PeopleSumAggregateInputType = {
  uid?: true
  season?: true
}

export type PeopleMinAggregateInputType = {
  uid?: true
  username?: true
  fname?: true
  lname?: true
  email?: true
  season?: true
  email2?: true
  google_photo_url?: true
  google_email?: true
  google_userid?: true
  supabase_id?: true
}

export type PeopleMaxAggregateInputType = {
  uid?: true
  username?: true
  fname?: true
  lname?: true
  email?: true
  season?: true
  email2?: true
  google_photo_url?: true
  google_email?: true
  google_userid?: true
  supabase_id?: true
}

export type PeopleCountAggregateInputType = {
  uid?: true
  username?: true
  fname?: true
  lname?: true
  email?: true
  season?: true
  email2?: true
  google_photo_url?: true
  google_email?: true
  google_userid?: true
  supabase_id?: true
  _all?: true
}

export type PeopleAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which people to aggregate.
   */
  where?: Prisma.peopleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of people to fetch.
   */
  orderBy?: Prisma.peopleOrderByWithRelationInput | Prisma.peopleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.peopleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` people from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` people.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned people
  **/
  _count?: true | PeopleCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PeopleAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PeopleSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PeopleMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PeopleMaxAggregateInputType
}

export type GetPeopleAggregateType<T extends PeopleAggregateArgs> = {
      [P in keyof T & keyof AggregatePeople]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePeople[P]>
    : Prisma.GetScalarType<T[P], AggregatePeople[P]>
}




export type peopleGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.peopleWhereInput
  orderBy?: Prisma.peopleOrderByWithAggregationInput | Prisma.peopleOrderByWithAggregationInput[]
  by: Prisma.PeopleScalarFieldEnum[] | Prisma.PeopleScalarFieldEnum
  having?: Prisma.peopleScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PeopleCountAggregateInputType | true
  _avg?: PeopleAvgAggregateInputType
  _sum?: PeopleSumAggregateInputType
  _min?: PeopleMinAggregateInputType
  _max?: PeopleMaxAggregateInputType
}

export type PeopleGroupByOutputType = {
  uid: number
  username: string
  fname: string
  lname: string
  email: string
  season: number
  email2: string | null
  google_photo_url: string | null
  google_email: string | null
  google_userid: string | null
  supabase_id: string | null
  _count: PeopleCountAggregateOutputType | null
  _avg: PeopleAvgAggregateOutputType | null
  _sum: PeopleSumAggregateOutputType | null
  _min: PeopleMinAggregateOutputType | null
  _max: PeopleMaxAggregateOutputType | null
}

type GetPeopleGroupByPayload<T extends peopleGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PeopleGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PeopleGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PeopleGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PeopleGroupByOutputType[P]>
      }
    >
  > 



export type peopleWhereInput = {
  AND?: Prisma.peopleWhereInput | Prisma.peopleWhereInput[]
  OR?: Prisma.peopleWhereInput[]
  NOT?: Prisma.peopleWhereInput | Prisma.peopleWhereInput[]
  uid?: Prisma.IntFilter<"people"> | number
  username?: Prisma.StringFilter<"people"> | string
  fname?: Prisma.StringFilter<"people"> | string
  lname?: Prisma.StringFilter<"people"> | string
  email?: Prisma.StringFilter<"people"> | string
  season?: Prisma.IntFilter<"people"> | number
  email2?: Prisma.StringNullableFilter<"people"> | string | null
  google_photo_url?: Prisma.StringNullableFilter<"people"> | string | null
  google_email?: Prisma.StringNullableFilter<"people"> | string | null
  google_userid?: Prisma.StringNullableFilter<"people"> | string | null
  supabase_id?: Prisma.StringNullableFilter<"people"> | string | null
  leaguemembers?: Prisma.LeaguemembersListRelationFilter
  leagues?: Prisma.LeaguesListRelationFilter
  picks?: Prisma.PicksListRelationFilter
}

export type peopleOrderByWithRelationInput = {
  uid?: Prisma.SortOrder
  username?: Prisma.SortOrder
  fname?: Prisma.SortOrder
  lname?: Prisma.SortOrder
  email?: Prisma.SortOrder
  season?: Prisma.SortOrder
  email2?: Prisma.SortOrderInput | Prisma.SortOrder
  google_photo_url?: Prisma.SortOrderInput | Prisma.SortOrder
  google_email?: Prisma.SortOrderInput | Prisma.SortOrder
  google_userid?: Prisma.SortOrderInput | Prisma.SortOrder
  supabase_id?: Prisma.SortOrderInput | Prisma.SortOrder
  leaguemembers?: Prisma.leaguemembersOrderByRelationAggregateInput
  leagues?: Prisma.leaguesOrderByRelationAggregateInput
  picks?: Prisma.picksOrderByRelationAggregateInput
}

export type peopleWhereUniqueInput = Prisma.AtLeast<{
  uid?: number
  email?: string
  supabase_id?: string
  AND?: Prisma.peopleWhereInput | Prisma.peopleWhereInput[]
  OR?: Prisma.peopleWhereInput[]
  NOT?: Prisma.peopleWhereInput | Prisma.peopleWhereInput[]
  username?: Prisma.StringFilter<"people"> | string
  fname?: Prisma.StringFilter<"people"> | string
  lname?: Prisma.StringFilter<"people"> | string
  season?: Prisma.IntFilter<"people"> | number
  email2?: Prisma.StringNullableFilter<"people"> | string | null
  google_photo_url?: Prisma.StringNullableFilter<"people"> | string | null
  google_email?: Prisma.StringNullableFilter<"people"> | string | null
  google_userid?: Prisma.StringNullableFilter<"people"> | string | null
  leaguemembers?: Prisma.LeaguemembersListRelationFilter
  leagues?: Prisma.LeaguesListRelationFilter
  picks?: Prisma.PicksListRelationFilter
}, "uid" | "email" | "supabase_id">

export type peopleOrderByWithAggregationInput = {
  uid?: Prisma.SortOrder
  username?: Prisma.SortOrder
  fname?: Prisma.SortOrder
  lname?: Prisma.SortOrder
  email?: Prisma.SortOrder
  season?: Prisma.SortOrder
  email2?: Prisma.SortOrderInput | Prisma.SortOrder
  google_photo_url?: Prisma.SortOrderInput | Prisma.SortOrder
  google_email?: Prisma.SortOrderInput | Prisma.SortOrder
  google_userid?: Prisma.SortOrderInput | Prisma.SortOrder
  supabase_id?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.peopleCountOrderByAggregateInput
  _avg?: Prisma.peopleAvgOrderByAggregateInput
  _max?: Prisma.peopleMaxOrderByAggregateInput
  _min?: Prisma.peopleMinOrderByAggregateInput
  _sum?: Prisma.peopleSumOrderByAggregateInput
}

export type peopleScalarWhereWithAggregatesInput = {
  AND?: Prisma.peopleScalarWhereWithAggregatesInput | Prisma.peopleScalarWhereWithAggregatesInput[]
  OR?: Prisma.peopleScalarWhereWithAggregatesInput[]
  NOT?: Prisma.peopleScalarWhereWithAggregatesInput | Prisma.peopleScalarWhereWithAggregatesInput[]
  uid?: Prisma.IntWithAggregatesFilter<"people"> | number
  username?: Prisma.StringWithAggregatesFilter<"people"> | string
  fname?: Prisma.StringWithAggregatesFilter<"people"> | string
  lname?: Prisma.StringWithAggregatesFilter<"people"> | string
  email?: Prisma.StringWithAggregatesFilter<"people"> | string
  season?: Prisma.IntWithAggregatesFilter<"people"> | number
  email2?: Prisma.StringNullableWithAggregatesFilter<"people"> | string | null
  google_photo_url?: Prisma.StringNullableWithAggregatesFilter<"people"> | string | null
  google_email?: Prisma.StringNullableWithAggregatesFilter<"people"> | string | null
  google_userid?: Prisma.StringNullableWithAggregatesFilter<"people"> | string | null
  supabase_id?: Prisma.StringNullableWithAggregatesFilter<"people"> | string | null
}

export type peopleCreateInput = {
  username: string
  fname: string
  lname: string
  email: string
  season: number
  email2?: string | null
  google_photo_url?: string | null
  google_email?: string | null
  google_userid?: string | null
  supabase_id?: string | null
  leaguemembers?: Prisma.leaguemembersCreateNestedManyWithoutPeopleInput
  leagues?: Prisma.leaguesCreateNestedManyWithoutPeopleInput
  picks?: Prisma.picksCreateNestedManyWithoutPeopleInput
}

export type peopleUncheckedCreateInput = {
  uid?: number
  username: string
  fname: string
  lname: string
  email: string
  season: number
  email2?: string | null
  google_photo_url?: string | null
  google_email?: string | null
  google_userid?: string | null
  supabase_id?: string | null
  leaguemembers?: Prisma.leaguemembersUncheckedCreateNestedManyWithoutPeopleInput
  leagues?: Prisma.leaguesUncheckedCreateNestedManyWithoutPeopleInput
  picks?: Prisma.picksUncheckedCreateNestedManyWithoutPeopleInput
}

export type peopleUpdateInput = {
  username?: Prisma.StringFieldUpdateOperationsInput | string
  fname?: Prisma.StringFieldUpdateOperationsInput | string
  lname?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  season?: Prisma.IntFieldUpdateOperationsInput | number
  email2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_photo_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_userid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  supabase_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  leaguemembers?: Prisma.leaguemembersUpdateManyWithoutPeopleNestedInput
  leagues?: Prisma.leaguesUpdateManyWithoutPeopleNestedInput
  picks?: Prisma.picksUpdateManyWithoutPeopleNestedInput
}

export type peopleUncheckedUpdateInput = {
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  username?: Prisma.StringFieldUpdateOperationsInput | string
  fname?: Prisma.StringFieldUpdateOperationsInput | string
  lname?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  season?: Prisma.IntFieldUpdateOperationsInput | number
  email2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_photo_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_userid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  supabase_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  leaguemembers?: Prisma.leaguemembersUncheckedUpdateManyWithoutPeopleNestedInput
  leagues?: Prisma.leaguesUncheckedUpdateManyWithoutPeopleNestedInput
  picks?: Prisma.picksUncheckedUpdateManyWithoutPeopleNestedInput
}

export type peopleCreateManyInput = {
  uid?: number
  username: string
  fname: string
  lname: string
  email: string
  season: number
  email2?: string | null
  google_photo_url?: string | null
  google_email?: string | null
  google_userid?: string | null
  supabase_id?: string | null
}

export type peopleUpdateManyMutationInput = {
  username?: Prisma.StringFieldUpdateOperationsInput | string
  fname?: Prisma.StringFieldUpdateOperationsInput | string
  lname?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  season?: Prisma.IntFieldUpdateOperationsInput | number
  email2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_photo_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_userid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  supabase_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type peopleUncheckedUpdateManyInput = {
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  username?: Prisma.StringFieldUpdateOperationsInput | string
  fname?: Prisma.StringFieldUpdateOperationsInput | string
  lname?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  season?: Prisma.IntFieldUpdateOperationsInput | number
  email2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_photo_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_userid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  supabase_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type PeopleScalarRelationFilter = {
  is?: Prisma.peopleWhereInput
  isNot?: Prisma.peopleWhereInput
}

export type peopleCountOrderByAggregateInput = {
  uid?: Prisma.SortOrder
  username?: Prisma.SortOrder
  fname?: Prisma.SortOrder
  lname?: Prisma.SortOrder
  email?: Prisma.SortOrder
  season?: Prisma.SortOrder
  email2?: Prisma.SortOrder
  google_photo_url?: Prisma.SortOrder
  google_email?: Prisma.SortOrder
  google_userid?: Prisma.SortOrder
  supabase_id?: Prisma.SortOrder
}

export type peopleAvgOrderByAggregateInput = {
  uid?: Prisma.SortOrder
  season?: Prisma.SortOrder
}

export type peopleMaxOrderByAggregateInput = {
  uid?: Prisma.SortOrder
  username?: Prisma.SortOrder
  fname?: Prisma.SortOrder
  lname?: Prisma.SortOrder
  email?: Prisma.SortOrder
  season?: Prisma.SortOrder
  email2?: Prisma.SortOrder
  google_photo_url?: Prisma.SortOrder
  google_email?: Prisma.SortOrder
  google_userid?: Prisma.SortOrder
  supabase_id?: Prisma.SortOrder
}

export type peopleMinOrderByAggregateInput = {
  uid?: Prisma.SortOrder
  username?: Prisma.SortOrder
  fname?: Prisma.SortOrder
  lname?: Prisma.SortOrder
  email?: Prisma.SortOrder
  season?: Prisma.SortOrder
  email2?: Prisma.SortOrder
  google_photo_url?: Prisma.SortOrder
  google_email?: Prisma.SortOrder
  google_userid?: Prisma.SortOrder
  supabase_id?: Prisma.SortOrder
}

export type peopleSumOrderByAggregateInput = {
  uid?: Prisma.SortOrder
  season?: Prisma.SortOrder
}

export type peopleCreateNestedOneWithoutLeaguemembersInput = {
  create?: Prisma.XOR<Prisma.peopleCreateWithoutLeaguemembersInput, Prisma.peopleUncheckedCreateWithoutLeaguemembersInput>
  connectOrCreate?: Prisma.peopleCreateOrConnectWithoutLeaguemembersInput
  connect?: Prisma.peopleWhereUniqueInput
}

export type peopleUpdateOneRequiredWithoutLeaguemembersNestedInput = {
  create?: Prisma.XOR<Prisma.peopleCreateWithoutLeaguemembersInput, Prisma.peopleUncheckedCreateWithoutLeaguemembersInput>
  connectOrCreate?: Prisma.peopleCreateOrConnectWithoutLeaguemembersInput
  upsert?: Prisma.peopleUpsertWithoutLeaguemembersInput
  connect?: Prisma.peopleWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.peopleUpdateToOneWithWhereWithoutLeaguemembersInput, Prisma.peopleUpdateWithoutLeaguemembersInput>, Prisma.peopleUncheckedUpdateWithoutLeaguemembersInput>
}

export type peopleCreateNestedOneWithoutLeaguesInput = {
  create?: Prisma.XOR<Prisma.peopleCreateWithoutLeaguesInput, Prisma.peopleUncheckedCreateWithoutLeaguesInput>
  connectOrCreate?: Prisma.peopleCreateOrConnectWithoutLeaguesInput
  connect?: Prisma.peopleWhereUniqueInput
}

export type peopleUpdateOneRequiredWithoutLeaguesNestedInput = {
  create?: Prisma.XOR<Prisma.peopleCreateWithoutLeaguesInput, Prisma.peopleUncheckedCreateWithoutLeaguesInput>
  connectOrCreate?: Prisma.peopleCreateOrConnectWithoutLeaguesInput
  upsert?: Prisma.peopleUpsertWithoutLeaguesInput
  connect?: Prisma.peopleWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.peopleUpdateToOneWithWhereWithoutLeaguesInput, Prisma.peopleUpdateWithoutLeaguesInput>, Prisma.peopleUncheckedUpdateWithoutLeaguesInput>
}

export type peopleCreateNestedOneWithoutPicksInput = {
  create?: Prisma.XOR<Prisma.peopleCreateWithoutPicksInput, Prisma.peopleUncheckedCreateWithoutPicksInput>
  connectOrCreate?: Prisma.peopleCreateOrConnectWithoutPicksInput
  connect?: Prisma.peopleWhereUniqueInput
}

export type peopleUpdateOneRequiredWithoutPicksNestedInput = {
  create?: Prisma.XOR<Prisma.peopleCreateWithoutPicksInput, Prisma.peopleUncheckedCreateWithoutPicksInput>
  connectOrCreate?: Prisma.peopleCreateOrConnectWithoutPicksInput
  upsert?: Prisma.peopleUpsertWithoutPicksInput
  connect?: Prisma.peopleWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.peopleUpdateToOneWithWhereWithoutPicksInput, Prisma.peopleUpdateWithoutPicksInput>, Prisma.peopleUncheckedUpdateWithoutPicksInput>
}

export type peopleCreateWithoutLeaguemembersInput = {
  username: string
  fname: string
  lname: string
  email: string
  season: number
  email2?: string | null
  google_photo_url?: string | null
  google_email?: string | null
  google_userid?: string | null
  supabase_id?: string | null
  leagues?: Prisma.leaguesCreateNestedManyWithoutPeopleInput
  picks?: Prisma.picksCreateNestedManyWithoutPeopleInput
}

export type peopleUncheckedCreateWithoutLeaguemembersInput = {
  uid?: number
  username: string
  fname: string
  lname: string
  email: string
  season: number
  email2?: string | null
  google_photo_url?: string | null
  google_email?: string | null
  google_userid?: string | null
  supabase_id?: string | null
  leagues?: Prisma.leaguesUncheckedCreateNestedManyWithoutPeopleInput
  picks?: Prisma.picksUncheckedCreateNestedManyWithoutPeopleInput
}

export type peopleCreateOrConnectWithoutLeaguemembersInput = {
  where: Prisma.peopleWhereUniqueInput
  create: Prisma.XOR<Prisma.peopleCreateWithoutLeaguemembersInput, Prisma.peopleUncheckedCreateWithoutLeaguemembersInput>
}

export type peopleUpsertWithoutLeaguemembersInput = {
  update: Prisma.XOR<Prisma.peopleUpdateWithoutLeaguemembersInput, Prisma.peopleUncheckedUpdateWithoutLeaguemembersInput>
  create: Prisma.XOR<Prisma.peopleCreateWithoutLeaguemembersInput, Prisma.peopleUncheckedCreateWithoutLeaguemembersInput>
  where?: Prisma.peopleWhereInput
}

export type peopleUpdateToOneWithWhereWithoutLeaguemembersInput = {
  where?: Prisma.peopleWhereInput
  data: Prisma.XOR<Prisma.peopleUpdateWithoutLeaguemembersInput, Prisma.peopleUncheckedUpdateWithoutLeaguemembersInput>
}

export type peopleUpdateWithoutLeaguemembersInput = {
  username?: Prisma.StringFieldUpdateOperationsInput | string
  fname?: Prisma.StringFieldUpdateOperationsInput | string
  lname?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  season?: Prisma.IntFieldUpdateOperationsInput | number
  email2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_photo_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_userid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  supabase_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  leagues?: Prisma.leaguesUpdateManyWithoutPeopleNestedInput
  picks?: Prisma.picksUpdateManyWithoutPeopleNestedInput
}

export type peopleUncheckedUpdateWithoutLeaguemembersInput = {
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  username?: Prisma.StringFieldUpdateOperationsInput | string
  fname?: Prisma.StringFieldUpdateOperationsInput | string
  lname?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  season?: Prisma.IntFieldUpdateOperationsInput | number
  email2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_photo_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_userid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  supabase_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  leagues?: Prisma.leaguesUncheckedUpdateManyWithoutPeopleNestedInput
  picks?: Prisma.picksUncheckedUpdateManyWithoutPeopleNestedInput
}

export type peopleCreateWithoutLeaguesInput = {
  username: string
  fname: string
  lname: string
  email: string
  season: number
  email2?: string | null
  google_photo_url?: string | null
  google_email?: string | null
  google_userid?: string | null
  supabase_id?: string | null
  leaguemembers?: Prisma.leaguemembersCreateNestedManyWithoutPeopleInput
  picks?: Prisma.picksCreateNestedManyWithoutPeopleInput
}

export type peopleUncheckedCreateWithoutLeaguesInput = {
  uid?: number
  username: string
  fname: string
  lname: string
  email: string
  season: number
  email2?: string | null
  google_photo_url?: string | null
  google_email?: string | null
  google_userid?: string | null
  supabase_id?: string | null
  leaguemembers?: Prisma.leaguemembersUncheckedCreateNestedManyWithoutPeopleInput
  picks?: Prisma.picksUncheckedCreateNestedManyWithoutPeopleInput
}

export type peopleCreateOrConnectWithoutLeaguesInput = {
  where: Prisma.peopleWhereUniqueInput
  create: Prisma.XOR<Prisma.peopleCreateWithoutLeaguesInput, Prisma.peopleUncheckedCreateWithoutLeaguesInput>
}

export type peopleUpsertWithoutLeaguesInput = {
  update: Prisma.XOR<Prisma.peopleUpdateWithoutLeaguesInput, Prisma.peopleUncheckedUpdateWithoutLeaguesInput>
  create: Prisma.XOR<Prisma.peopleCreateWithoutLeaguesInput, Prisma.peopleUncheckedCreateWithoutLeaguesInput>
  where?: Prisma.peopleWhereInput
}

export type peopleUpdateToOneWithWhereWithoutLeaguesInput = {
  where?: Prisma.peopleWhereInput
  data: Prisma.XOR<Prisma.peopleUpdateWithoutLeaguesInput, Prisma.peopleUncheckedUpdateWithoutLeaguesInput>
}

export type peopleUpdateWithoutLeaguesInput = {
  username?: Prisma.StringFieldUpdateOperationsInput | string
  fname?: Prisma.StringFieldUpdateOperationsInput | string
  lname?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  season?: Prisma.IntFieldUpdateOperationsInput | number
  email2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_photo_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_userid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  supabase_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  leaguemembers?: Prisma.leaguemembersUpdateManyWithoutPeopleNestedInput
  picks?: Prisma.picksUpdateManyWithoutPeopleNestedInput
}

export type peopleUncheckedUpdateWithoutLeaguesInput = {
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  username?: Prisma.StringFieldUpdateOperationsInput | string
  fname?: Prisma.StringFieldUpdateOperationsInput | string
  lname?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  season?: Prisma.IntFieldUpdateOperationsInput | number
  email2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_photo_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_userid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  supabase_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  leaguemembers?: Prisma.leaguemembersUncheckedUpdateManyWithoutPeopleNestedInput
  picks?: Prisma.picksUncheckedUpdateManyWithoutPeopleNestedInput
}

export type peopleCreateWithoutPicksInput = {
  username: string
  fname: string
  lname: string
  email: string
  season: number
  email2?: string | null
  google_photo_url?: string | null
  google_email?: string | null
  google_userid?: string | null
  supabase_id?: string | null
  leaguemembers?: Prisma.leaguemembersCreateNestedManyWithoutPeopleInput
  leagues?: Prisma.leaguesCreateNestedManyWithoutPeopleInput
}

export type peopleUncheckedCreateWithoutPicksInput = {
  uid?: number
  username: string
  fname: string
  lname: string
  email: string
  season: number
  email2?: string | null
  google_photo_url?: string | null
  google_email?: string | null
  google_userid?: string | null
  supabase_id?: string | null
  leaguemembers?: Prisma.leaguemembersUncheckedCreateNestedManyWithoutPeopleInput
  leagues?: Prisma.leaguesUncheckedCreateNestedManyWithoutPeopleInput
}

export type peopleCreateOrConnectWithoutPicksInput = {
  where: Prisma.peopleWhereUniqueInput
  create: Prisma.XOR<Prisma.peopleCreateWithoutPicksInput, Prisma.peopleUncheckedCreateWithoutPicksInput>
}

export type peopleUpsertWithoutPicksInput = {
  update: Prisma.XOR<Prisma.peopleUpdateWithoutPicksInput, Prisma.peopleUncheckedUpdateWithoutPicksInput>
  create: Prisma.XOR<Prisma.peopleCreateWithoutPicksInput, Prisma.peopleUncheckedCreateWithoutPicksInput>
  where?: Prisma.peopleWhereInput
}

export type peopleUpdateToOneWithWhereWithoutPicksInput = {
  where?: Prisma.peopleWhereInput
  data: Prisma.XOR<Prisma.peopleUpdateWithoutPicksInput, Prisma.peopleUncheckedUpdateWithoutPicksInput>
}

export type peopleUpdateWithoutPicksInput = {
  username?: Prisma.StringFieldUpdateOperationsInput | string
  fname?: Prisma.StringFieldUpdateOperationsInput | string
  lname?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  season?: Prisma.IntFieldUpdateOperationsInput | number
  email2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_photo_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_userid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  supabase_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  leaguemembers?: Prisma.leaguemembersUpdateManyWithoutPeopleNestedInput
  leagues?: Prisma.leaguesUpdateManyWithoutPeopleNestedInput
}

export type peopleUncheckedUpdateWithoutPicksInput = {
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  username?: Prisma.StringFieldUpdateOperationsInput | string
  fname?: Prisma.StringFieldUpdateOperationsInput | string
  lname?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  season?: Prisma.IntFieldUpdateOperationsInput | number
  email2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_photo_url?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  google_userid?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  supabase_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  leaguemembers?: Prisma.leaguemembersUncheckedUpdateManyWithoutPeopleNestedInput
  leagues?: Prisma.leaguesUncheckedUpdateManyWithoutPeopleNestedInput
}


/**
 * Count Type PeopleCountOutputType
 */

export type PeopleCountOutputType = {
  leaguemembers: number
  leagues: number
  picks: number
}

export type PeopleCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  leaguemembers?: boolean | PeopleCountOutputTypeCountLeaguemembersArgs
  leagues?: boolean | PeopleCountOutputTypeCountLeaguesArgs
  picks?: boolean | PeopleCountOutputTypeCountPicksArgs
}

/**
 * PeopleCountOutputType without action
 */
export type PeopleCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PeopleCountOutputType
   */
  select?: Prisma.PeopleCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PeopleCountOutputType without action
 */
export type PeopleCountOutputTypeCountLeaguemembersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.leaguemembersWhereInput
}

/**
 * PeopleCountOutputType without action
 */
export type PeopleCountOutputTypeCountLeaguesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.leaguesWhereInput
}

/**
 * PeopleCountOutputType without action
 */
export type PeopleCountOutputTypeCountPicksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.picksWhereInput
}


export type peopleSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  uid?: boolean
  username?: boolean
  fname?: boolean
  lname?: boolean
  email?: boolean
  season?: boolean
  email2?: boolean
  google_photo_url?: boolean
  google_email?: boolean
  google_userid?: boolean
  supabase_id?: boolean
  leaguemembers?: boolean | Prisma.people$leaguemembersArgs<ExtArgs>
  leagues?: boolean | Prisma.people$leaguesArgs<ExtArgs>
  picks?: boolean | Prisma.people$picksArgs<ExtArgs>
  _count?: boolean | Prisma.PeopleCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["people"]>

export type peopleSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  uid?: boolean
  username?: boolean
  fname?: boolean
  lname?: boolean
  email?: boolean
  season?: boolean
  email2?: boolean
  google_photo_url?: boolean
  google_email?: boolean
  google_userid?: boolean
  supabase_id?: boolean
}, ExtArgs["result"]["people"]>

export type peopleSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  uid?: boolean
  username?: boolean
  fname?: boolean
  lname?: boolean
  email?: boolean
  season?: boolean
  email2?: boolean
  google_photo_url?: boolean
  google_email?: boolean
  google_userid?: boolean
  supabase_id?: boolean
}, ExtArgs["result"]["people"]>

export type peopleSelectScalar = {
  uid?: boolean
  username?: boolean
  fname?: boolean
  lname?: boolean
  email?: boolean
  season?: boolean
  email2?: boolean
  google_photo_url?: boolean
  google_email?: boolean
  google_userid?: boolean
  supabase_id?: boolean
}

export type peopleOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"uid" | "username" | "fname" | "lname" | "email" | "season" | "email2" | "google_photo_url" | "google_email" | "google_userid" | "supabase_id", ExtArgs["result"]["people"]>
export type peopleInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  leaguemembers?: boolean | Prisma.people$leaguemembersArgs<ExtArgs>
  leagues?: boolean | Prisma.people$leaguesArgs<ExtArgs>
  picks?: boolean | Prisma.people$picksArgs<ExtArgs>
  _count?: boolean | Prisma.PeopleCountOutputTypeDefaultArgs<ExtArgs>
}
export type peopleIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type peopleIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $peoplePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "people"
  objects: {
    leaguemembers: Prisma.$leaguemembersPayload<ExtArgs>[]
    leagues: Prisma.$leaguesPayload<ExtArgs>[]
    picks: Prisma.$picksPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    uid: number
    username: string
    fname: string
    lname: string
    email: string
    season: number
    email2: string | null
    google_photo_url: string | null
    google_email: string | null
    google_userid: string | null
    supabase_id: string | null
  }, ExtArgs["result"]["people"]>
  composites: {}
}

export type peopleGetPayload<S extends boolean | null | undefined | peopleDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$peoplePayload, S>

export type peopleCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<peopleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PeopleCountAggregateInputType | true
  }

export interface peopleDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['people'], meta: { name: 'people' } }
  /**
   * Find zero or one People that matches the filter.
   * @param {peopleFindUniqueArgs} args - Arguments to find a People
   * @example
   * // Get one People
   * const people = await prisma.people.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends peopleFindUniqueArgs>(args: Prisma.SelectSubset<T, peopleFindUniqueArgs<ExtArgs>>): Prisma.Prisma__peopleClient<runtime.Types.Result.GetResult<Prisma.$peoplePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one People that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {peopleFindUniqueOrThrowArgs} args - Arguments to find a People
   * @example
   * // Get one People
   * const people = await prisma.people.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends peopleFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, peopleFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__peopleClient<runtime.Types.Result.GetResult<Prisma.$peoplePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first People that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {peopleFindFirstArgs} args - Arguments to find a People
   * @example
   * // Get one People
   * const people = await prisma.people.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends peopleFindFirstArgs>(args?: Prisma.SelectSubset<T, peopleFindFirstArgs<ExtArgs>>): Prisma.Prisma__peopleClient<runtime.Types.Result.GetResult<Prisma.$peoplePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first People that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {peopleFindFirstOrThrowArgs} args - Arguments to find a People
   * @example
   * // Get one People
   * const people = await prisma.people.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends peopleFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, peopleFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__peopleClient<runtime.Types.Result.GetResult<Prisma.$peoplePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more People that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {peopleFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all People
   * const people = await prisma.people.findMany()
   * 
   * // Get first 10 People
   * const people = await prisma.people.findMany({ take: 10 })
   * 
   * // Only select the `uid`
   * const peopleWithUidOnly = await prisma.people.findMany({ select: { uid: true } })
   * 
   */
  findMany<T extends peopleFindManyArgs>(args?: Prisma.SelectSubset<T, peopleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$peoplePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a People.
   * @param {peopleCreateArgs} args - Arguments to create a People.
   * @example
   * // Create one People
   * const People = await prisma.people.create({
   *   data: {
   *     // ... data to create a People
   *   }
   * })
   * 
   */
  create<T extends peopleCreateArgs>(args: Prisma.SelectSubset<T, peopleCreateArgs<ExtArgs>>): Prisma.Prisma__peopleClient<runtime.Types.Result.GetResult<Prisma.$peoplePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many People.
   * @param {peopleCreateManyArgs} args - Arguments to create many People.
   * @example
   * // Create many People
   * const people = await prisma.people.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends peopleCreateManyArgs>(args?: Prisma.SelectSubset<T, peopleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many People and returns the data saved in the database.
   * @param {peopleCreateManyAndReturnArgs} args - Arguments to create many People.
   * @example
   * // Create many People
   * const people = await prisma.people.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many People and only return the `uid`
   * const peopleWithUidOnly = await prisma.people.createManyAndReturn({
   *   select: { uid: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends peopleCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, peopleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$peoplePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a People.
   * @param {peopleDeleteArgs} args - Arguments to delete one People.
   * @example
   * // Delete one People
   * const People = await prisma.people.delete({
   *   where: {
   *     // ... filter to delete one People
   *   }
   * })
   * 
   */
  delete<T extends peopleDeleteArgs>(args: Prisma.SelectSubset<T, peopleDeleteArgs<ExtArgs>>): Prisma.Prisma__peopleClient<runtime.Types.Result.GetResult<Prisma.$peoplePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one People.
   * @param {peopleUpdateArgs} args - Arguments to update one People.
   * @example
   * // Update one People
   * const people = await prisma.people.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends peopleUpdateArgs>(args: Prisma.SelectSubset<T, peopleUpdateArgs<ExtArgs>>): Prisma.Prisma__peopleClient<runtime.Types.Result.GetResult<Prisma.$peoplePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more People.
   * @param {peopleDeleteManyArgs} args - Arguments to filter People to delete.
   * @example
   * // Delete a few People
   * const { count } = await prisma.people.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends peopleDeleteManyArgs>(args?: Prisma.SelectSubset<T, peopleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more People.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {peopleUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many People
   * const people = await prisma.people.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends peopleUpdateManyArgs>(args: Prisma.SelectSubset<T, peopleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more People and returns the data updated in the database.
   * @param {peopleUpdateManyAndReturnArgs} args - Arguments to update many People.
   * @example
   * // Update many People
   * const people = await prisma.people.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more People and only return the `uid`
   * const peopleWithUidOnly = await prisma.people.updateManyAndReturn({
   *   select: { uid: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends peopleUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, peopleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$peoplePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one People.
   * @param {peopleUpsertArgs} args - Arguments to update or create a People.
   * @example
   * // Update or create a People
   * const people = await prisma.people.upsert({
   *   create: {
   *     // ... data to create a People
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the People we want to update
   *   }
   * })
   */
  upsert<T extends peopleUpsertArgs>(args: Prisma.SelectSubset<T, peopleUpsertArgs<ExtArgs>>): Prisma.Prisma__peopleClient<runtime.Types.Result.GetResult<Prisma.$peoplePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of People.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {peopleCountArgs} args - Arguments to filter People to count.
   * @example
   * // Count the number of People
   * const count = await prisma.people.count({
   *   where: {
   *     // ... the filter for the People we want to count
   *   }
   * })
  **/
  count<T extends peopleCountArgs>(
    args?: Prisma.Subset<T, peopleCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PeopleCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a People.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PeopleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PeopleAggregateArgs>(args: Prisma.Subset<T, PeopleAggregateArgs>): Prisma.PrismaPromise<GetPeopleAggregateType<T>>

  /**
   * Group by People.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {peopleGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends peopleGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: peopleGroupByArgs['orderBy'] }
      : { orderBy?: peopleGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, peopleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPeopleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the people model
 */
readonly fields: peopleFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for people.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__peopleClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  leaguemembers<T extends Prisma.people$leaguemembersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.people$leaguemembersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$leaguemembersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  leagues<T extends Prisma.people$leaguesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.people$leaguesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$leaguesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  picks<T extends Prisma.people$picksArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.people$picksArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$picksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the people model
 */
export interface peopleFieldRefs {
  readonly uid: Prisma.FieldRef<"people", 'Int'>
  readonly username: Prisma.FieldRef<"people", 'String'>
  readonly fname: Prisma.FieldRef<"people", 'String'>
  readonly lname: Prisma.FieldRef<"people", 'String'>
  readonly email: Prisma.FieldRef<"people", 'String'>
  readonly season: Prisma.FieldRef<"people", 'Int'>
  readonly email2: Prisma.FieldRef<"people", 'String'>
  readonly google_photo_url: Prisma.FieldRef<"people", 'String'>
  readonly google_email: Prisma.FieldRef<"people", 'String'>
  readonly google_userid: Prisma.FieldRef<"people", 'String'>
  readonly supabase_id: Prisma.FieldRef<"people", 'String'>
}
    

// Custom InputTypes
/**
 * people findUnique
 */
export type peopleFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the people
   */
  select?: Prisma.peopleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the people
   */
  omit?: Prisma.peopleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.peopleInclude<ExtArgs> | null
  /**
   * Filter, which people to fetch.
   */
  where: Prisma.peopleWhereUniqueInput
}

/**
 * people findUniqueOrThrow
 */
export type peopleFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the people
   */
  select?: Prisma.peopleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the people
   */
  omit?: Prisma.peopleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.peopleInclude<ExtArgs> | null
  /**
   * Filter, which people to fetch.
   */
  where: Prisma.peopleWhereUniqueInput
}

/**
 * people findFirst
 */
export type peopleFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the people
   */
  select?: Prisma.peopleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the people
   */
  omit?: Prisma.peopleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.peopleInclude<ExtArgs> | null
  /**
   * Filter, which people to fetch.
   */
  where?: Prisma.peopleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of people to fetch.
   */
  orderBy?: Prisma.peopleOrderByWithRelationInput | Prisma.peopleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for people.
   */
  cursor?: Prisma.peopleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` people from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` people.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of people.
   */
  distinct?: Prisma.PeopleScalarFieldEnum | Prisma.PeopleScalarFieldEnum[]
}

/**
 * people findFirstOrThrow
 */
export type peopleFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the people
   */
  select?: Prisma.peopleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the people
   */
  omit?: Prisma.peopleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.peopleInclude<ExtArgs> | null
  /**
   * Filter, which people to fetch.
   */
  where?: Prisma.peopleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of people to fetch.
   */
  orderBy?: Prisma.peopleOrderByWithRelationInput | Prisma.peopleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for people.
   */
  cursor?: Prisma.peopleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` people from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` people.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of people.
   */
  distinct?: Prisma.PeopleScalarFieldEnum | Prisma.PeopleScalarFieldEnum[]
}

/**
 * people findMany
 */
export type peopleFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the people
   */
  select?: Prisma.peopleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the people
   */
  omit?: Prisma.peopleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.peopleInclude<ExtArgs> | null
  /**
   * Filter, which people to fetch.
   */
  where?: Prisma.peopleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of people to fetch.
   */
  orderBy?: Prisma.peopleOrderByWithRelationInput | Prisma.peopleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing people.
   */
  cursor?: Prisma.peopleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` people from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` people.
   */
  skip?: number
  distinct?: Prisma.PeopleScalarFieldEnum | Prisma.PeopleScalarFieldEnum[]
}

/**
 * people create
 */
export type peopleCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the people
   */
  select?: Prisma.peopleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the people
   */
  omit?: Prisma.peopleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.peopleInclude<ExtArgs> | null
  /**
   * The data needed to create a people.
   */
  data: Prisma.XOR<Prisma.peopleCreateInput, Prisma.peopleUncheckedCreateInput>
}

/**
 * people createMany
 */
export type peopleCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many people.
   */
  data: Prisma.peopleCreateManyInput | Prisma.peopleCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * people createManyAndReturn
 */
export type peopleCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the people
   */
  select?: Prisma.peopleSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the people
   */
  omit?: Prisma.peopleOmit<ExtArgs> | null
  /**
   * The data used to create many people.
   */
  data: Prisma.peopleCreateManyInput | Prisma.peopleCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * people update
 */
export type peopleUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the people
   */
  select?: Prisma.peopleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the people
   */
  omit?: Prisma.peopleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.peopleInclude<ExtArgs> | null
  /**
   * The data needed to update a people.
   */
  data: Prisma.XOR<Prisma.peopleUpdateInput, Prisma.peopleUncheckedUpdateInput>
  /**
   * Choose, which people to update.
   */
  where: Prisma.peopleWhereUniqueInput
}

/**
 * people updateMany
 */
export type peopleUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update people.
   */
  data: Prisma.XOR<Prisma.peopleUpdateManyMutationInput, Prisma.peopleUncheckedUpdateManyInput>
  /**
   * Filter which people to update
   */
  where?: Prisma.peopleWhereInput
  /**
   * Limit how many people to update.
   */
  limit?: number
}

/**
 * people updateManyAndReturn
 */
export type peopleUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the people
   */
  select?: Prisma.peopleSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the people
   */
  omit?: Prisma.peopleOmit<ExtArgs> | null
  /**
   * The data used to update people.
   */
  data: Prisma.XOR<Prisma.peopleUpdateManyMutationInput, Prisma.peopleUncheckedUpdateManyInput>
  /**
   * Filter which people to update
   */
  where?: Prisma.peopleWhereInput
  /**
   * Limit how many people to update.
   */
  limit?: number
}

/**
 * people upsert
 */
export type peopleUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the people
   */
  select?: Prisma.peopleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the people
   */
  omit?: Prisma.peopleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.peopleInclude<ExtArgs> | null
  /**
   * The filter to search for the people to update in case it exists.
   */
  where: Prisma.peopleWhereUniqueInput
  /**
   * In case the people found by the `where` argument doesn't exist, create a new people with this data.
   */
  create: Prisma.XOR<Prisma.peopleCreateInput, Prisma.peopleUncheckedCreateInput>
  /**
   * In case the people was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.peopleUpdateInput, Prisma.peopleUncheckedUpdateInput>
}

/**
 * people delete
 */
export type peopleDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the people
   */
  select?: Prisma.peopleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the people
   */
  omit?: Prisma.peopleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.peopleInclude<ExtArgs> | null
  /**
   * Filter which people to delete.
   */
  where: Prisma.peopleWhereUniqueInput
}

/**
 * people deleteMany
 */
export type peopleDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which people to delete
   */
  where?: Prisma.peopleWhereInput
  /**
   * Limit how many people to delete.
   */
  limit?: number
}

/**
 * people.leaguemembers
 */
export type people$leaguemembersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaguemembers
   */
  select?: Prisma.leaguemembersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaguemembers
   */
  omit?: Prisma.leaguemembersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.leaguemembersInclude<ExtArgs> | null
  where?: Prisma.leaguemembersWhereInput
  orderBy?: Prisma.leaguemembersOrderByWithRelationInput | Prisma.leaguemembersOrderByWithRelationInput[]
  cursor?: Prisma.leaguemembersWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.LeaguemembersScalarFieldEnum | Prisma.LeaguemembersScalarFieldEnum[]
}

/**
 * people.leagues
 */
export type people$leaguesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leagues
   */
  select?: Prisma.leaguesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leagues
   */
  omit?: Prisma.leaguesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.leaguesInclude<ExtArgs> | null
  where?: Prisma.leaguesWhereInput
  orderBy?: Prisma.leaguesOrderByWithRelationInput | Prisma.leaguesOrderByWithRelationInput[]
  cursor?: Prisma.leaguesWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.LeaguesScalarFieldEnum | Prisma.LeaguesScalarFieldEnum[]
}

/**
 * people.picks
 */
export type people$picksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the picks
   */
  select?: Prisma.picksSelect<ExtArgs> | null
  /**
   * Omit specific fields from the picks
   */
  omit?: Prisma.picksOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.picksInclude<ExtArgs> | null
  where?: Prisma.picksWhereInput
  orderBy?: Prisma.picksOrderByWithRelationInput | Prisma.picksOrderByWithRelationInput[]
  cursor?: Prisma.picksWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PicksScalarFieldEnum | Prisma.PicksScalarFieldEnum[]
}

/**
 * people without action
 */
export type peopleDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the people
   */
  select?: Prisma.peopleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the people
   */
  omit?: Prisma.peopleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.peopleInclude<ExtArgs> | null
}
