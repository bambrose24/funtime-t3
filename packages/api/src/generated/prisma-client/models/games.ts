
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `games` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model games
 * 
 */
export type gamesModel = runtime.Types.Result.DefaultSelection<Prisma.$gamesPayload>

export type AggregateGames = {
  _count: GamesCountAggregateOutputType | null
  _avg: GamesAvgAggregateOutputType | null
  _sum: GamesSumAggregateOutputType | null
  _min: GamesMinAggregateOutputType | null
  _max: GamesMaxAggregateOutputType | null
}

export type GamesAvgAggregateOutputType = {
  gid: number | null
  season: number | null
  week: number | null
  home: number | null
  away: number | null
  homescore: number | null
  awayscore: number | null
  winner: number | null
  seconds: number | null
  current_quarter_seconds_remaining: number | null
  current_quarter: number | null
  msf_id: number | null
  espn_id: number | null
}

export type GamesSumAggregateOutputType = {
  gid: number | null
  season: number | null
  week: number | null
  home: number | null
  away: number | null
  homescore: number | null
  awayscore: number | null
  winner: number | null
  seconds: number | null
  current_quarter_seconds_remaining: number | null
  current_quarter: number | null
  msf_id: number | null
  espn_id: number | null
}

export type GamesMinAggregateOutputType = {
  gid: number | null
  season: number | null
  week: number | null
  ts: Date | null
  home: number | null
  away: number | null
  homescore: number | null
  awayscore: number | null
  done: boolean | null
  winner: number | null
  international: boolean | null
  seconds: number | null
  current_record: string | null
  is_tiebreaker: boolean | null
  homerecord: string | null
  awayrecord: string | null
  current_quarter_seconds_remaining: number | null
  current_quarter: number | null
  msf_id: number | null
  espn_id: number | null
}

export type GamesMaxAggregateOutputType = {
  gid: number | null
  season: number | null
  week: number | null
  ts: Date | null
  home: number | null
  away: number | null
  homescore: number | null
  awayscore: number | null
  done: boolean | null
  winner: number | null
  international: boolean | null
  seconds: number | null
  current_record: string | null
  is_tiebreaker: boolean | null
  homerecord: string | null
  awayrecord: string | null
  current_quarter_seconds_remaining: number | null
  current_quarter: number | null
  msf_id: number | null
  espn_id: number | null
}

export type GamesCountAggregateOutputType = {
  gid: number
  season: number
  week: number
  ts: number
  home: number
  away: number
  homescore: number
  awayscore: number
  done: number
  winner: number
  international: number
  seconds: number
  current_record: number
  is_tiebreaker: number
  homerecord: number
  awayrecord: number
  current_quarter_seconds_remaining: number
  current_quarter: number
  msf_id: number
  espn_id: number
  _all: number
}


export type GamesAvgAggregateInputType = {
  gid?: true
  season?: true
  week?: true
  home?: true
  away?: true
  homescore?: true
  awayscore?: true
  winner?: true
  seconds?: true
  current_quarter_seconds_remaining?: true
  current_quarter?: true
  msf_id?: true
  espn_id?: true
}

export type GamesSumAggregateInputType = {
  gid?: true
  season?: true
  week?: true
  home?: true
  away?: true
  homescore?: true
  awayscore?: true
  winner?: true
  seconds?: true
  current_quarter_seconds_remaining?: true
  current_quarter?: true
  msf_id?: true
  espn_id?: true
}

export type GamesMinAggregateInputType = {
  gid?: true
  season?: true
  week?: true
  ts?: true
  home?: true
  away?: true
  homescore?: true
  awayscore?: true
  done?: true
  winner?: true
  international?: true
  seconds?: true
  current_record?: true
  is_tiebreaker?: true
  homerecord?: true
  awayrecord?: true
  current_quarter_seconds_remaining?: true
  current_quarter?: true
  msf_id?: true
  espn_id?: true
}

export type GamesMaxAggregateInputType = {
  gid?: true
  season?: true
  week?: true
  ts?: true
  home?: true
  away?: true
  homescore?: true
  awayscore?: true
  done?: true
  winner?: true
  international?: true
  seconds?: true
  current_record?: true
  is_tiebreaker?: true
  homerecord?: true
  awayrecord?: true
  current_quarter_seconds_remaining?: true
  current_quarter?: true
  msf_id?: true
  espn_id?: true
}

export type GamesCountAggregateInputType = {
  gid?: true
  season?: true
  week?: true
  ts?: true
  home?: true
  away?: true
  homescore?: true
  awayscore?: true
  done?: true
  winner?: true
  international?: true
  seconds?: true
  current_record?: true
  is_tiebreaker?: true
  homerecord?: true
  awayrecord?: true
  current_quarter_seconds_remaining?: true
  current_quarter?: true
  msf_id?: true
  espn_id?: true
  _all?: true
}

export type GamesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which games to aggregate.
   */
  where?: Prisma.gamesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of games to fetch.
   */
  orderBy?: Prisma.gamesOrderByWithRelationInput | Prisma.gamesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.gamesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` games from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` games.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned games
  **/
  _count?: true | GamesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: GamesAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: GamesSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: GamesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: GamesMaxAggregateInputType
}

export type GetGamesAggregateType<T extends GamesAggregateArgs> = {
      [P in keyof T & keyof AggregateGames]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGames[P]>
    : Prisma.GetScalarType<T[P], AggregateGames[P]>
}




export type gamesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.gamesWhereInput
  orderBy?: Prisma.gamesOrderByWithAggregationInput | Prisma.gamesOrderByWithAggregationInput[]
  by: Prisma.GamesScalarFieldEnum[] | Prisma.GamesScalarFieldEnum
  having?: Prisma.gamesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: GamesCountAggregateInputType | true
  _avg?: GamesAvgAggregateInputType
  _sum?: GamesSumAggregateInputType
  _min?: GamesMinAggregateInputType
  _max?: GamesMaxAggregateInputType
}

export type GamesGroupByOutputType = {
  gid: number
  season: number
  week: number
  ts: Date
  home: number
  away: number
  homescore: number | null
  awayscore: number | null
  done: boolean | null
  winner: number | null
  international: boolean | null
  seconds: number | null
  current_record: string | null
  is_tiebreaker: boolean | null
  homerecord: string | null
  awayrecord: string | null
  current_quarter_seconds_remaining: number | null
  current_quarter: number | null
  msf_id: number | null
  espn_id: number | null
  _count: GamesCountAggregateOutputType | null
  _avg: GamesAvgAggregateOutputType | null
  _sum: GamesSumAggregateOutputType | null
  _min: GamesMinAggregateOutputType | null
  _max: GamesMaxAggregateOutputType | null
}

type GetGamesGroupByPayload<T extends gamesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<GamesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof GamesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], GamesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], GamesGroupByOutputType[P]>
      }
    >
  > 



export type gamesWhereInput = {
  AND?: Prisma.gamesWhereInput | Prisma.gamesWhereInput[]
  OR?: Prisma.gamesWhereInput[]
  NOT?: Prisma.gamesWhereInput | Prisma.gamesWhereInput[]
  gid?: Prisma.IntFilter<"games"> | number
  season?: Prisma.IntFilter<"games"> | number
  week?: Prisma.IntFilter<"games"> | number
  ts?: Prisma.DateTimeFilter<"games"> | Date | string
  home?: Prisma.IntFilter<"games"> | number
  away?: Prisma.IntFilter<"games"> | number
  homescore?: Prisma.IntNullableFilter<"games"> | number | null
  awayscore?: Prisma.IntNullableFilter<"games"> | number | null
  done?: Prisma.BoolNullableFilter<"games"> | boolean | null
  winner?: Prisma.IntNullableFilter<"games"> | number | null
  international?: Prisma.BoolNullableFilter<"games"> | boolean | null
  seconds?: Prisma.IntNullableFilter<"games"> | number | null
  current_record?: Prisma.StringNullableFilter<"games"> | string | null
  is_tiebreaker?: Prisma.BoolNullableFilter<"games"> | boolean | null
  homerecord?: Prisma.StringNullableFilter<"games"> | string | null
  awayrecord?: Prisma.StringNullableFilter<"games"> | string | null
  current_quarter_seconds_remaining?: Prisma.IntNullableFilter<"games"> | number | null
  current_quarter?: Prisma.IntNullableFilter<"games"> | number | null
  msf_id?: Prisma.IntNullableFilter<"games"> | number | null
  espn_id?: Prisma.IntNullableFilter<"games"> | number | null
  teams_games_homeToteams?: Prisma.XOR<Prisma.TeamsScalarRelationFilter, Prisma.teamsWhereInput>
  teams_games_awayToteams?: Prisma.XOR<Prisma.TeamsScalarRelationFilter, Prisma.teamsWhereInput>
  picks?: Prisma.PicksListRelationFilter
}

export type gamesOrderByWithRelationInput = {
  gid?: Prisma.SortOrder
  season?: Prisma.SortOrder
  week?: Prisma.SortOrder
  ts?: Prisma.SortOrder
  home?: Prisma.SortOrder
  away?: Prisma.SortOrder
  homescore?: Prisma.SortOrderInput | Prisma.SortOrder
  awayscore?: Prisma.SortOrderInput | Prisma.SortOrder
  done?: Prisma.SortOrderInput | Prisma.SortOrder
  winner?: Prisma.SortOrderInput | Prisma.SortOrder
  international?: Prisma.SortOrderInput | Prisma.SortOrder
  seconds?: Prisma.SortOrderInput | Prisma.SortOrder
  current_record?: Prisma.SortOrderInput | Prisma.SortOrder
  is_tiebreaker?: Prisma.SortOrderInput | Prisma.SortOrder
  homerecord?: Prisma.SortOrderInput | Prisma.SortOrder
  awayrecord?: Prisma.SortOrderInput | Prisma.SortOrder
  current_quarter_seconds_remaining?: Prisma.SortOrderInput | Prisma.SortOrder
  current_quarter?: Prisma.SortOrderInput | Prisma.SortOrder
  msf_id?: Prisma.SortOrderInput | Prisma.SortOrder
  espn_id?: Prisma.SortOrderInput | Prisma.SortOrder
  teams_games_homeToteams?: Prisma.teamsOrderByWithRelationInput
  teams_games_awayToteams?: Prisma.teamsOrderByWithRelationInput
  picks?: Prisma.picksOrderByRelationAggregateInput
}

export type gamesWhereUniqueInput = Prisma.AtLeast<{
  gid?: number
  espn_id?: number
  AND?: Prisma.gamesWhereInput | Prisma.gamesWhereInput[]
  OR?: Prisma.gamesWhereInput[]
  NOT?: Prisma.gamesWhereInput | Prisma.gamesWhereInput[]
  season?: Prisma.IntFilter<"games"> | number
  week?: Prisma.IntFilter<"games"> | number
  ts?: Prisma.DateTimeFilter<"games"> | Date | string
  home?: Prisma.IntFilter<"games"> | number
  away?: Prisma.IntFilter<"games"> | number
  homescore?: Prisma.IntNullableFilter<"games"> | number | null
  awayscore?: Prisma.IntNullableFilter<"games"> | number | null
  done?: Prisma.BoolNullableFilter<"games"> | boolean | null
  winner?: Prisma.IntNullableFilter<"games"> | number | null
  international?: Prisma.BoolNullableFilter<"games"> | boolean | null
  seconds?: Prisma.IntNullableFilter<"games"> | number | null
  current_record?: Prisma.StringNullableFilter<"games"> | string | null
  is_tiebreaker?: Prisma.BoolNullableFilter<"games"> | boolean | null
  homerecord?: Prisma.StringNullableFilter<"games"> | string | null
  awayrecord?: Prisma.StringNullableFilter<"games"> | string | null
  current_quarter_seconds_remaining?: Prisma.IntNullableFilter<"games"> | number | null
  current_quarter?: Prisma.IntNullableFilter<"games"> | number | null
  msf_id?: Prisma.IntNullableFilter<"games"> | number | null
  teams_games_homeToteams?: Prisma.XOR<Prisma.TeamsScalarRelationFilter, Prisma.teamsWhereInput>
  teams_games_awayToteams?: Prisma.XOR<Prisma.TeamsScalarRelationFilter, Prisma.teamsWhereInput>
  picks?: Prisma.PicksListRelationFilter
}, "gid" | "espn_id">

export type gamesOrderByWithAggregationInput = {
  gid?: Prisma.SortOrder
  season?: Prisma.SortOrder
  week?: Prisma.SortOrder
  ts?: Prisma.SortOrder
  home?: Prisma.SortOrder
  away?: Prisma.SortOrder
  homescore?: Prisma.SortOrderInput | Prisma.SortOrder
  awayscore?: Prisma.SortOrderInput | Prisma.SortOrder
  done?: Prisma.SortOrderInput | Prisma.SortOrder
  winner?: Prisma.SortOrderInput | Prisma.SortOrder
  international?: Prisma.SortOrderInput | Prisma.SortOrder
  seconds?: Prisma.SortOrderInput | Prisma.SortOrder
  current_record?: Prisma.SortOrderInput | Prisma.SortOrder
  is_tiebreaker?: Prisma.SortOrderInput | Prisma.SortOrder
  homerecord?: Prisma.SortOrderInput | Prisma.SortOrder
  awayrecord?: Prisma.SortOrderInput | Prisma.SortOrder
  current_quarter_seconds_remaining?: Prisma.SortOrderInput | Prisma.SortOrder
  current_quarter?: Prisma.SortOrderInput | Prisma.SortOrder
  msf_id?: Prisma.SortOrderInput | Prisma.SortOrder
  espn_id?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.gamesCountOrderByAggregateInput
  _avg?: Prisma.gamesAvgOrderByAggregateInput
  _max?: Prisma.gamesMaxOrderByAggregateInput
  _min?: Prisma.gamesMinOrderByAggregateInput
  _sum?: Prisma.gamesSumOrderByAggregateInput
}

export type gamesScalarWhereWithAggregatesInput = {
  AND?: Prisma.gamesScalarWhereWithAggregatesInput | Prisma.gamesScalarWhereWithAggregatesInput[]
  OR?: Prisma.gamesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.gamesScalarWhereWithAggregatesInput | Prisma.gamesScalarWhereWithAggregatesInput[]
  gid?: Prisma.IntWithAggregatesFilter<"games"> | number
  season?: Prisma.IntWithAggregatesFilter<"games"> | number
  week?: Prisma.IntWithAggregatesFilter<"games"> | number
  ts?: Prisma.DateTimeWithAggregatesFilter<"games"> | Date | string
  home?: Prisma.IntWithAggregatesFilter<"games"> | number
  away?: Prisma.IntWithAggregatesFilter<"games"> | number
  homescore?: Prisma.IntNullableWithAggregatesFilter<"games"> | number | null
  awayscore?: Prisma.IntNullableWithAggregatesFilter<"games"> | number | null
  done?: Prisma.BoolNullableWithAggregatesFilter<"games"> | boolean | null
  winner?: Prisma.IntNullableWithAggregatesFilter<"games"> | number | null
  international?: Prisma.BoolNullableWithAggregatesFilter<"games"> | boolean | null
  seconds?: Prisma.IntNullableWithAggregatesFilter<"games"> | number | null
  current_record?: Prisma.StringNullableWithAggregatesFilter<"games"> | string | null
  is_tiebreaker?: Prisma.BoolNullableWithAggregatesFilter<"games"> | boolean | null
  homerecord?: Prisma.StringNullableWithAggregatesFilter<"games"> | string | null
  awayrecord?: Prisma.StringNullableWithAggregatesFilter<"games"> | string | null
  current_quarter_seconds_remaining?: Prisma.IntNullableWithAggregatesFilter<"games"> | number | null
  current_quarter?: Prisma.IntNullableWithAggregatesFilter<"games"> | number | null
  msf_id?: Prisma.IntNullableWithAggregatesFilter<"games"> | number | null
  espn_id?: Prisma.IntNullableWithAggregatesFilter<"games"> | number | null
}

export type gamesCreateInput = {
  season: number
  week: number
  ts: Date | string
  homescore?: number | null
  awayscore?: number | null
  done?: boolean | null
  winner?: number | null
  international?: boolean | null
  seconds?: number | null
  current_record?: string | null
  is_tiebreaker?: boolean | null
  homerecord?: string | null
  awayrecord?: string | null
  current_quarter_seconds_remaining?: number | null
  current_quarter?: number | null
  msf_id?: number | null
  espn_id?: number | null
  teams_games_homeToteams: Prisma.teamsCreateNestedOneWithoutGames_games_homeToteamsInput
  teams_games_awayToteams: Prisma.teamsCreateNestedOneWithoutGames_games_awayToteamsInput
  picks?: Prisma.picksCreateNestedManyWithoutGamesInput
}

export type gamesUncheckedCreateInput = {
  gid?: number
  season: number
  week: number
  ts: Date | string
  home: number
  away: number
  homescore?: number | null
  awayscore?: number | null
  done?: boolean | null
  winner?: number | null
  international?: boolean | null
  seconds?: number | null
  current_record?: string | null
  is_tiebreaker?: boolean | null
  homerecord?: string | null
  awayrecord?: string | null
  current_quarter_seconds_remaining?: number | null
  current_quarter?: number | null
  msf_id?: number | null
  espn_id?: number | null
  picks?: Prisma.picksUncheckedCreateNestedManyWithoutGamesInput
}

export type gamesUpdateInput = {
  season?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  homescore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  awayscore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  done?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  winner?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  international?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  seconds?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  current_record?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_tiebreaker?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  homerecord?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  awayrecord?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  current_quarter_seconds_remaining?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  current_quarter?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  msf_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  espn_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  teams_games_homeToteams?: Prisma.teamsUpdateOneRequiredWithoutGames_games_homeToteamsNestedInput
  teams_games_awayToteams?: Prisma.teamsUpdateOneRequiredWithoutGames_games_awayToteamsNestedInput
  picks?: Prisma.picksUpdateManyWithoutGamesNestedInput
}

export type gamesUncheckedUpdateInput = {
  gid?: Prisma.IntFieldUpdateOperationsInput | number
  season?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  home?: Prisma.IntFieldUpdateOperationsInput | number
  away?: Prisma.IntFieldUpdateOperationsInput | number
  homescore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  awayscore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  done?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  winner?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  international?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  seconds?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  current_record?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_tiebreaker?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  homerecord?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  awayrecord?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  current_quarter_seconds_remaining?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  current_quarter?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  msf_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  espn_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  picks?: Prisma.picksUncheckedUpdateManyWithoutGamesNestedInput
}

export type gamesCreateManyInput = {
  gid?: number
  season: number
  week: number
  ts: Date | string
  home: number
  away: number
  homescore?: number | null
  awayscore?: number | null
  done?: boolean | null
  winner?: number | null
  international?: boolean | null
  seconds?: number | null
  current_record?: string | null
  is_tiebreaker?: boolean | null
  homerecord?: string | null
  awayrecord?: string | null
  current_quarter_seconds_remaining?: number | null
  current_quarter?: number | null
  msf_id?: number | null
  espn_id?: number | null
}

export type gamesUpdateManyMutationInput = {
  season?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  homescore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  awayscore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  done?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  winner?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  international?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  seconds?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  current_record?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_tiebreaker?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  homerecord?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  awayrecord?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  current_quarter_seconds_remaining?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  current_quarter?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  msf_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  espn_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type gamesUncheckedUpdateManyInput = {
  gid?: Prisma.IntFieldUpdateOperationsInput | number
  season?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  home?: Prisma.IntFieldUpdateOperationsInput | number
  away?: Prisma.IntFieldUpdateOperationsInput | number
  homescore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  awayscore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  done?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  winner?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  international?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  seconds?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  current_record?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_tiebreaker?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  homerecord?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  awayrecord?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  current_quarter_seconds_remaining?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  current_quarter?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  msf_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  espn_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type gamesCountOrderByAggregateInput = {
  gid?: Prisma.SortOrder
  season?: Prisma.SortOrder
  week?: Prisma.SortOrder
  ts?: Prisma.SortOrder
  home?: Prisma.SortOrder
  away?: Prisma.SortOrder
  homescore?: Prisma.SortOrder
  awayscore?: Prisma.SortOrder
  done?: Prisma.SortOrder
  winner?: Prisma.SortOrder
  international?: Prisma.SortOrder
  seconds?: Prisma.SortOrder
  current_record?: Prisma.SortOrder
  is_tiebreaker?: Prisma.SortOrder
  homerecord?: Prisma.SortOrder
  awayrecord?: Prisma.SortOrder
  current_quarter_seconds_remaining?: Prisma.SortOrder
  current_quarter?: Prisma.SortOrder
  msf_id?: Prisma.SortOrder
  espn_id?: Prisma.SortOrder
}

export type gamesAvgOrderByAggregateInput = {
  gid?: Prisma.SortOrder
  season?: Prisma.SortOrder
  week?: Prisma.SortOrder
  home?: Prisma.SortOrder
  away?: Prisma.SortOrder
  homescore?: Prisma.SortOrder
  awayscore?: Prisma.SortOrder
  winner?: Prisma.SortOrder
  seconds?: Prisma.SortOrder
  current_quarter_seconds_remaining?: Prisma.SortOrder
  current_quarter?: Prisma.SortOrder
  msf_id?: Prisma.SortOrder
  espn_id?: Prisma.SortOrder
}

export type gamesMaxOrderByAggregateInput = {
  gid?: Prisma.SortOrder
  season?: Prisma.SortOrder
  week?: Prisma.SortOrder
  ts?: Prisma.SortOrder
  home?: Prisma.SortOrder
  away?: Prisma.SortOrder
  homescore?: Prisma.SortOrder
  awayscore?: Prisma.SortOrder
  done?: Prisma.SortOrder
  winner?: Prisma.SortOrder
  international?: Prisma.SortOrder
  seconds?: Prisma.SortOrder
  current_record?: Prisma.SortOrder
  is_tiebreaker?: Prisma.SortOrder
  homerecord?: Prisma.SortOrder
  awayrecord?: Prisma.SortOrder
  current_quarter_seconds_remaining?: Prisma.SortOrder
  current_quarter?: Prisma.SortOrder
  msf_id?: Prisma.SortOrder
  espn_id?: Prisma.SortOrder
}

export type gamesMinOrderByAggregateInput = {
  gid?: Prisma.SortOrder
  season?: Prisma.SortOrder
  week?: Prisma.SortOrder
  ts?: Prisma.SortOrder
  home?: Prisma.SortOrder
  away?: Prisma.SortOrder
  homescore?: Prisma.SortOrder
  awayscore?: Prisma.SortOrder
  done?: Prisma.SortOrder
  winner?: Prisma.SortOrder
  international?: Prisma.SortOrder
  seconds?: Prisma.SortOrder
  current_record?: Prisma.SortOrder
  is_tiebreaker?: Prisma.SortOrder
  homerecord?: Prisma.SortOrder
  awayrecord?: Prisma.SortOrder
  current_quarter_seconds_remaining?: Prisma.SortOrder
  current_quarter?: Prisma.SortOrder
  msf_id?: Prisma.SortOrder
  espn_id?: Prisma.SortOrder
}

export type gamesSumOrderByAggregateInput = {
  gid?: Prisma.SortOrder
  season?: Prisma.SortOrder
  week?: Prisma.SortOrder
  home?: Prisma.SortOrder
  away?: Prisma.SortOrder
  homescore?: Prisma.SortOrder
  awayscore?: Prisma.SortOrder
  winner?: Prisma.SortOrder
  seconds?: Prisma.SortOrder
  current_quarter_seconds_remaining?: Prisma.SortOrder
  current_quarter?: Prisma.SortOrder
  msf_id?: Prisma.SortOrder
  espn_id?: Prisma.SortOrder
}

export type GamesScalarRelationFilter = {
  is?: Prisma.gamesWhereInput
  isNot?: Prisma.gamesWhereInput
}

export type GamesListRelationFilter = {
  every?: Prisma.gamesWhereInput
  some?: Prisma.gamesWhereInput
  none?: Prisma.gamesWhereInput
}

export type gamesOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type NullableBoolFieldUpdateOperationsInput = {
  set?: boolean | null
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type gamesCreateNestedOneWithoutPicksInput = {
  create?: Prisma.XOR<Prisma.gamesCreateWithoutPicksInput, Prisma.gamesUncheckedCreateWithoutPicksInput>
  connectOrCreate?: Prisma.gamesCreateOrConnectWithoutPicksInput
  connect?: Prisma.gamesWhereUniqueInput
}

export type gamesUpdateOneRequiredWithoutPicksNestedInput = {
  create?: Prisma.XOR<Prisma.gamesCreateWithoutPicksInput, Prisma.gamesUncheckedCreateWithoutPicksInput>
  connectOrCreate?: Prisma.gamesCreateOrConnectWithoutPicksInput
  upsert?: Prisma.gamesUpsertWithoutPicksInput
  connect?: Prisma.gamesWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.gamesUpdateToOneWithWhereWithoutPicksInput, Prisma.gamesUpdateWithoutPicksInput>, Prisma.gamesUncheckedUpdateWithoutPicksInput>
}

export type gamesCreateNestedManyWithoutTeams_games_homeToteamsInput = {
  create?: Prisma.XOR<Prisma.gamesCreateWithoutTeams_games_homeToteamsInput, Prisma.gamesUncheckedCreateWithoutTeams_games_homeToteamsInput> | Prisma.gamesCreateWithoutTeams_games_homeToteamsInput[] | Prisma.gamesUncheckedCreateWithoutTeams_games_homeToteamsInput[]
  connectOrCreate?: Prisma.gamesCreateOrConnectWithoutTeams_games_homeToteamsInput | Prisma.gamesCreateOrConnectWithoutTeams_games_homeToteamsInput[]
  createMany?: Prisma.gamesCreateManyTeams_games_homeToteamsInputEnvelope
  connect?: Prisma.gamesWhereUniqueInput | Prisma.gamesWhereUniqueInput[]
}

export type gamesCreateNestedManyWithoutTeams_games_awayToteamsInput = {
  create?: Prisma.XOR<Prisma.gamesCreateWithoutTeams_games_awayToteamsInput, Prisma.gamesUncheckedCreateWithoutTeams_games_awayToteamsInput> | Prisma.gamesCreateWithoutTeams_games_awayToteamsInput[] | Prisma.gamesUncheckedCreateWithoutTeams_games_awayToteamsInput[]
  connectOrCreate?: Prisma.gamesCreateOrConnectWithoutTeams_games_awayToteamsInput | Prisma.gamesCreateOrConnectWithoutTeams_games_awayToteamsInput[]
  createMany?: Prisma.gamesCreateManyTeams_games_awayToteamsInputEnvelope
  connect?: Prisma.gamesWhereUniqueInput | Prisma.gamesWhereUniqueInput[]
}

export type gamesUncheckedCreateNestedManyWithoutTeams_games_homeToteamsInput = {
  create?: Prisma.XOR<Prisma.gamesCreateWithoutTeams_games_homeToteamsInput, Prisma.gamesUncheckedCreateWithoutTeams_games_homeToteamsInput> | Prisma.gamesCreateWithoutTeams_games_homeToteamsInput[] | Prisma.gamesUncheckedCreateWithoutTeams_games_homeToteamsInput[]
  connectOrCreate?: Prisma.gamesCreateOrConnectWithoutTeams_games_homeToteamsInput | Prisma.gamesCreateOrConnectWithoutTeams_games_homeToteamsInput[]
  createMany?: Prisma.gamesCreateManyTeams_games_homeToteamsInputEnvelope
  connect?: Prisma.gamesWhereUniqueInput | Prisma.gamesWhereUniqueInput[]
}

export type gamesUncheckedCreateNestedManyWithoutTeams_games_awayToteamsInput = {
  create?: Prisma.XOR<Prisma.gamesCreateWithoutTeams_games_awayToteamsInput, Prisma.gamesUncheckedCreateWithoutTeams_games_awayToteamsInput> | Prisma.gamesCreateWithoutTeams_games_awayToteamsInput[] | Prisma.gamesUncheckedCreateWithoutTeams_games_awayToteamsInput[]
  connectOrCreate?: Prisma.gamesCreateOrConnectWithoutTeams_games_awayToteamsInput | Prisma.gamesCreateOrConnectWithoutTeams_games_awayToteamsInput[]
  createMany?: Prisma.gamesCreateManyTeams_games_awayToteamsInputEnvelope
  connect?: Prisma.gamesWhereUniqueInput | Prisma.gamesWhereUniqueInput[]
}

export type gamesUpdateManyWithoutTeams_games_homeToteamsNestedInput = {
  create?: Prisma.XOR<Prisma.gamesCreateWithoutTeams_games_homeToteamsInput, Prisma.gamesUncheckedCreateWithoutTeams_games_homeToteamsInput> | Prisma.gamesCreateWithoutTeams_games_homeToteamsInput[] | Prisma.gamesUncheckedCreateWithoutTeams_games_homeToteamsInput[]
  connectOrCreate?: Prisma.gamesCreateOrConnectWithoutTeams_games_homeToteamsInput | Prisma.gamesCreateOrConnectWithoutTeams_games_homeToteamsInput[]
  upsert?: Prisma.gamesUpsertWithWhereUniqueWithoutTeams_games_homeToteamsInput | Prisma.gamesUpsertWithWhereUniqueWithoutTeams_games_homeToteamsInput[]
  createMany?: Prisma.gamesCreateManyTeams_games_homeToteamsInputEnvelope
  set?: Prisma.gamesWhereUniqueInput | Prisma.gamesWhereUniqueInput[]
  disconnect?: Prisma.gamesWhereUniqueInput | Prisma.gamesWhereUniqueInput[]
  delete?: Prisma.gamesWhereUniqueInput | Prisma.gamesWhereUniqueInput[]
  connect?: Prisma.gamesWhereUniqueInput | Prisma.gamesWhereUniqueInput[]
  update?: Prisma.gamesUpdateWithWhereUniqueWithoutTeams_games_homeToteamsInput | Prisma.gamesUpdateWithWhereUniqueWithoutTeams_games_homeToteamsInput[]
  updateMany?: Prisma.gamesUpdateManyWithWhereWithoutTeams_games_homeToteamsInput | Prisma.gamesUpdateManyWithWhereWithoutTeams_games_homeToteamsInput[]
  deleteMany?: Prisma.gamesScalarWhereInput | Prisma.gamesScalarWhereInput[]
}

export type gamesUpdateManyWithoutTeams_games_awayToteamsNestedInput = {
  create?: Prisma.XOR<Prisma.gamesCreateWithoutTeams_games_awayToteamsInput, Prisma.gamesUncheckedCreateWithoutTeams_games_awayToteamsInput> | Prisma.gamesCreateWithoutTeams_games_awayToteamsInput[] | Prisma.gamesUncheckedCreateWithoutTeams_games_awayToteamsInput[]
  connectOrCreate?: Prisma.gamesCreateOrConnectWithoutTeams_games_awayToteamsInput | Prisma.gamesCreateOrConnectWithoutTeams_games_awayToteamsInput[]
  upsert?: Prisma.gamesUpsertWithWhereUniqueWithoutTeams_games_awayToteamsInput | Prisma.gamesUpsertWithWhereUniqueWithoutTeams_games_awayToteamsInput[]
  createMany?: Prisma.gamesCreateManyTeams_games_awayToteamsInputEnvelope
  set?: Prisma.gamesWhereUniqueInput | Prisma.gamesWhereUniqueInput[]
  disconnect?: Prisma.gamesWhereUniqueInput | Prisma.gamesWhereUniqueInput[]
  delete?: Prisma.gamesWhereUniqueInput | Prisma.gamesWhereUniqueInput[]
  connect?: Prisma.gamesWhereUniqueInput | Prisma.gamesWhereUniqueInput[]
  update?: Prisma.gamesUpdateWithWhereUniqueWithoutTeams_games_awayToteamsInput | Prisma.gamesUpdateWithWhereUniqueWithoutTeams_games_awayToteamsInput[]
  updateMany?: Prisma.gamesUpdateManyWithWhereWithoutTeams_games_awayToteamsInput | Prisma.gamesUpdateManyWithWhereWithoutTeams_games_awayToteamsInput[]
  deleteMany?: Prisma.gamesScalarWhereInput | Prisma.gamesScalarWhereInput[]
}

export type gamesUncheckedUpdateManyWithoutTeams_games_homeToteamsNestedInput = {
  create?: Prisma.XOR<Prisma.gamesCreateWithoutTeams_games_homeToteamsInput, Prisma.gamesUncheckedCreateWithoutTeams_games_homeToteamsInput> | Prisma.gamesCreateWithoutTeams_games_homeToteamsInput[] | Prisma.gamesUncheckedCreateWithoutTeams_games_homeToteamsInput[]
  connectOrCreate?: Prisma.gamesCreateOrConnectWithoutTeams_games_homeToteamsInput | Prisma.gamesCreateOrConnectWithoutTeams_games_homeToteamsInput[]
  upsert?: Prisma.gamesUpsertWithWhereUniqueWithoutTeams_games_homeToteamsInput | Prisma.gamesUpsertWithWhereUniqueWithoutTeams_games_homeToteamsInput[]
  createMany?: Prisma.gamesCreateManyTeams_games_homeToteamsInputEnvelope
  set?: Prisma.gamesWhereUniqueInput | Prisma.gamesWhereUniqueInput[]
  disconnect?: Prisma.gamesWhereUniqueInput | Prisma.gamesWhereUniqueInput[]
  delete?: Prisma.gamesWhereUniqueInput | Prisma.gamesWhereUniqueInput[]
  connect?: Prisma.gamesWhereUniqueInput | Prisma.gamesWhereUniqueInput[]
  update?: Prisma.gamesUpdateWithWhereUniqueWithoutTeams_games_homeToteamsInput | Prisma.gamesUpdateWithWhereUniqueWithoutTeams_games_homeToteamsInput[]
  updateMany?: Prisma.gamesUpdateManyWithWhereWithoutTeams_games_homeToteamsInput | Prisma.gamesUpdateManyWithWhereWithoutTeams_games_homeToteamsInput[]
  deleteMany?: Prisma.gamesScalarWhereInput | Prisma.gamesScalarWhereInput[]
}

export type gamesUncheckedUpdateManyWithoutTeams_games_awayToteamsNestedInput = {
  create?: Prisma.XOR<Prisma.gamesCreateWithoutTeams_games_awayToteamsInput, Prisma.gamesUncheckedCreateWithoutTeams_games_awayToteamsInput> | Prisma.gamesCreateWithoutTeams_games_awayToteamsInput[] | Prisma.gamesUncheckedCreateWithoutTeams_games_awayToteamsInput[]
  connectOrCreate?: Prisma.gamesCreateOrConnectWithoutTeams_games_awayToteamsInput | Prisma.gamesCreateOrConnectWithoutTeams_games_awayToteamsInput[]
  upsert?: Prisma.gamesUpsertWithWhereUniqueWithoutTeams_games_awayToteamsInput | Prisma.gamesUpsertWithWhereUniqueWithoutTeams_games_awayToteamsInput[]
  createMany?: Prisma.gamesCreateManyTeams_games_awayToteamsInputEnvelope
  set?: Prisma.gamesWhereUniqueInput | Prisma.gamesWhereUniqueInput[]
  disconnect?: Prisma.gamesWhereUniqueInput | Prisma.gamesWhereUniqueInput[]
  delete?: Prisma.gamesWhereUniqueInput | Prisma.gamesWhereUniqueInput[]
  connect?: Prisma.gamesWhereUniqueInput | Prisma.gamesWhereUniqueInput[]
  update?: Prisma.gamesUpdateWithWhereUniqueWithoutTeams_games_awayToteamsInput | Prisma.gamesUpdateWithWhereUniqueWithoutTeams_games_awayToteamsInput[]
  updateMany?: Prisma.gamesUpdateManyWithWhereWithoutTeams_games_awayToteamsInput | Prisma.gamesUpdateManyWithWhereWithoutTeams_games_awayToteamsInput[]
  deleteMany?: Prisma.gamesScalarWhereInput | Prisma.gamesScalarWhereInput[]
}

export type gamesCreateWithoutPicksInput = {
  season: number
  week: number
  ts: Date | string
  homescore?: number | null
  awayscore?: number | null
  done?: boolean | null
  winner?: number | null
  international?: boolean | null
  seconds?: number | null
  current_record?: string | null
  is_tiebreaker?: boolean | null
  homerecord?: string | null
  awayrecord?: string | null
  current_quarter_seconds_remaining?: number | null
  current_quarter?: number | null
  msf_id?: number | null
  espn_id?: number | null
  teams_games_homeToteams: Prisma.teamsCreateNestedOneWithoutGames_games_homeToteamsInput
  teams_games_awayToteams: Prisma.teamsCreateNestedOneWithoutGames_games_awayToteamsInput
}

export type gamesUncheckedCreateWithoutPicksInput = {
  gid?: number
  season: number
  week: number
  ts: Date | string
  home: number
  away: number
  homescore?: number | null
  awayscore?: number | null
  done?: boolean | null
  winner?: number | null
  international?: boolean | null
  seconds?: number | null
  current_record?: string | null
  is_tiebreaker?: boolean | null
  homerecord?: string | null
  awayrecord?: string | null
  current_quarter_seconds_remaining?: number | null
  current_quarter?: number | null
  msf_id?: number | null
  espn_id?: number | null
}

export type gamesCreateOrConnectWithoutPicksInput = {
  where: Prisma.gamesWhereUniqueInput
  create: Prisma.XOR<Prisma.gamesCreateWithoutPicksInput, Prisma.gamesUncheckedCreateWithoutPicksInput>
}

export type gamesUpsertWithoutPicksInput = {
  update: Prisma.XOR<Prisma.gamesUpdateWithoutPicksInput, Prisma.gamesUncheckedUpdateWithoutPicksInput>
  create: Prisma.XOR<Prisma.gamesCreateWithoutPicksInput, Prisma.gamesUncheckedCreateWithoutPicksInput>
  where?: Prisma.gamesWhereInput
}

export type gamesUpdateToOneWithWhereWithoutPicksInput = {
  where?: Prisma.gamesWhereInput
  data: Prisma.XOR<Prisma.gamesUpdateWithoutPicksInput, Prisma.gamesUncheckedUpdateWithoutPicksInput>
}

export type gamesUpdateWithoutPicksInput = {
  season?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  homescore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  awayscore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  done?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  winner?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  international?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  seconds?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  current_record?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_tiebreaker?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  homerecord?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  awayrecord?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  current_quarter_seconds_remaining?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  current_quarter?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  msf_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  espn_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  teams_games_homeToteams?: Prisma.teamsUpdateOneRequiredWithoutGames_games_homeToteamsNestedInput
  teams_games_awayToteams?: Prisma.teamsUpdateOneRequiredWithoutGames_games_awayToteamsNestedInput
}

export type gamesUncheckedUpdateWithoutPicksInput = {
  gid?: Prisma.IntFieldUpdateOperationsInput | number
  season?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  home?: Prisma.IntFieldUpdateOperationsInput | number
  away?: Prisma.IntFieldUpdateOperationsInput | number
  homescore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  awayscore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  done?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  winner?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  international?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  seconds?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  current_record?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_tiebreaker?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  homerecord?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  awayrecord?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  current_quarter_seconds_remaining?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  current_quarter?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  msf_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  espn_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type gamesCreateWithoutTeams_games_homeToteamsInput = {
  season: number
  week: number
  ts: Date | string
  homescore?: number | null
  awayscore?: number | null
  done?: boolean | null
  winner?: number | null
  international?: boolean | null
  seconds?: number | null
  current_record?: string | null
  is_tiebreaker?: boolean | null
  homerecord?: string | null
  awayrecord?: string | null
  current_quarter_seconds_remaining?: number | null
  current_quarter?: number | null
  msf_id?: number | null
  espn_id?: number | null
  teams_games_awayToteams: Prisma.teamsCreateNestedOneWithoutGames_games_awayToteamsInput
  picks?: Prisma.picksCreateNestedManyWithoutGamesInput
}

export type gamesUncheckedCreateWithoutTeams_games_homeToteamsInput = {
  gid?: number
  season: number
  week: number
  ts: Date | string
  away: number
  homescore?: number | null
  awayscore?: number | null
  done?: boolean | null
  winner?: number | null
  international?: boolean | null
  seconds?: number | null
  current_record?: string | null
  is_tiebreaker?: boolean | null
  homerecord?: string | null
  awayrecord?: string | null
  current_quarter_seconds_remaining?: number | null
  current_quarter?: number | null
  msf_id?: number | null
  espn_id?: number | null
  picks?: Prisma.picksUncheckedCreateNestedManyWithoutGamesInput
}

export type gamesCreateOrConnectWithoutTeams_games_homeToteamsInput = {
  where: Prisma.gamesWhereUniqueInput
  create: Prisma.XOR<Prisma.gamesCreateWithoutTeams_games_homeToteamsInput, Prisma.gamesUncheckedCreateWithoutTeams_games_homeToteamsInput>
}

export type gamesCreateManyTeams_games_homeToteamsInputEnvelope = {
  data: Prisma.gamesCreateManyTeams_games_homeToteamsInput | Prisma.gamesCreateManyTeams_games_homeToteamsInput[]
  skipDuplicates?: boolean
}

export type gamesCreateWithoutTeams_games_awayToteamsInput = {
  season: number
  week: number
  ts: Date | string
  homescore?: number | null
  awayscore?: number | null
  done?: boolean | null
  winner?: number | null
  international?: boolean | null
  seconds?: number | null
  current_record?: string | null
  is_tiebreaker?: boolean | null
  homerecord?: string | null
  awayrecord?: string | null
  current_quarter_seconds_remaining?: number | null
  current_quarter?: number | null
  msf_id?: number | null
  espn_id?: number | null
  teams_games_homeToteams: Prisma.teamsCreateNestedOneWithoutGames_games_homeToteamsInput
  picks?: Prisma.picksCreateNestedManyWithoutGamesInput
}

export type gamesUncheckedCreateWithoutTeams_games_awayToteamsInput = {
  gid?: number
  season: number
  week: number
  ts: Date | string
  home: number
  homescore?: number | null
  awayscore?: number | null
  done?: boolean | null
  winner?: number | null
  international?: boolean | null
  seconds?: number | null
  current_record?: string | null
  is_tiebreaker?: boolean | null
  homerecord?: string | null
  awayrecord?: string | null
  current_quarter_seconds_remaining?: number | null
  current_quarter?: number | null
  msf_id?: number | null
  espn_id?: number | null
  picks?: Prisma.picksUncheckedCreateNestedManyWithoutGamesInput
}

export type gamesCreateOrConnectWithoutTeams_games_awayToteamsInput = {
  where: Prisma.gamesWhereUniqueInput
  create: Prisma.XOR<Prisma.gamesCreateWithoutTeams_games_awayToteamsInput, Prisma.gamesUncheckedCreateWithoutTeams_games_awayToteamsInput>
}

export type gamesCreateManyTeams_games_awayToteamsInputEnvelope = {
  data: Prisma.gamesCreateManyTeams_games_awayToteamsInput | Prisma.gamesCreateManyTeams_games_awayToteamsInput[]
  skipDuplicates?: boolean
}

export type gamesUpsertWithWhereUniqueWithoutTeams_games_homeToteamsInput = {
  where: Prisma.gamesWhereUniqueInput
  update: Prisma.XOR<Prisma.gamesUpdateWithoutTeams_games_homeToteamsInput, Prisma.gamesUncheckedUpdateWithoutTeams_games_homeToteamsInput>
  create: Prisma.XOR<Prisma.gamesCreateWithoutTeams_games_homeToteamsInput, Prisma.gamesUncheckedCreateWithoutTeams_games_homeToteamsInput>
}

export type gamesUpdateWithWhereUniqueWithoutTeams_games_homeToteamsInput = {
  where: Prisma.gamesWhereUniqueInput
  data: Prisma.XOR<Prisma.gamesUpdateWithoutTeams_games_homeToteamsInput, Prisma.gamesUncheckedUpdateWithoutTeams_games_homeToteamsInput>
}

export type gamesUpdateManyWithWhereWithoutTeams_games_homeToteamsInput = {
  where: Prisma.gamesScalarWhereInput
  data: Prisma.XOR<Prisma.gamesUpdateManyMutationInput, Prisma.gamesUncheckedUpdateManyWithoutTeams_games_homeToteamsInput>
}

export type gamesScalarWhereInput = {
  AND?: Prisma.gamesScalarWhereInput | Prisma.gamesScalarWhereInput[]
  OR?: Prisma.gamesScalarWhereInput[]
  NOT?: Prisma.gamesScalarWhereInput | Prisma.gamesScalarWhereInput[]
  gid?: Prisma.IntFilter<"games"> | number
  season?: Prisma.IntFilter<"games"> | number
  week?: Prisma.IntFilter<"games"> | number
  ts?: Prisma.DateTimeFilter<"games"> | Date | string
  home?: Prisma.IntFilter<"games"> | number
  away?: Prisma.IntFilter<"games"> | number
  homescore?: Prisma.IntNullableFilter<"games"> | number | null
  awayscore?: Prisma.IntNullableFilter<"games"> | number | null
  done?: Prisma.BoolNullableFilter<"games"> | boolean | null
  winner?: Prisma.IntNullableFilter<"games"> | number | null
  international?: Prisma.BoolNullableFilter<"games"> | boolean | null
  seconds?: Prisma.IntNullableFilter<"games"> | number | null
  current_record?: Prisma.StringNullableFilter<"games"> | string | null
  is_tiebreaker?: Prisma.BoolNullableFilter<"games"> | boolean | null
  homerecord?: Prisma.StringNullableFilter<"games"> | string | null
  awayrecord?: Prisma.StringNullableFilter<"games"> | string | null
  current_quarter_seconds_remaining?: Prisma.IntNullableFilter<"games"> | number | null
  current_quarter?: Prisma.IntNullableFilter<"games"> | number | null
  msf_id?: Prisma.IntNullableFilter<"games"> | number | null
  espn_id?: Prisma.IntNullableFilter<"games"> | number | null
}

export type gamesUpsertWithWhereUniqueWithoutTeams_games_awayToteamsInput = {
  where: Prisma.gamesWhereUniqueInput
  update: Prisma.XOR<Prisma.gamesUpdateWithoutTeams_games_awayToteamsInput, Prisma.gamesUncheckedUpdateWithoutTeams_games_awayToteamsInput>
  create: Prisma.XOR<Prisma.gamesCreateWithoutTeams_games_awayToteamsInput, Prisma.gamesUncheckedCreateWithoutTeams_games_awayToteamsInput>
}

export type gamesUpdateWithWhereUniqueWithoutTeams_games_awayToteamsInput = {
  where: Prisma.gamesWhereUniqueInput
  data: Prisma.XOR<Prisma.gamesUpdateWithoutTeams_games_awayToteamsInput, Prisma.gamesUncheckedUpdateWithoutTeams_games_awayToteamsInput>
}

export type gamesUpdateManyWithWhereWithoutTeams_games_awayToteamsInput = {
  where: Prisma.gamesScalarWhereInput
  data: Prisma.XOR<Prisma.gamesUpdateManyMutationInput, Prisma.gamesUncheckedUpdateManyWithoutTeams_games_awayToteamsInput>
}

export type gamesCreateManyTeams_games_homeToteamsInput = {
  gid?: number
  season: number
  week: number
  ts: Date | string
  away: number
  homescore?: number | null
  awayscore?: number | null
  done?: boolean | null
  winner?: number | null
  international?: boolean | null
  seconds?: number | null
  current_record?: string | null
  is_tiebreaker?: boolean | null
  homerecord?: string | null
  awayrecord?: string | null
  current_quarter_seconds_remaining?: number | null
  current_quarter?: number | null
  msf_id?: number | null
  espn_id?: number | null
}

export type gamesCreateManyTeams_games_awayToteamsInput = {
  gid?: number
  season: number
  week: number
  ts: Date | string
  home: number
  homescore?: number | null
  awayscore?: number | null
  done?: boolean | null
  winner?: number | null
  international?: boolean | null
  seconds?: number | null
  current_record?: string | null
  is_tiebreaker?: boolean | null
  homerecord?: string | null
  awayrecord?: string | null
  current_quarter_seconds_remaining?: number | null
  current_quarter?: number | null
  msf_id?: number | null
  espn_id?: number | null
}

export type gamesUpdateWithoutTeams_games_homeToteamsInput = {
  season?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  homescore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  awayscore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  done?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  winner?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  international?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  seconds?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  current_record?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_tiebreaker?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  homerecord?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  awayrecord?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  current_quarter_seconds_remaining?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  current_quarter?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  msf_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  espn_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  teams_games_awayToteams?: Prisma.teamsUpdateOneRequiredWithoutGames_games_awayToteamsNestedInput
  picks?: Prisma.picksUpdateManyWithoutGamesNestedInput
}

export type gamesUncheckedUpdateWithoutTeams_games_homeToteamsInput = {
  gid?: Prisma.IntFieldUpdateOperationsInput | number
  season?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  away?: Prisma.IntFieldUpdateOperationsInput | number
  homescore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  awayscore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  done?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  winner?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  international?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  seconds?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  current_record?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_tiebreaker?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  homerecord?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  awayrecord?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  current_quarter_seconds_remaining?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  current_quarter?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  msf_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  espn_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  picks?: Prisma.picksUncheckedUpdateManyWithoutGamesNestedInput
}

export type gamesUncheckedUpdateManyWithoutTeams_games_homeToteamsInput = {
  gid?: Prisma.IntFieldUpdateOperationsInput | number
  season?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  away?: Prisma.IntFieldUpdateOperationsInput | number
  homescore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  awayscore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  done?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  winner?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  international?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  seconds?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  current_record?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_tiebreaker?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  homerecord?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  awayrecord?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  current_quarter_seconds_remaining?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  current_quarter?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  msf_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  espn_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type gamesUpdateWithoutTeams_games_awayToteamsInput = {
  season?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  homescore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  awayscore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  done?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  winner?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  international?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  seconds?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  current_record?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_tiebreaker?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  homerecord?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  awayrecord?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  current_quarter_seconds_remaining?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  current_quarter?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  msf_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  espn_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  teams_games_homeToteams?: Prisma.teamsUpdateOneRequiredWithoutGames_games_homeToteamsNestedInput
  picks?: Prisma.picksUpdateManyWithoutGamesNestedInput
}

export type gamesUncheckedUpdateWithoutTeams_games_awayToteamsInput = {
  gid?: Prisma.IntFieldUpdateOperationsInput | number
  season?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  home?: Prisma.IntFieldUpdateOperationsInput | number
  homescore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  awayscore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  done?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  winner?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  international?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  seconds?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  current_record?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_tiebreaker?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  homerecord?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  awayrecord?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  current_quarter_seconds_remaining?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  current_quarter?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  msf_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  espn_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  picks?: Prisma.picksUncheckedUpdateManyWithoutGamesNestedInput
}

export type gamesUncheckedUpdateManyWithoutTeams_games_awayToteamsInput = {
  gid?: Prisma.IntFieldUpdateOperationsInput | number
  season?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  home?: Prisma.IntFieldUpdateOperationsInput | number
  homescore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  awayscore?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  done?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  winner?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  international?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  seconds?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  current_record?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_tiebreaker?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  homerecord?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  awayrecord?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  current_quarter_seconds_remaining?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  current_quarter?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  msf_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  espn_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}


/**
 * Count Type GamesCountOutputType
 */

export type GamesCountOutputType = {
  picks: number
}

export type GamesCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  picks?: boolean | GamesCountOutputTypeCountPicksArgs
}

/**
 * GamesCountOutputType without action
 */
export type GamesCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GamesCountOutputType
   */
  select?: Prisma.GamesCountOutputTypeSelect<ExtArgs> | null
}

/**
 * GamesCountOutputType without action
 */
export type GamesCountOutputTypeCountPicksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.picksWhereInput
}


export type gamesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  gid?: boolean
  season?: boolean
  week?: boolean
  ts?: boolean
  home?: boolean
  away?: boolean
  homescore?: boolean
  awayscore?: boolean
  done?: boolean
  winner?: boolean
  international?: boolean
  seconds?: boolean
  current_record?: boolean
  is_tiebreaker?: boolean
  homerecord?: boolean
  awayrecord?: boolean
  current_quarter_seconds_remaining?: boolean
  current_quarter?: boolean
  msf_id?: boolean
  espn_id?: boolean
  teams_games_homeToteams?: boolean | Prisma.teamsDefaultArgs<ExtArgs>
  teams_games_awayToteams?: boolean | Prisma.teamsDefaultArgs<ExtArgs>
  picks?: boolean | Prisma.games$picksArgs<ExtArgs>
  _count?: boolean | Prisma.GamesCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["games"]>

export type gamesSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  gid?: boolean
  season?: boolean
  week?: boolean
  ts?: boolean
  home?: boolean
  away?: boolean
  homescore?: boolean
  awayscore?: boolean
  done?: boolean
  winner?: boolean
  international?: boolean
  seconds?: boolean
  current_record?: boolean
  is_tiebreaker?: boolean
  homerecord?: boolean
  awayrecord?: boolean
  current_quarter_seconds_remaining?: boolean
  current_quarter?: boolean
  msf_id?: boolean
  espn_id?: boolean
  teams_games_homeToteams?: boolean | Prisma.teamsDefaultArgs<ExtArgs>
  teams_games_awayToteams?: boolean | Prisma.teamsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["games"]>

export type gamesSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  gid?: boolean
  season?: boolean
  week?: boolean
  ts?: boolean
  home?: boolean
  away?: boolean
  homescore?: boolean
  awayscore?: boolean
  done?: boolean
  winner?: boolean
  international?: boolean
  seconds?: boolean
  current_record?: boolean
  is_tiebreaker?: boolean
  homerecord?: boolean
  awayrecord?: boolean
  current_quarter_seconds_remaining?: boolean
  current_quarter?: boolean
  msf_id?: boolean
  espn_id?: boolean
  teams_games_homeToteams?: boolean | Prisma.teamsDefaultArgs<ExtArgs>
  teams_games_awayToteams?: boolean | Prisma.teamsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["games"]>

export type gamesSelectScalar = {
  gid?: boolean
  season?: boolean
  week?: boolean
  ts?: boolean
  home?: boolean
  away?: boolean
  homescore?: boolean
  awayscore?: boolean
  done?: boolean
  winner?: boolean
  international?: boolean
  seconds?: boolean
  current_record?: boolean
  is_tiebreaker?: boolean
  homerecord?: boolean
  awayrecord?: boolean
  current_quarter_seconds_remaining?: boolean
  current_quarter?: boolean
  msf_id?: boolean
  espn_id?: boolean
}

export type gamesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"gid" | "season" | "week" | "ts" | "home" | "away" | "homescore" | "awayscore" | "done" | "winner" | "international" | "seconds" | "current_record" | "is_tiebreaker" | "homerecord" | "awayrecord" | "current_quarter_seconds_remaining" | "current_quarter" | "msf_id" | "espn_id", ExtArgs["result"]["games"]>
export type gamesInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  teams_games_homeToteams?: boolean | Prisma.teamsDefaultArgs<ExtArgs>
  teams_games_awayToteams?: boolean | Prisma.teamsDefaultArgs<ExtArgs>
  picks?: boolean | Prisma.games$picksArgs<ExtArgs>
  _count?: boolean | Prisma.GamesCountOutputTypeDefaultArgs<ExtArgs>
}
export type gamesIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  teams_games_homeToteams?: boolean | Prisma.teamsDefaultArgs<ExtArgs>
  teams_games_awayToteams?: boolean | Prisma.teamsDefaultArgs<ExtArgs>
}
export type gamesIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  teams_games_homeToteams?: boolean | Prisma.teamsDefaultArgs<ExtArgs>
  teams_games_awayToteams?: boolean | Prisma.teamsDefaultArgs<ExtArgs>
}

export type $gamesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "games"
  objects: {
    teams_games_homeToteams: Prisma.$teamsPayload<ExtArgs>
    teams_games_awayToteams: Prisma.$teamsPayload<ExtArgs>
    picks: Prisma.$picksPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    gid: number
    season: number
    week: number
    ts: Date
    home: number
    away: number
    homescore: number | null
    awayscore: number | null
    done: boolean | null
    winner: number | null
    international: boolean | null
    seconds: number | null
    current_record: string | null
    is_tiebreaker: boolean | null
    homerecord: string | null
    awayrecord: string | null
    current_quarter_seconds_remaining: number | null
    current_quarter: number | null
    msf_id: number | null
    espn_id: number | null
  }, ExtArgs["result"]["games"]>
  composites: {}
}

export type gamesGetPayload<S extends boolean | null | undefined | gamesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$gamesPayload, S>

export type gamesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<gamesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: GamesCountAggregateInputType | true
  }

export interface gamesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['games'], meta: { name: 'games' } }
  /**
   * Find zero or one Games that matches the filter.
   * @param {gamesFindUniqueArgs} args - Arguments to find a Games
   * @example
   * // Get one Games
   * const games = await prisma.games.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends gamesFindUniqueArgs>(args: Prisma.SelectSubset<T, gamesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__gamesClient<runtime.Types.Result.GetResult<Prisma.$gamesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Games that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {gamesFindUniqueOrThrowArgs} args - Arguments to find a Games
   * @example
   * // Get one Games
   * const games = await prisma.games.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends gamesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, gamesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__gamesClient<runtime.Types.Result.GetResult<Prisma.$gamesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Games that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {gamesFindFirstArgs} args - Arguments to find a Games
   * @example
   * // Get one Games
   * const games = await prisma.games.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends gamesFindFirstArgs>(args?: Prisma.SelectSubset<T, gamesFindFirstArgs<ExtArgs>>): Prisma.Prisma__gamesClient<runtime.Types.Result.GetResult<Prisma.$gamesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Games that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {gamesFindFirstOrThrowArgs} args - Arguments to find a Games
   * @example
   * // Get one Games
   * const games = await prisma.games.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends gamesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, gamesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__gamesClient<runtime.Types.Result.GetResult<Prisma.$gamesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Games that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {gamesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Games
   * const games = await prisma.games.findMany()
   * 
   * // Get first 10 Games
   * const games = await prisma.games.findMany({ take: 10 })
   * 
   * // Only select the `gid`
   * const gamesWithGidOnly = await prisma.games.findMany({ select: { gid: true } })
   * 
   */
  findMany<T extends gamesFindManyArgs>(args?: Prisma.SelectSubset<T, gamesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$gamesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Games.
   * @param {gamesCreateArgs} args - Arguments to create a Games.
   * @example
   * // Create one Games
   * const Games = await prisma.games.create({
   *   data: {
   *     // ... data to create a Games
   *   }
   * })
   * 
   */
  create<T extends gamesCreateArgs>(args: Prisma.SelectSubset<T, gamesCreateArgs<ExtArgs>>): Prisma.Prisma__gamesClient<runtime.Types.Result.GetResult<Prisma.$gamesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Games.
   * @param {gamesCreateManyArgs} args - Arguments to create many Games.
   * @example
   * // Create many Games
   * const games = await prisma.games.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends gamesCreateManyArgs>(args?: Prisma.SelectSubset<T, gamesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Games and returns the data saved in the database.
   * @param {gamesCreateManyAndReturnArgs} args - Arguments to create many Games.
   * @example
   * // Create many Games
   * const games = await prisma.games.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Games and only return the `gid`
   * const gamesWithGidOnly = await prisma.games.createManyAndReturn({
   *   select: { gid: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends gamesCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, gamesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$gamesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Games.
   * @param {gamesDeleteArgs} args - Arguments to delete one Games.
   * @example
   * // Delete one Games
   * const Games = await prisma.games.delete({
   *   where: {
   *     // ... filter to delete one Games
   *   }
   * })
   * 
   */
  delete<T extends gamesDeleteArgs>(args: Prisma.SelectSubset<T, gamesDeleteArgs<ExtArgs>>): Prisma.Prisma__gamesClient<runtime.Types.Result.GetResult<Prisma.$gamesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Games.
   * @param {gamesUpdateArgs} args - Arguments to update one Games.
   * @example
   * // Update one Games
   * const games = await prisma.games.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends gamesUpdateArgs>(args: Prisma.SelectSubset<T, gamesUpdateArgs<ExtArgs>>): Prisma.Prisma__gamesClient<runtime.Types.Result.GetResult<Prisma.$gamesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Games.
   * @param {gamesDeleteManyArgs} args - Arguments to filter Games to delete.
   * @example
   * // Delete a few Games
   * const { count } = await prisma.games.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends gamesDeleteManyArgs>(args?: Prisma.SelectSubset<T, gamesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Games.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {gamesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Games
   * const games = await prisma.games.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends gamesUpdateManyArgs>(args: Prisma.SelectSubset<T, gamesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Games and returns the data updated in the database.
   * @param {gamesUpdateManyAndReturnArgs} args - Arguments to update many Games.
   * @example
   * // Update many Games
   * const games = await prisma.games.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Games and only return the `gid`
   * const gamesWithGidOnly = await prisma.games.updateManyAndReturn({
   *   select: { gid: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends gamesUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, gamesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$gamesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Games.
   * @param {gamesUpsertArgs} args - Arguments to update or create a Games.
   * @example
   * // Update or create a Games
   * const games = await prisma.games.upsert({
   *   create: {
   *     // ... data to create a Games
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Games we want to update
   *   }
   * })
   */
  upsert<T extends gamesUpsertArgs>(args: Prisma.SelectSubset<T, gamesUpsertArgs<ExtArgs>>): Prisma.Prisma__gamesClient<runtime.Types.Result.GetResult<Prisma.$gamesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Games.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {gamesCountArgs} args - Arguments to filter Games to count.
   * @example
   * // Count the number of Games
   * const count = await prisma.games.count({
   *   where: {
   *     // ... the filter for the Games we want to count
   *   }
   * })
  **/
  count<T extends gamesCountArgs>(
    args?: Prisma.Subset<T, gamesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], GamesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Games.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GamesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends GamesAggregateArgs>(args: Prisma.Subset<T, GamesAggregateArgs>): Prisma.PrismaPromise<GetGamesAggregateType<T>>

  /**
   * Group by Games.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {gamesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends gamesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: gamesGroupByArgs['orderBy'] }
      : { orderBy?: gamesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, gamesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGamesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the games model
 */
readonly fields: gamesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for games.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__gamesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  teams_games_homeToteams<T extends Prisma.teamsDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.teamsDefaultArgs<ExtArgs>>): Prisma.Prisma__teamsClient<runtime.Types.Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  teams_games_awayToteams<T extends Prisma.teamsDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.teamsDefaultArgs<ExtArgs>>): Prisma.Prisma__teamsClient<runtime.Types.Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  picks<T extends Prisma.games$picksArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.games$picksArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$picksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the games model
 */
export interface gamesFieldRefs {
  readonly gid: Prisma.FieldRef<"games", 'Int'>
  readonly season: Prisma.FieldRef<"games", 'Int'>
  readonly week: Prisma.FieldRef<"games", 'Int'>
  readonly ts: Prisma.FieldRef<"games", 'DateTime'>
  readonly home: Prisma.FieldRef<"games", 'Int'>
  readonly away: Prisma.FieldRef<"games", 'Int'>
  readonly homescore: Prisma.FieldRef<"games", 'Int'>
  readonly awayscore: Prisma.FieldRef<"games", 'Int'>
  readonly done: Prisma.FieldRef<"games", 'Boolean'>
  readonly winner: Prisma.FieldRef<"games", 'Int'>
  readonly international: Prisma.FieldRef<"games", 'Boolean'>
  readonly seconds: Prisma.FieldRef<"games", 'Int'>
  readonly current_record: Prisma.FieldRef<"games", 'String'>
  readonly is_tiebreaker: Prisma.FieldRef<"games", 'Boolean'>
  readonly homerecord: Prisma.FieldRef<"games", 'String'>
  readonly awayrecord: Prisma.FieldRef<"games", 'String'>
  readonly current_quarter_seconds_remaining: Prisma.FieldRef<"games", 'Int'>
  readonly current_quarter: Prisma.FieldRef<"games", 'Int'>
  readonly msf_id: Prisma.FieldRef<"games", 'Int'>
  readonly espn_id: Prisma.FieldRef<"games", 'Int'>
}
    

// Custom InputTypes
/**
 * games findUnique
 */
export type gamesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the games
   */
  select?: Prisma.gamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the games
   */
  omit?: Prisma.gamesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.gamesInclude<ExtArgs> | null
  /**
   * Filter, which games to fetch.
   */
  where: Prisma.gamesWhereUniqueInput
}

/**
 * games findUniqueOrThrow
 */
export type gamesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the games
   */
  select?: Prisma.gamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the games
   */
  omit?: Prisma.gamesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.gamesInclude<ExtArgs> | null
  /**
   * Filter, which games to fetch.
   */
  where: Prisma.gamesWhereUniqueInput
}

/**
 * games findFirst
 */
export type gamesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the games
   */
  select?: Prisma.gamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the games
   */
  omit?: Prisma.gamesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.gamesInclude<ExtArgs> | null
  /**
   * Filter, which games to fetch.
   */
  where?: Prisma.gamesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of games to fetch.
   */
  orderBy?: Prisma.gamesOrderByWithRelationInput | Prisma.gamesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for games.
   */
  cursor?: Prisma.gamesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` games from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` games.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of games.
   */
  distinct?: Prisma.GamesScalarFieldEnum | Prisma.GamesScalarFieldEnum[]
}

/**
 * games findFirstOrThrow
 */
export type gamesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the games
   */
  select?: Prisma.gamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the games
   */
  omit?: Prisma.gamesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.gamesInclude<ExtArgs> | null
  /**
   * Filter, which games to fetch.
   */
  where?: Prisma.gamesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of games to fetch.
   */
  orderBy?: Prisma.gamesOrderByWithRelationInput | Prisma.gamesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for games.
   */
  cursor?: Prisma.gamesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` games from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` games.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of games.
   */
  distinct?: Prisma.GamesScalarFieldEnum | Prisma.GamesScalarFieldEnum[]
}

/**
 * games findMany
 */
export type gamesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the games
   */
  select?: Prisma.gamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the games
   */
  omit?: Prisma.gamesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.gamesInclude<ExtArgs> | null
  /**
   * Filter, which games to fetch.
   */
  where?: Prisma.gamesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of games to fetch.
   */
  orderBy?: Prisma.gamesOrderByWithRelationInput | Prisma.gamesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing games.
   */
  cursor?: Prisma.gamesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` games from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` games.
   */
  skip?: number
  distinct?: Prisma.GamesScalarFieldEnum | Prisma.GamesScalarFieldEnum[]
}

/**
 * games create
 */
export type gamesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the games
   */
  select?: Prisma.gamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the games
   */
  omit?: Prisma.gamesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.gamesInclude<ExtArgs> | null
  /**
   * The data needed to create a games.
   */
  data: Prisma.XOR<Prisma.gamesCreateInput, Prisma.gamesUncheckedCreateInput>
}

/**
 * games createMany
 */
export type gamesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many games.
   */
  data: Prisma.gamesCreateManyInput | Prisma.gamesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * games createManyAndReturn
 */
export type gamesCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the games
   */
  select?: Prisma.gamesSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the games
   */
  omit?: Prisma.gamesOmit<ExtArgs> | null
  /**
   * The data used to create many games.
   */
  data: Prisma.gamesCreateManyInput | Prisma.gamesCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.gamesIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * games update
 */
export type gamesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the games
   */
  select?: Prisma.gamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the games
   */
  omit?: Prisma.gamesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.gamesInclude<ExtArgs> | null
  /**
   * The data needed to update a games.
   */
  data: Prisma.XOR<Prisma.gamesUpdateInput, Prisma.gamesUncheckedUpdateInput>
  /**
   * Choose, which games to update.
   */
  where: Prisma.gamesWhereUniqueInput
}

/**
 * games updateMany
 */
export type gamesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update games.
   */
  data: Prisma.XOR<Prisma.gamesUpdateManyMutationInput, Prisma.gamesUncheckedUpdateManyInput>
  /**
   * Filter which games to update
   */
  where?: Prisma.gamesWhereInput
  /**
   * Limit how many games to update.
   */
  limit?: number
}

/**
 * games updateManyAndReturn
 */
export type gamesUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the games
   */
  select?: Prisma.gamesSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the games
   */
  omit?: Prisma.gamesOmit<ExtArgs> | null
  /**
   * The data used to update games.
   */
  data: Prisma.XOR<Prisma.gamesUpdateManyMutationInput, Prisma.gamesUncheckedUpdateManyInput>
  /**
   * Filter which games to update
   */
  where?: Prisma.gamesWhereInput
  /**
   * Limit how many games to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.gamesIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * games upsert
 */
export type gamesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the games
   */
  select?: Prisma.gamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the games
   */
  omit?: Prisma.gamesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.gamesInclude<ExtArgs> | null
  /**
   * The filter to search for the games to update in case it exists.
   */
  where: Prisma.gamesWhereUniqueInput
  /**
   * In case the games found by the `where` argument doesn't exist, create a new games with this data.
   */
  create: Prisma.XOR<Prisma.gamesCreateInput, Prisma.gamesUncheckedCreateInput>
  /**
   * In case the games was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.gamesUpdateInput, Prisma.gamesUncheckedUpdateInput>
}

/**
 * games delete
 */
export type gamesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the games
   */
  select?: Prisma.gamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the games
   */
  omit?: Prisma.gamesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.gamesInclude<ExtArgs> | null
  /**
   * Filter which games to delete.
   */
  where: Prisma.gamesWhereUniqueInput
}

/**
 * games deleteMany
 */
export type gamesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which games to delete
   */
  where?: Prisma.gamesWhereInput
  /**
   * Limit how many games to delete.
   */
  limit?: number
}

/**
 * games.picks
 */
export type games$picksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the picks
   */
  select?: Prisma.picksSelect<ExtArgs> | null
  /**
   * Omit specific fields from the picks
   */
  omit?: Prisma.picksOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.picksInclude<ExtArgs> | null
  where?: Prisma.picksWhereInput
  orderBy?: Prisma.picksOrderByWithRelationInput | Prisma.picksOrderByWithRelationInput[]
  cursor?: Prisma.picksWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PicksScalarFieldEnum | Prisma.PicksScalarFieldEnum[]
}

/**
 * games without action
 */
export type gamesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the games
   */
  select?: Prisma.gamesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the games
   */
  omit?: Prisma.gamesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.gamesInclude<ExtArgs> | null
}
