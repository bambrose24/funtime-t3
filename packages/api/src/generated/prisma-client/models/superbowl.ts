
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `superbowl` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model superbowl
 * 
 */
export type superbowlModel = runtime.Types.Result.DefaultSelection<Prisma.$superbowlPayload>

export type AggregateSuperbowl = {
  _count: SuperbowlCountAggregateOutputType | null
  _avg: SuperbowlAvgAggregateOutputType | null
  _sum: SuperbowlSumAggregateOutputType | null
  _min: SuperbowlMinAggregateOutputType | null
  _max: SuperbowlMaxAggregateOutputType | null
}

export type SuperbowlAvgAggregateOutputType = {
  pickid: number | null
  uid: number | null
  winner: number | null
  loser: number | null
  score: number | null
  season: number | null
  member_id: number | null
}

export type SuperbowlSumAggregateOutputType = {
  pickid: number | null
  uid: number | null
  winner: number | null
  loser: number | null
  score: number | null
  season: number | null
  member_id: number | null
}

export type SuperbowlMinAggregateOutputType = {
  pickid: number | null
  uid: number | null
  winner: number | null
  loser: number | null
  score: number | null
  ts: Date | null
  season: number | null
  member_id: number | null
}

export type SuperbowlMaxAggregateOutputType = {
  pickid: number | null
  uid: number | null
  winner: number | null
  loser: number | null
  score: number | null
  ts: Date | null
  season: number | null
  member_id: number | null
}

export type SuperbowlCountAggregateOutputType = {
  pickid: number
  uid: number
  winner: number
  loser: number
  score: number
  ts: number
  season: number
  member_id: number
  _all: number
}


export type SuperbowlAvgAggregateInputType = {
  pickid?: true
  uid?: true
  winner?: true
  loser?: true
  score?: true
  season?: true
  member_id?: true
}

export type SuperbowlSumAggregateInputType = {
  pickid?: true
  uid?: true
  winner?: true
  loser?: true
  score?: true
  season?: true
  member_id?: true
}

export type SuperbowlMinAggregateInputType = {
  pickid?: true
  uid?: true
  winner?: true
  loser?: true
  score?: true
  ts?: true
  season?: true
  member_id?: true
}

export type SuperbowlMaxAggregateInputType = {
  pickid?: true
  uid?: true
  winner?: true
  loser?: true
  score?: true
  ts?: true
  season?: true
  member_id?: true
}

export type SuperbowlCountAggregateInputType = {
  pickid?: true
  uid?: true
  winner?: true
  loser?: true
  score?: true
  ts?: true
  season?: true
  member_id?: true
  _all?: true
}

export type SuperbowlAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which superbowl to aggregate.
   */
  where?: Prisma.superbowlWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of superbowls to fetch.
   */
  orderBy?: Prisma.superbowlOrderByWithRelationInput | Prisma.superbowlOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.superbowlWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` superbowls from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` superbowls.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned superbowls
  **/
  _count?: true | SuperbowlCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SuperbowlAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SuperbowlSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SuperbowlMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SuperbowlMaxAggregateInputType
}

export type GetSuperbowlAggregateType<T extends SuperbowlAggregateArgs> = {
      [P in keyof T & keyof AggregateSuperbowl]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSuperbowl[P]>
    : Prisma.GetScalarType<T[P], AggregateSuperbowl[P]>
}




export type superbowlGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.superbowlWhereInput
  orderBy?: Prisma.superbowlOrderByWithAggregationInput | Prisma.superbowlOrderByWithAggregationInput[]
  by: Prisma.SuperbowlScalarFieldEnum[] | Prisma.SuperbowlScalarFieldEnum
  having?: Prisma.superbowlScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SuperbowlCountAggregateInputType | true
  _avg?: SuperbowlAvgAggregateInputType
  _sum?: SuperbowlSumAggregateInputType
  _min?: SuperbowlMinAggregateInputType
  _max?: SuperbowlMaxAggregateInputType
}

export type SuperbowlGroupByOutputType = {
  pickid: number
  uid: number
  winner: number
  loser: number
  score: number
  ts: Date | null
  season: number | null
  member_id: number | null
  _count: SuperbowlCountAggregateOutputType | null
  _avg: SuperbowlAvgAggregateOutputType | null
  _sum: SuperbowlSumAggregateOutputType | null
  _min: SuperbowlMinAggregateOutputType | null
  _max: SuperbowlMaxAggregateOutputType | null
}

type GetSuperbowlGroupByPayload<T extends superbowlGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SuperbowlGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SuperbowlGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SuperbowlGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SuperbowlGroupByOutputType[P]>
      }
    >
  > 



export type superbowlWhereInput = {
  AND?: Prisma.superbowlWhereInput | Prisma.superbowlWhereInput[]
  OR?: Prisma.superbowlWhereInput[]
  NOT?: Prisma.superbowlWhereInput | Prisma.superbowlWhereInput[]
  pickid?: Prisma.IntFilter<"superbowl"> | number
  uid?: Prisma.IntFilter<"superbowl"> | number
  winner?: Prisma.IntFilter<"superbowl"> | number
  loser?: Prisma.IntFilter<"superbowl"> | number
  score?: Prisma.IntFilter<"superbowl"> | number
  ts?: Prisma.DateTimeNullableFilter<"superbowl"> | Date | string | null
  season?: Prisma.IntNullableFilter<"superbowl"> | number | null
  member_id?: Prisma.IntNullableFilter<"superbowl"> | number | null
  teams_superbowl_loserToteams?: Prisma.XOR<Prisma.TeamsScalarRelationFilter, Prisma.teamsWhereInput>
  leaguemembers?: Prisma.XOR<Prisma.LeaguemembersNullableScalarRelationFilter, Prisma.leaguemembersWhereInput> | null
  teams_superbowl_winnerToteams?: Prisma.XOR<Prisma.TeamsScalarRelationFilter, Prisma.teamsWhereInput>
}

export type superbowlOrderByWithRelationInput = {
  pickid?: Prisma.SortOrder
  uid?: Prisma.SortOrder
  winner?: Prisma.SortOrder
  loser?: Prisma.SortOrder
  score?: Prisma.SortOrder
  ts?: Prisma.SortOrderInput | Prisma.SortOrder
  season?: Prisma.SortOrderInput | Prisma.SortOrder
  member_id?: Prisma.SortOrderInput | Prisma.SortOrder
  teams_superbowl_loserToteams?: Prisma.teamsOrderByWithRelationInput
  leaguemembers?: Prisma.leaguemembersOrderByWithRelationInput
  teams_superbowl_winnerToteams?: Prisma.teamsOrderByWithRelationInput
}

export type superbowlWhereUniqueInput = Prisma.AtLeast<{
  pickid?: number
  AND?: Prisma.superbowlWhereInput | Prisma.superbowlWhereInput[]
  OR?: Prisma.superbowlWhereInput[]
  NOT?: Prisma.superbowlWhereInput | Prisma.superbowlWhereInput[]
  uid?: Prisma.IntFilter<"superbowl"> | number
  winner?: Prisma.IntFilter<"superbowl"> | number
  loser?: Prisma.IntFilter<"superbowl"> | number
  score?: Prisma.IntFilter<"superbowl"> | number
  ts?: Prisma.DateTimeNullableFilter<"superbowl"> | Date | string | null
  season?: Prisma.IntNullableFilter<"superbowl"> | number | null
  member_id?: Prisma.IntNullableFilter<"superbowl"> | number | null
  teams_superbowl_loserToteams?: Prisma.XOR<Prisma.TeamsScalarRelationFilter, Prisma.teamsWhereInput>
  leaguemembers?: Prisma.XOR<Prisma.LeaguemembersNullableScalarRelationFilter, Prisma.leaguemembersWhereInput> | null
  teams_superbowl_winnerToteams?: Prisma.XOR<Prisma.TeamsScalarRelationFilter, Prisma.teamsWhereInput>
}, "pickid">

export type superbowlOrderByWithAggregationInput = {
  pickid?: Prisma.SortOrder
  uid?: Prisma.SortOrder
  winner?: Prisma.SortOrder
  loser?: Prisma.SortOrder
  score?: Prisma.SortOrder
  ts?: Prisma.SortOrderInput | Prisma.SortOrder
  season?: Prisma.SortOrderInput | Prisma.SortOrder
  member_id?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.superbowlCountOrderByAggregateInput
  _avg?: Prisma.superbowlAvgOrderByAggregateInput
  _max?: Prisma.superbowlMaxOrderByAggregateInput
  _min?: Prisma.superbowlMinOrderByAggregateInput
  _sum?: Prisma.superbowlSumOrderByAggregateInput
}

export type superbowlScalarWhereWithAggregatesInput = {
  AND?: Prisma.superbowlScalarWhereWithAggregatesInput | Prisma.superbowlScalarWhereWithAggregatesInput[]
  OR?: Prisma.superbowlScalarWhereWithAggregatesInput[]
  NOT?: Prisma.superbowlScalarWhereWithAggregatesInput | Prisma.superbowlScalarWhereWithAggregatesInput[]
  pickid?: Prisma.IntWithAggregatesFilter<"superbowl"> | number
  uid?: Prisma.IntWithAggregatesFilter<"superbowl"> | number
  winner?: Prisma.IntWithAggregatesFilter<"superbowl"> | number
  loser?: Prisma.IntWithAggregatesFilter<"superbowl"> | number
  score?: Prisma.IntWithAggregatesFilter<"superbowl"> | number
  ts?: Prisma.DateTimeNullableWithAggregatesFilter<"superbowl"> | Date | string | null
  season?: Prisma.IntNullableWithAggregatesFilter<"superbowl"> | number | null
  member_id?: Prisma.IntNullableWithAggregatesFilter<"superbowl"> | number | null
}

export type superbowlCreateInput = {
  uid: number
  score: number
  ts?: Date | string | null
  season?: number | null
  teams_superbowl_loserToteams: Prisma.teamsCreateNestedOneWithoutSuperbowl_superbowl_loserToteamsInput
  leaguemembers?: Prisma.leaguemembersCreateNestedOneWithoutSuperbowlInput
  teams_superbowl_winnerToteams: Prisma.teamsCreateNestedOneWithoutSuperbowl_superbowl_winnerToteamsInput
}

export type superbowlUncheckedCreateInput = {
  pickid?: number
  uid: number
  winner: number
  loser: number
  score: number
  ts?: Date | string | null
  season?: number | null
  member_id?: number | null
}

export type superbowlUpdateInput = {
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  score?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  season?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  teams_superbowl_loserToteams?: Prisma.teamsUpdateOneRequiredWithoutSuperbowl_superbowl_loserToteamsNestedInput
  leaguemembers?: Prisma.leaguemembersUpdateOneWithoutSuperbowlNestedInput
  teams_superbowl_winnerToteams?: Prisma.teamsUpdateOneRequiredWithoutSuperbowl_superbowl_winnerToteamsNestedInput
}

export type superbowlUncheckedUpdateInput = {
  pickid?: Prisma.IntFieldUpdateOperationsInput | number
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  winner?: Prisma.IntFieldUpdateOperationsInput | number
  loser?: Prisma.IntFieldUpdateOperationsInput | number
  score?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  season?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  member_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type superbowlCreateManyInput = {
  pickid?: number
  uid: number
  winner: number
  loser: number
  score: number
  ts?: Date | string | null
  season?: number | null
  member_id?: number | null
}

export type superbowlUpdateManyMutationInput = {
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  score?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  season?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type superbowlUncheckedUpdateManyInput = {
  pickid?: Prisma.IntFieldUpdateOperationsInput | number
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  winner?: Prisma.IntFieldUpdateOperationsInput | number
  loser?: Prisma.IntFieldUpdateOperationsInput | number
  score?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  season?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  member_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type SuperbowlListRelationFilter = {
  every?: Prisma.superbowlWhereInput
  some?: Prisma.superbowlWhereInput
  none?: Prisma.superbowlWhereInput
}

export type superbowlOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type superbowlCountOrderByAggregateInput = {
  pickid?: Prisma.SortOrder
  uid?: Prisma.SortOrder
  winner?: Prisma.SortOrder
  loser?: Prisma.SortOrder
  score?: Prisma.SortOrder
  ts?: Prisma.SortOrder
  season?: Prisma.SortOrder
  member_id?: Prisma.SortOrder
}

export type superbowlAvgOrderByAggregateInput = {
  pickid?: Prisma.SortOrder
  uid?: Prisma.SortOrder
  winner?: Prisma.SortOrder
  loser?: Prisma.SortOrder
  score?: Prisma.SortOrder
  season?: Prisma.SortOrder
  member_id?: Prisma.SortOrder
}

export type superbowlMaxOrderByAggregateInput = {
  pickid?: Prisma.SortOrder
  uid?: Prisma.SortOrder
  winner?: Prisma.SortOrder
  loser?: Prisma.SortOrder
  score?: Prisma.SortOrder
  ts?: Prisma.SortOrder
  season?: Prisma.SortOrder
  member_id?: Prisma.SortOrder
}

export type superbowlMinOrderByAggregateInput = {
  pickid?: Prisma.SortOrder
  uid?: Prisma.SortOrder
  winner?: Prisma.SortOrder
  loser?: Prisma.SortOrder
  score?: Prisma.SortOrder
  ts?: Prisma.SortOrder
  season?: Prisma.SortOrder
  member_id?: Prisma.SortOrder
}

export type superbowlSumOrderByAggregateInput = {
  pickid?: Prisma.SortOrder
  uid?: Prisma.SortOrder
  winner?: Prisma.SortOrder
  loser?: Prisma.SortOrder
  score?: Prisma.SortOrder
  season?: Prisma.SortOrder
  member_id?: Prisma.SortOrder
}

export type superbowlCreateNestedManyWithoutLeaguemembersInput = {
  create?: Prisma.XOR<Prisma.superbowlCreateWithoutLeaguemembersInput, Prisma.superbowlUncheckedCreateWithoutLeaguemembersInput> | Prisma.superbowlCreateWithoutLeaguemembersInput[] | Prisma.superbowlUncheckedCreateWithoutLeaguemembersInput[]
  connectOrCreate?: Prisma.superbowlCreateOrConnectWithoutLeaguemembersInput | Prisma.superbowlCreateOrConnectWithoutLeaguemembersInput[]
  createMany?: Prisma.superbowlCreateManyLeaguemembersInputEnvelope
  connect?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
}

export type superbowlUncheckedCreateNestedManyWithoutLeaguemembersInput = {
  create?: Prisma.XOR<Prisma.superbowlCreateWithoutLeaguemembersInput, Prisma.superbowlUncheckedCreateWithoutLeaguemembersInput> | Prisma.superbowlCreateWithoutLeaguemembersInput[] | Prisma.superbowlUncheckedCreateWithoutLeaguemembersInput[]
  connectOrCreate?: Prisma.superbowlCreateOrConnectWithoutLeaguemembersInput | Prisma.superbowlCreateOrConnectWithoutLeaguemembersInput[]
  createMany?: Prisma.superbowlCreateManyLeaguemembersInputEnvelope
  connect?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
}

export type superbowlUpdateManyWithoutLeaguemembersNestedInput = {
  create?: Prisma.XOR<Prisma.superbowlCreateWithoutLeaguemembersInput, Prisma.superbowlUncheckedCreateWithoutLeaguemembersInput> | Prisma.superbowlCreateWithoutLeaguemembersInput[] | Prisma.superbowlUncheckedCreateWithoutLeaguemembersInput[]
  connectOrCreate?: Prisma.superbowlCreateOrConnectWithoutLeaguemembersInput | Prisma.superbowlCreateOrConnectWithoutLeaguemembersInput[]
  upsert?: Prisma.superbowlUpsertWithWhereUniqueWithoutLeaguemembersInput | Prisma.superbowlUpsertWithWhereUniqueWithoutLeaguemembersInput[]
  createMany?: Prisma.superbowlCreateManyLeaguemembersInputEnvelope
  set?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
  disconnect?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
  delete?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
  connect?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
  update?: Prisma.superbowlUpdateWithWhereUniqueWithoutLeaguemembersInput | Prisma.superbowlUpdateWithWhereUniqueWithoutLeaguemembersInput[]
  updateMany?: Prisma.superbowlUpdateManyWithWhereWithoutLeaguemembersInput | Prisma.superbowlUpdateManyWithWhereWithoutLeaguemembersInput[]
  deleteMany?: Prisma.superbowlScalarWhereInput | Prisma.superbowlScalarWhereInput[]
}

export type superbowlUncheckedUpdateManyWithoutLeaguemembersNestedInput = {
  create?: Prisma.XOR<Prisma.superbowlCreateWithoutLeaguemembersInput, Prisma.superbowlUncheckedCreateWithoutLeaguemembersInput> | Prisma.superbowlCreateWithoutLeaguemembersInput[] | Prisma.superbowlUncheckedCreateWithoutLeaguemembersInput[]
  connectOrCreate?: Prisma.superbowlCreateOrConnectWithoutLeaguemembersInput | Prisma.superbowlCreateOrConnectWithoutLeaguemembersInput[]
  upsert?: Prisma.superbowlUpsertWithWhereUniqueWithoutLeaguemembersInput | Prisma.superbowlUpsertWithWhereUniqueWithoutLeaguemembersInput[]
  createMany?: Prisma.superbowlCreateManyLeaguemembersInputEnvelope
  set?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
  disconnect?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
  delete?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
  connect?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
  update?: Prisma.superbowlUpdateWithWhereUniqueWithoutLeaguemembersInput | Prisma.superbowlUpdateWithWhereUniqueWithoutLeaguemembersInput[]
  updateMany?: Prisma.superbowlUpdateManyWithWhereWithoutLeaguemembersInput | Prisma.superbowlUpdateManyWithWhereWithoutLeaguemembersInput[]
  deleteMany?: Prisma.superbowlScalarWhereInput | Prisma.superbowlScalarWhereInput[]
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type superbowlCreateNestedManyWithoutTeams_superbowl_loserToteamsInput = {
  create?: Prisma.XOR<Prisma.superbowlCreateWithoutTeams_superbowl_loserToteamsInput, Prisma.superbowlUncheckedCreateWithoutTeams_superbowl_loserToteamsInput> | Prisma.superbowlCreateWithoutTeams_superbowl_loserToteamsInput[] | Prisma.superbowlUncheckedCreateWithoutTeams_superbowl_loserToteamsInput[]
  connectOrCreate?: Prisma.superbowlCreateOrConnectWithoutTeams_superbowl_loserToteamsInput | Prisma.superbowlCreateOrConnectWithoutTeams_superbowl_loserToteamsInput[]
  createMany?: Prisma.superbowlCreateManyTeams_superbowl_loserToteamsInputEnvelope
  connect?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
}

export type superbowlCreateNestedManyWithoutTeams_superbowl_winnerToteamsInput = {
  create?: Prisma.XOR<Prisma.superbowlCreateWithoutTeams_superbowl_winnerToteamsInput, Prisma.superbowlUncheckedCreateWithoutTeams_superbowl_winnerToteamsInput> | Prisma.superbowlCreateWithoutTeams_superbowl_winnerToteamsInput[] | Prisma.superbowlUncheckedCreateWithoutTeams_superbowl_winnerToteamsInput[]
  connectOrCreate?: Prisma.superbowlCreateOrConnectWithoutTeams_superbowl_winnerToteamsInput | Prisma.superbowlCreateOrConnectWithoutTeams_superbowl_winnerToteamsInput[]
  createMany?: Prisma.superbowlCreateManyTeams_superbowl_winnerToteamsInputEnvelope
  connect?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
}

export type superbowlUncheckedCreateNestedManyWithoutTeams_superbowl_loserToteamsInput = {
  create?: Prisma.XOR<Prisma.superbowlCreateWithoutTeams_superbowl_loserToteamsInput, Prisma.superbowlUncheckedCreateWithoutTeams_superbowl_loserToteamsInput> | Prisma.superbowlCreateWithoutTeams_superbowl_loserToteamsInput[] | Prisma.superbowlUncheckedCreateWithoutTeams_superbowl_loserToteamsInput[]
  connectOrCreate?: Prisma.superbowlCreateOrConnectWithoutTeams_superbowl_loserToteamsInput | Prisma.superbowlCreateOrConnectWithoutTeams_superbowl_loserToteamsInput[]
  createMany?: Prisma.superbowlCreateManyTeams_superbowl_loserToteamsInputEnvelope
  connect?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
}

export type superbowlUncheckedCreateNestedManyWithoutTeams_superbowl_winnerToteamsInput = {
  create?: Prisma.XOR<Prisma.superbowlCreateWithoutTeams_superbowl_winnerToteamsInput, Prisma.superbowlUncheckedCreateWithoutTeams_superbowl_winnerToteamsInput> | Prisma.superbowlCreateWithoutTeams_superbowl_winnerToteamsInput[] | Prisma.superbowlUncheckedCreateWithoutTeams_superbowl_winnerToteamsInput[]
  connectOrCreate?: Prisma.superbowlCreateOrConnectWithoutTeams_superbowl_winnerToteamsInput | Prisma.superbowlCreateOrConnectWithoutTeams_superbowl_winnerToteamsInput[]
  createMany?: Prisma.superbowlCreateManyTeams_superbowl_winnerToteamsInputEnvelope
  connect?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
}

export type superbowlUpdateManyWithoutTeams_superbowl_loserToteamsNestedInput = {
  create?: Prisma.XOR<Prisma.superbowlCreateWithoutTeams_superbowl_loserToteamsInput, Prisma.superbowlUncheckedCreateWithoutTeams_superbowl_loserToteamsInput> | Prisma.superbowlCreateWithoutTeams_superbowl_loserToteamsInput[] | Prisma.superbowlUncheckedCreateWithoutTeams_superbowl_loserToteamsInput[]
  connectOrCreate?: Prisma.superbowlCreateOrConnectWithoutTeams_superbowl_loserToteamsInput | Prisma.superbowlCreateOrConnectWithoutTeams_superbowl_loserToteamsInput[]
  upsert?: Prisma.superbowlUpsertWithWhereUniqueWithoutTeams_superbowl_loserToteamsInput | Prisma.superbowlUpsertWithWhereUniqueWithoutTeams_superbowl_loserToteamsInput[]
  createMany?: Prisma.superbowlCreateManyTeams_superbowl_loserToteamsInputEnvelope
  set?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
  disconnect?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
  delete?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
  connect?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
  update?: Prisma.superbowlUpdateWithWhereUniqueWithoutTeams_superbowl_loserToteamsInput | Prisma.superbowlUpdateWithWhereUniqueWithoutTeams_superbowl_loserToteamsInput[]
  updateMany?: Prisma.superbowlUpdateManyWithWhereWithoutTeams_superbowl_loserToteamsInput | Prisma.superbowlUpdateManyWithWhereWithoutTeams_superbowl_loserToteamsInput[]
  deleteMany?: Prisma.superbowlScalarWhereInput | Prisma.superbowlScalarWhereInput[]
}

export type superbowlUpdateManyWithoutTeams_superbowl_winnerToteamsNestedInput = {
  create?: Prisma.XOR<Prisma.superbowlCreateWithoutTeams_superbowl_winnerToteamsInput, Prisma.superbowlUncheckedCreateWithoutTeams_superbowl_winnerToteamsInput> | Prisma.superbowlCreateWithoutTeams_superbowl_winnerToteamsInput[] | Prisma.superbowlUncheckedCreateWithoutTeams_superbowl_winnerToteamsInput[]
  connectOrCreate?: Prisma.superbowlCreateOrConnectWithoutTeams_superbowl_winnerToteamsInput | Prisma.superbowlCreateOrConnectWithoutTeams_superbowl_winnerToteamsInput[]
  upsert?: Prisma.superbowlUpsertWithWhereUniqueWithoutTeams_superbowl_winnerToteamsInput | Prisma.superbowlUpsertWithWhereUniqueWithoutTeams_superbowl_winnerToteamsInput[]
  createMany?: Prisma.superbowlCreateManyTeams_superbowl_winnerToteamsInputEnvelope
  set?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
  disconnect?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
  delete?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
  connect?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
  update?: Prisma.superbowlUpdateWithWhereUniqueWithoutTeams_superbowl_winnerToteamsInput | Prisma.superbowlUpdateWithWhereUniqueWithoutTeams_superbowl_winnerToteamsInput[]
  updateMany?: Prisma.superbowlUpdateManyWithWhereWithoutTeams_superbowl_winnerToteamsInput | Prisma.superbowlUpdateManyWithWhereWithoutTeams_superbowl_winnerToteamsInput[]
  deleteMany?: Prisma.superbowlScalarWhereInput | Prisma.superbowlScalarWhereInput[]
}

export type superbowlUncheckedUpdateManyWithoutTeams_superbowl_loserToteamsNestedInput = {
  create?: Prisma.XOR<Prisma.superbowlCreateWithoutTeams_superbowl_loserToteamsInput, Prisma.superbowlUncheckedCreateWithoutTeams_superbowl_loserToteamsInput> | Prisma.superbowlCreateWithoutTeams_superbowl_loserToteamsInput[] | Prisma.superbowlUncheckedCreateWithoutTeams_superbowl_loserToteamsInput[]
  connectOrCreate?: Prisma.superbowlCreateOrConnectWithoutTeams_superbowl_loserToteamsInput | Prisma.superbowlCreateOrConnectWithoutTeams_superbowl_loserToteamsInput[]
  upsert?: Prisma.superbowlUpsertWithWhereUniqueWithoutTeams_superbowl_loserToteamsInput | Prisma.superbowlUpsertWithWhereUniqueWithoutTeams_superbowl_loserToteamsInput[]
  createMany?: Prisma.superbowlCreateManyTeams_superbowl_loserToteamsInputEnvelope
  set?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
  disconnect?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
  delete?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
  connect?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
  update?: Prisma.superbowlUpdateWithWhereUniqueWithoutTeams_superbowl_loserToteamsInput | Prisma.superbowlUpdateWithWhereUniqueWithoutTeams_superbowl_loserToteamsInput[]
  updateMany?: Prisma.superbowlUpdateManyWithWhereWithoutTeams_superbowl_loserToteamsInput | Prisma.superbowlUpdateManyWithWhereWithoutTeams_superbowl_loserToteamsInput[]
  deleteMany?: Prisma.superbowlScalarWhereInput | Prisma.superbowlScalarWhereInput[]
}

export type superbowlUncheckedUpdateManyWithoutTeams_superbowl_winnerToteamsNestedInput = {
  create?: Prisma.XOR<Prisma.superbowlCreateWithoutTeams_superbowl_winnerToteamsInput, Prisma.superbowlUncheckedCreateWithoutTeams_superbowl_winnerToteamsInput> | Prisma.superbowlCreateWithoutTeams_superbowl_winnerToteamsInput[] | Prisma.superbowlUncheckedCreateWithoutTeams_superbowl_winnerToteamsInput[]
  connectOrCreate?: Prisma.superbowlCreateOrConnectWithoutTeams_superbowl_winnerToteamsInput | Prisma.superbowlCreateOrConnectWithoutTeams_superbowl_winnerToteamsInput[]
  upsert?: Prisma.superbowlUpsertWithWhereUniqueWithoutTeams_superbowl_winnerToteamsInput | Prisma.superbowlUpsertWithWhereUniqueWithoutTeams_superbowl_winnerToteamsInput[]
  createMany?: Prisma.superbowlCreateManyTeams_superbowl_winnerToteamsInputEnvelope
  set?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
  disconnect?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
  delete?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
  connect?: Prisma.superbowlWhereUniqueInput | Prisma.superbowlWhereUniqueInput[]
  update?: Prisma.superbowlUpdateWithWhereUniqueWithoutTeams_superbowl_winnerToteamsInput | Prisma.superbowlUpdateWithWhereUniqueWithoutTeams_superbowl_winnerToteamsInput[]
  updateMany?: Prisma.superbowlUpdateManyWithWhereWithoutTeams_superbowl_winnerToteamsInput | Prisma.superbowlUpdateManyWithWhereWithoutTeams_superbowl_winnerToteamsInput[]
  deleteMany?: Prisma.superbowlScalarWhereInput | Prisma.superbowlScalarWhereInput[]
}

export type superbowlCreateWithoutLeaguemembersInput = {
  uid: number
  score: number
  ts?: Date | string | null
  season?: number | null
  teams_superbowl_loserToteams: Prisma.teamsCreateNestedOneWithoutSuperbowl_superbowl_loserToteamsInput
  teams_superbowl_winnerToteams: Prisma.teamsCreateNestedOneWithoutSuperbowl_superbowl_winnerToteamsInput
}

export type superbowlUncheckedCreateWithoutLeaguemembersInput = {
  pickid?: number
  uid: number
  winner: number
  loser: number
  score: number
  ts?: Date | string | null
  season?: number | null
}

export type superbowlCreateOrConnectWithoutLeaguemembersInput = {
  where: Prisma.superbowlWhereUniqueInput
  create: Prisma.XOR<Prisma.superbowlCreateWithoutLeaguemembersInput, Prisma.superbowlUncheckedCreateWithoutLeaguemembersInput>
}

export type superbowlCreateManyLeaguemembersInputEnvelope = {
  data: Prisma.superbowlCreateManyLeaguemembersInput | Prisma.superbowlCreateManyLeaguemembersInput[]
  skipDuplicates?: boolean
}

export type superbowlUpsertWithWhereUniqueWithoutLeaguemembersInput = {
  where: Prisma.superbowlWhereUniqueInput
  update: Prisma.XOR<Prisma.superbowlUpdateWithoutLeaguemembersInput, Prisma.superbowlUncheckedUpdateWithoutLeaguemembersInput>
  create: Prisma.XOR<Prisma.superbowlCreateWithoutLeaguemembersInput, Prisma.superbowlUncheckedCreateWithoutLeaguemembersInput>
}

export type superbowlUpdateWithWhereUniqueWithoutLeaguemembersInput = {
  where: Prisma.superbowlWhereUniqueInput
  data: Prisma.XOR<Prisma.superbowlUpdateWithoutLeaguemembersInput, Prisma.superbowlUncheckedUpdateWithoutLeaguemembersInput>
}

export type superbowlUpdateManyWithWhereWithoutLeaguemembersInput = {
  where: Prisma.superbowlScalarWhereInput
  data: Prisma.XOR<Prisma.superbowlUpdateManyMutationInput, Prisma.superbowlUncheckedUpdateManyWithoutLeaguemembersInput>
}

export type superbowlScalarWhereInput = {
  AND?: Prisma.superbowlScalarWhereInput | Prisma.superbowlScalarWhereInput[]
  OR?: Prisma.superbowlScalarWhereInput[]
  NOT?: Prisma.superbowlScalarWhereInput | Prisma.superbowlScalarWhereInput[]
  pickid?: Prisma.IntFilter<"superbowl"> | number
  uid?: Prisma.IntFilter<"superbowl"> | number
  winner?: Prisma.IntFilter<"superbowl"> | number
  loser?: Prisma.IntFilter<"superbowl"> | number
  score?: Prisma.IntFilter<"superbowl"> | number
  ts?: Prisma.DateTimeNullableFilter<"superbowl"> | Date | string | null
  season?: Prisma.IntNullableFilter<"superbowl"> | number | null
  member_id?: Prisma.IntNullableFilter<"superbowl"> | number | null
}

export type superbowlCreateWithoutTeams_superbowl_loserToteamsInput = {
  uid: number
  score: number
  ts?: Date | string | null
  season?: number | null
  leaguemembers?: Prisma.leaguemembersCreateNestedOneWithoutSuperbowlInput
  teams_superbowl_winnerToteams: Prisma.teamsCreateNestedOneWithoutSuperbowl_superbowl_winnerToteamsInput
}

export type superbowlUncheckedCreateWithoutTeams_superbowl_loserToteamsInput = {
  pickid?: number
  uid: number
  winner: number
  score: number
  ts?: Date | string | null
  season?: number | null
  member_id?: number | null
}

export type superbowlCreateOrConnectWithoutTeams_superbowl_loserToteamsInput = {
  where: Prisma.superbowlWhereUniqueInput
  create: Prisma.XOR<Prisma.superbowlCreateWithoutTeams_superbowl_loserToteamsInput, Prisma.superbowlUncheckedCreateWithoutTeams_superbowl_loserToteamsInput>
}

export type superbowlCreateManyTeams_superbowl_loserToteamsInputEnvelope = {
  data: Prisma.superbowlCreateManyTeams_superbowl_loserToteamsInput | Prisma.superbowlCreateManyTeams_superbowl_loserToteamsInput[]
  skipDuplicates?: boolean
}

export type superbowlCreateWithoutTeams_superbowl_winnerToteamsInput = {
  uid: number
  score: number
  ts?: Date | string | null
  season?: number | null
  teams_superbowl_loserToteams: Prisma.teamsCreateNestedOneWithoutSuperbowl_superbowl_loserToteamsInput
  leaguemembers?: Prisma.leaguemembersCreateNestedOneWithoutSuperbowlInput
}

export type superbowlUncheckedCreateWithoutTeams_superbowl_winnerToteamsInput = {
  pickid?: number
  uid: number
  loser: number
  score: number
  ts?: Date | string | null
  season?: number | null
  member_id?: number | null
}

export type superbowlCreateOrConnectWithoutTeams_superbowl_winnerToteamsInput = {
  where: Prisma.superbowlWhereUniqueInput
  create: Prisma.XOR<Prisma.superbowlCreateWithoutTeams_superbowl_winnerToteamsInput, Prisma.superbowlUncheckedCreateWithoutTeams_superbowl_winnerToteamsInput>
}

export type superbowlCreateManyTeams_superbowl_winnerToteamsInputEnvelope = {
  data: Prisma.superbowlCreateManyTeams_superbowl_winnerToteamsInput | Prisma.superbowlCreateManyTeams_superbowl_winnerToteamsInput[]
  skipDuplicates?: boolean
}

export type superbowlUpsertWithWhereUniqueWithoutTeams_superbowl_loserToteamsInput = {
  where: Prisma.superbowlWhereUniqueInput
  update: Prisma.XOR<Prisma.superbowlUpdateWithoutTeams_superbowl_loserToteamsInput, Prisma.superbowlUncheckedUpdateWithoutTeams_superbowl_loserToteamsInput>
  create: Prisma.XOR<Prisma.superbowlCreateWithoutTeams_superbowl_loserToteamsInput, Prisma.superbowlUncheckedCreateWithoutTeams_superbowl_loserToteamsInput>
}

export type superbowlUpdateWithWhereUniqueWithoutTeams_superbowl_loserToteamsInput = {
  where: Prisma.superbowlWhereUniqueInput
  data: Prisma.XOR<Prisma.superbowlUpdateWithoutTeams_superbowl_loserToteamsInput, Prisma.superbowlUncheckedUpdateWithoutTeams_superbowl_loserToteamsInput>
}

export type superbowlUpdateManyWithWhereWithoutTeams_superbowl_loserToteamsInput = {
  where: Prisma.superbowlScalarWhereInput
  data: Prisma.XOR<Prisma.superbowlUpdateManyMutationInput, Prisma.superbowlUncheckedUpdateManyWithoutTeams_superbowl_loserToteamsInput>
}

export type superbowlUpsertWithWhereUniqueWithoutTeams_superbowl_winnerToteamsInput = {
  where: Prisma.superbowlWhereUniqueInput
  update: Prisma.XOR<Prisma.superbowlUpdateWithoutTeams_superbowl_winnerToteamsInput, Prisma.superbowlUncheckedUpdateWithoutTeams_superbowl_winnerToteamsInput>
  create: Prisma.XOR<Prisma.superbowlCreateWithoutTeams_superbowl_winnerToteamsInput, Prisma.superbowlUncheckedCreateWithoutTeams_superbowl_winnerToteamsInput>
}

export type superbowlUpdateWithWhereUniqueWithoutTeams_superbowl_winnerToteamsInput = {
  where: Prisma.superbowlWhereUniqueInput
  data: Prisma.XOR<Prisma.superbowlUpdateWithoutTeams_superbowl_winnerToteamsInput, Prisma.superbowlUncheckedUpdateWithoutTeams_superbowl_winnerToteamsInput>
}

export type superbowlUpdateManyWithWhereWithoutTeams_superbowl_winnerToteamsInput = {
  where: Prisma.superbowlScalarWhereInput
  data: Prisma.XOR<Prisma.superbowlUpdateManyMutationInput, Prisma.superbowlUncheckedUpdateManyWithoutTeams_superbowl_winnerToteamsInput>
}

export type superbowlCreateManyLeaguemembersInput = {
  pickid?: number
  uid: number
  winner: number
  loser: number
  score: number
  ts?: Date | string | null
  season?: number | null
}

export type superbowlUpdateWithoutLeaguemembersInput = {
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  score?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  season?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  teams_superbowl_loserToteams?: Prisma.teamsUpdateOneRequiredWithoutSuperbowl_superbowl_loserToteamsNestedInput
  teams_superbowl_winnerToteams?: Prisma.teamsUpdateOneRequiredWithoutSuperbowl_superbowl_winnerToteamsNestedInput
}

export type superbowlUncheckedUpdateWithoutLeaguemembersInput = {
  pickid?: Prisma.IntFieldUpdateOperationsInput | number
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  winner?: Prisma.IntFieldUpdateOperationsInput | number
  loser?: Prisma.IntFieldUpdateOperationsInput | number
  score?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  season?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type superbowlUncheckedUpdateManyWithoutLeaguemembersInput = {
  pickid?: Prisma.IntFieldUpdateOperationsInput | number
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  winner?: Prisma.IntFieldUpdateOperationsInput | number
  loser?: Prisma.IntFieldUpdateOperationsInput | number
  score?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  season?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type superbowlCreateManyTeams_superbowl_loserToteamsInput = {
  pickid?: number
  uid: number
  winner: number
  score: number
  ts?: Date | string | null
  season?: number | null
  member_id?: number | null
}

export type superbowlCreateManyTeams_superbowl_winnerToteamsInput = {
  pickid?: number
  uid: number
  loser: number
  score: number
  ts?: Date | string | null
  season?: number | null
  member_id?: number | null
}

export type superbowlUpdateWithoutTeams_superbowl_loserToteamsInput = {
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  score?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  season?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  leaguemembers?: Prisma.leaguemembersUpdateOneWithoutSuperbowlNestedInput
  teams_superbowl_winnerToteams?: Prisma.teamsUpdateOneRequiredWithoutSuperbowl_superbowl_winnerToteamsNestedInput
}

export type superbowlUncheckedUpdateWithoutTeams_superbowl_loserToteamsInput = {
  pickid?: Prisma.IntFieldUpdateOperationsInput | number
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  winner?: Prisma.IntFieldUpdateOperationsInput | number
  score?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  season?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  member_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type superbowlUncheckedUpdateManyWithoutTeams_superbowl_loserToteamsInput = {
  pickid?: Prisma.IntFieldUpdateOperationsInput | number
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  winner?: Prisma.IntFieldUpdateOperationsInput | number
  score?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  season?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  member_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type superbowlUpdateWithoutTeams_superbowl_winnerToteamsInput = {
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  score?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  season?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  teams_superbowl_loserToteams?: Prisma.teamsUpdateOneRequiredWithoutSuperbowl_superbowl_loserToteamsNestedInput
  leaguemembers?: Prisma.leaguemembersUpdateOneWithoutSuperbowlNestedInput
}

export type superbowlUncheckedUpdateWithoutTeams_superbowl_winnerToteamsInput = {
  pickid?: Prisma.IntFieldUpdateOperationsInput | number
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  loser?: Prisma.IntFieldUpdateOperationsInput | number
  score?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  season?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  member_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}

export type superbowlUncheckedUpdateManyWithoutTeams_superbowl_winnerToteamsInput = {
  pickid?: Prisma.IntFieldUpdateOperationsInput | number
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  loser?: Prisma.IntFieldUpdateOperationsInput | number
  score?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  season?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  member_id?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
}



export type superbowlSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  pickid?: boolean
  uid?: boolean
  winner?: boolean
  loser?: boolean
  score?: boolean
  ts?: boolean
  season?: boolean
  member_id?: boolean
  teams_superbowl_loserToteams?: boolean | Prisma.teamsDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.superbowl$leaguemembersArgs<ExtArgs>
  teams_superbowl_winnerToteams?: boolean | Prisma.teamsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["superbowl"]>

export type superbowlSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  pickid?: boolean
  uid?: boolean
  winner?: boolean
  loser?: boolean
  score?: boolean
  ts?: boolean
  season?: boolean
  member_id?: boolean
  teams_superbowl_loserToteams?: boolean | Prisma.teamsDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.superbowl$leaguemembersArgs<ExtArgs>
  teams_superbowl_winnerToteams?: boolean | Prisma.teamsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["superbowl"]>

export type superbowlSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  pickid?: boolean
  uid?: boolean
  winner?: boolean
  loser?: boolean
  score?: boolean
  ts?: boolean
  season?: boolean
  member_id?: boolean
  teams_superbowl_loserToteams?: boolean | Prisma.teamsDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.superbowl$leaguemembersArgs<ExtArgs>
  teams_superbowl_winnerToteams?: boolean | Prisma.teamsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["superbowl"]>

export type superbowlSelectScalar = {
  pickid?: boolean
  uid?: boolean
  winner?: boolean
  loser?: boolean
  score?: boolean
  ts?: boolean
  season?: boolean
  member_id?: boolean
}

export type superbowlOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"pickid" | "uid" | "winner" | "loser" | "score" | "ts" | "season" | "member_id", ExtArgs["result"]["superbowl"]>
export type superbowlInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  teams_superbowl_loserToteams?: boolean | Prisma.teamsDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.superbowl$leaguemembersArgs<ExtArgs>
  teams_superbowl_winnerToteams?: boolean | Prisma.teamsDefaultArgs<ExtArgs>
}
export type superbowlIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  teams_superbowl_loserToteams?: boolean | Prisma.teamsDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.superbowl$leaguemembersArgs<ExtArgs>
  teams_superbowl_winnerToteams?: boolean | Prisma.teamsDefaultArgs<ExtArgs>
}
export type superbowlIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  teams_superbowl_loserToteams?: boolean | Prisma.teamsDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.superbowl$leaguemembersArgs<ExtArgs>
  teams_superbowl_winnerToteams?: boolean | Prisma.teamsDefaultArgs<ExtArgs>
}

export type $superbowlPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "superbowl"
  objects: {
    teams_superbowl_loserToteams: Prisma.$teamsPayload<ExtArgs>
    leaguemembers: Prisma.$leaguemembersPayload<ExtArgs> | null
    teams_superbowl_winnerToteams: Prisma.$teamsPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    pickid: number
    uid: number
    winner: number
    loser: number
    score: number
    ts: Date | null
    season: number | null
    member_id: number | null
  }, ExtArgs["result"]["superbowl"]>
  composites: {}
}

export type superbowlGetPayload<S extends boolean | null | undefined | superbowlDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$superbowlPayload, S>

export type superbowlCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<superbowlFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SuperbowlCountAggregateInputType | true
  }

export interface superbowlDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['superbowl'], meta: { name: 'superbowl' } }
  /**
   * Find zero or one Superbowl that matches the filter.
   * @param {superbowlFindUniqueArgs} args - Arguments to find a Superbowl
   * @example
   * // Get one Superbowl
   * const superbowl = await prisma.superbowl.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends superbowlFindUniqueArgs>(args: Prisma.SelectSubset<T, superbowlFindUniqueArgs<ExtArgs>>): Prisma.Prisma__superbowlClient<runtime.Types.Result.GetResult<Prisma.$superbowlPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Superbowl that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {superbowlFindUniqueOrThrowArgs} args - Arguments to find a Superbowl
   * @example
   * // Get one Superbowl
   * const superbowl = await prisma.superbowl.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends superbowlFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, superbowlFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__superbowlClient<runtime.Types.Result.GetResult<Prisma.$superbowlPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Superbowl that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {superbowlFindFirstArgs} args - Arguments to find a Superbowl
   * @example
   * // Get one Superbowl
   * const superbowl = await prisma.superbowl.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends superbowlFindFirstArgs>(args?: Prisma.SelectSubset<T, superbowlFindFirstArgs<ExtArgs>>): Prisma.Prisma__superbowlClient<runtime.Types.Result.GetResult<Prisma.$superbowlPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Superbowl that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {superbowlFindFirstOrThrowArgs} args - Arguments to find a Superbowl
   * @example
   * // Get one Superbowl
   * const superbowl = await prisma.superbowl.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends superbowlFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, superbowlFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__superbowlClient<runtime.Types.Result.GetResult<Prisma.$superbowlPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Superbowls that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {superbowlFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Superbowls
   * const superbowls = await prisma.superbowl.findMany()
   * 
   * // Get first 10 Superbowls
   * const superbowls = await prisma.superbowl.findMany({ take: 10 })
   * 
   * // Only select the `pickid`
   * const superbowlWithPickidOnly = await prisma.superbowl.findMany({ select: { pickid: true } })
   * 
   */
  findMany<T extends superbowlFindManyArgs>(args?: Prisma.SelectSubset<T, superbowlFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$superbowlPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Superbowl.
   * @param {superbowlCreateArgs} args - Arguments to create a Superbowl.
   * @example
   * // Create one Superbowl
   * const Superbowl = await prisma.superbowl.create({
   *   data: {
   *     // ... data to create a Superbowl
   *   }
   * })
   * 
   */
  create<T extends superbowlCreateArgs>(args: Prisma.SelectSubset<T, superbowlCreateArgs<ExtArgs>>): Prisma.Prisma__superbowlClient<runtime.Types.Result.GetResult<Prisma.$superbowlPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Superbowls.
   * @param {superbowlCreateManyArgs} args - Arguments to create many Superbowls.
   * @example
   * // Create many Superbowls
   * const superbowl = await prisma.superbowl.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends superbowlCreateManyArgs>(args?: Prisma.SelectSubset<T, superbowlCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Superbowls and returns the data saved in the database.
   * @param {superbowlCreateManyAndReturnArgs} args - Arguments to create many Superbowls.
   * @example
   * // Create many Superbowls
   * const superbowl = await prisma.superbowl.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Superbowls and only return the `pickid`
   * const superbowlWithPickidOnly = await prisma.superbowl.createManyAndReturn({
   *   select: { pickid: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends superbowlCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, superbowlCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$superbowlPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Superbowl.
   * @param {superbowlDeleteArgs} args - Arguments to delete one Superbowl.
   * @example
   * // Delete one Superbowl
   * const Superbowl = await prisma.superbowl.delete({
   *   where: {
   *     // ... filter to delete one Superbowl
   *   }
   * })
   * 
   */
  delete<T extends superbowlDeleteArgs>(args: Prisma.SelectSubset<T, superbowlDeleteArgs<ExtArgs>>): Prisma.Prisma__superbowlClient<runtime.Types.Result.GetResult<Prisma.$superbowlPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Superbowl.
   * @param {superbowlUpdateArgs} args - Arguments to update one Superbowl.
   * @example
   * // Update one Superbowl
   * const superbowl = await prisma.superbowl.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends superbowlUpdateArgs>(args: Prisma.SelectSubset<T, superbowlUpdateArgs<ExtArgs>>): Prisma.Prisma__superbowlClient<runtime.Types.Result.GetResult<Prisma.$superbowlPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Superbowls.
   * @param {superbowlDeleteManyArgs} args - Arguments to filter Superbowls to delete.
   * @example
   * // Delete a few Superbowls
   * const { count } = await prisma.superbowl.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends superbowlDeleteManyArgs>(args?: Prisma.SelectSubset<T, superbowlDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Superbowls.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {superbowlUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Superbowls
   * const superbowl = await prisma.superbowl.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends superbowlUpdateManyArgs>(args: Prisma.SelectSubset<T, superbowlUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Superbowls and returns the data updated in the database.
   * @param {superbowlUpdateManyAndReturnArgs} args - Arguments to update many Superbowls.
   * @example
   * // Update many Superbowls
   * const superbowl = await prisma.superbowl.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Superbowls and only return the `pickid`
   * const superbowlWithPickidOnly = await prisma.superbowl.updateManyAndReturn({
   *   select: { pickid: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends superbowlUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, superbowlUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$superbowlPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Superbowl.
   * @param {superbowlUpsertArgs} args - Arguments to update or create a Superbowl.
   * @example
   * // Update or create a Superbowl
   * const superbowl = await prisma.superbowl.upsert({
   *   create: {
   *     // ... data to create a Superbowl
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Superbowl we want to update
   *   }
   * })
   */
  upsert<T extends superbowlUpsertArgs>(args: Prisma.SelectSubset<T, superbowlUpsertArgs<ExtArgs>>): Prisma.Prisma__superbowlClient<runtime.Types.Result.GetResult<Prisma.$superbowlPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Superbowls.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {superbowlCountArgs} args - Arguments to filter Superbowls to count.
   * @example
   * // Count the number of Superbowls
   * const count = await prisma.superbowl.count({
   *   where: {
   *     // ... the filter for the Superbowls we want to count
   *   }
   * })
  **/
  count<T extends superbowlCountArgs>(
    args?: Prisma.Subset<T, superbowlCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SuperbowlCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Superbowl.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SuperbowlAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SuperbowlAggregateArgs>(args: Prisma.Subset<T, SuperbowlAggregateArgs>): Prisma.PrismaPromise<GetSuperbowlAggregateType<T>>

  /**
   * Group by Superbowl.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {superbowlGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends superbowlGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: superbowlGroupByArgs['orderBy'] }
      : { orderBy?: superbowlGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, superbowlGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSuperbowlGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the superbowl model
 */
readonly fields: superbowlFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for superbowl.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__superbowlClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  teams_superbowl_loserToteams<T extends Prisma.teamsDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.teamsDefaultArgs<ExtArgs>>): Prisma.Prisma__teamsClient<runtime.Types.Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  leaguemembers<T extends Prisma.superbowl$leaguemembersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.superbowl$leaguemembersArgs<ExtArgs>>): Prisma.Prisma__leaguemembersClient<runtime.Types.Result.GetResult<Prisma.$leaguemembersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  teams_superbowl_winnerToteams<T extends Prisma.teamsDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.teamsDefaultArgs<ExtArgs>>): Prisma.Prisma__teamsClient<runtime.Types.Result.GetResult<Prisma.$teamsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the superbowl model
 */
export interface superbowlFieldRefs {
  readonly pickid: Prisma.FieldRef<"superbowl", 'Int'>
  readonly uid: Prisma.FieldRef<"superbowl", 'Int'>
  readonly winner: Prisma.FieldRef<"superbowl", 'Int'>
  readonly loser: Prisma.FieldRef<"superbowl", 'Int'>
  readonly score: Prisma.FieldRef<"superbowl", 'Int'>
  readonly ts: Prisma.FieldRef<"superbowl", 'DateTime'>
  readonly season: Prisma.FieldRef<"superbowl", 'Int'>
  readonly member_id: Prisma.FieldRef<"superbowl", 'Int'>
}
    

// Custom InputTypes
/**
 * superbowl findUnique
 */
export type superbowlFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the superbowl
   */
  select?: Prisma.superbowlSelect<ExtArgs> | null
  /**
   * Omit specific fields from the superbowl
   */
  omit?: Prisma.superbowlOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.superbowlInclude<ExtArgs> | null
  /**
   * Filter, which superbowl to fetch.
   */
  where: Prisma.superbowlWhereUniqueInput
}

/**
 * superbowl findUniqueOrThrow
 */
export type superbowlFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the superbowl
   */
  select?: Prisma.superbowlSelect<ExtArgs> | null
  /**
   * Omit specific fields from the superbowl
   */
  omit?: Prisma.superbowlOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.superbowlInclude<ExtArgs> | null
  /**
   * Filter, which superbowl to fetch.
   */
  where: Prisma.superbowlWhereUniqueInput
}

/**
 * superbowl findFirst
 */
export type superbowlFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the superbowl
   */
  select?: Prisma.superbowlSelect<ExtArgs> | null
  /**
   * Omit specific fields from the superbowl
   */
  omit?: Prisma.superbowlOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.superbowlInclude<ExtArgs> | null
  /**
   * Filter, which superbowl to fetch.
   */
  where?: Prisma.superbowlWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of superbowls to fetch.
   */
  orderBy?: Prisma.superbowlOrderByWithRelationInput | Prisma.superbowlOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for superbowls.
   */
  cursor?: Prisma.superbowlWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` superbowls from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` superbowls.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of superbowls.
   */
  distinct?: Prisma.SuperbowlScalarFieldEnum | Prisma.SuperbowlScalarFieldEnum[]
}

/**
 * superbowl findFirstOrThrow
 */
export type superbowlFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the superbowl
   */
  select?: Prisma.superbowlSelect<ExtArgs> | null
  /**
   * Omit specific fields from the superbowl
   */
  omit?: Prisma.superbowlOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.superbowlInclude<ExtArgs> | null
  /**
   * Filter, which superbowl to fetch.
   */
  where?: Prisma.superbowlWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of superbowls to fetch.
   */
  orderBy?: Prisma.superbowlOrderByWithRelationInput | Prisma.superbowlOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for superbowls.
   */
  cursor?: Prisma.superbowlWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` superbowls from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` superbowls.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of superbowls.
   */
  distinct?: Prisma.SuperbowlScalarFieldEnum | Prisma.SuperbowlScalarFieldEnum[]
}

/**
 * superbowl findMany
 */
export type superbowlFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the superbowl
   */
  select?: Prisma.superbowlSelect<ExtArgs> | null
  /**
   * Omit specific fields from the superbowl
   */
  omit?: Prisma.superbowlOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.superbowlInclude<ExtArgs> | null
  /**
   * Filter, which superbowls to fetch.
   */
  where?: Prisma.superbowlWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of superbowls to fetch.
   */
  orderBy?: Prisma.superbowlOrderByWithRelationInput | Prisma.superbowlOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing superbowls.
   */
  cursor?: Prisma.superbowlWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` superbowls from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` superbowls.
   */
  skip?: number
  distinct?: Prisma.SuperbowlScalarFieldEnum | Prisma.SuperbowlScalarFieldEnum[]
}

/**
 * superbowl create
 */
export type superbowlCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the superbowl
   */
  select?: Prisma.superbowlSelect<ExtArgs> | null
  /**
   * Omit specific fields from the superbowl
   */
  omit?: Prisma.superbowlOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.superbowlInclude<ExtArgs> | null
  /**
   * The data needed to create a superbowl.
   */
  data: Prisma.XOR<Prisma.superbowlCreateInput, Prisma.superbowlUncheckedCreateInput>
}

/**
 * superbowl createMany
 */
export type superbowlCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many superbowls.
   */
  data: Prisma.superbowlCreateManyInput | Prisma.superbowlCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * superbowl createManyAndReturn
 */
export type superbowlCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the superbowl
   */
  select?: Prisma.superbowlSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the superbowl
   */
  omit?: Prisma.superbowlOmit<ExtArgs> | null
  /**
   * The data used to create many superbowls.
   */
  data: Prisma.superbowlCreateManyInput | Prisma.superbowlCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.superbowlIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * superbowl update
 */
export type superbowlUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the superbowl
   */
  select?: Prisma.superbowlSelect<ExtArgs> | null
  /**
   * Omit specific fields from the superbowl
   */
  omit?: Prisma.superbowlOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.superbowlInclude<ExtArgs> | null
  /**
   * The data needed to update a superbowl.
   */
  data: Prisma.XOR<Prisma.superbowlUpdateInput, Prisma.superbowlUncheckedUpdateInput>
  /**
   * Choose, which superbowl to update.
   */
  where: Prisma.superbowlWhereUniqueInput
}

/**
 * superbowl updateMany
 */
export type superbowlUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update superbowls.
   */
  data: Prisma.XOR<Prisma.superbowlUpdateManyMutationInput, Prisma.superbowlUncheckedUpdateManyInput>
  /**
   * Filter which superbowls to update
   */
  where?: Prisma.superbowlWhereInput
  /**
   * Limit how many superbowls to update.
   */
  limit?: number
}

/**
 * superbowl updateManyAndReturn
 */
export type superbowlUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the superbowl
   */
  select?: Prisma.superbowlSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the superbowl
   */
  omit?: Prisma.superbowlOmit<ExtArgs> | null
  /**
   * The data used to update superbowls.
   */
  data: Prisma.XOR<Prisma.superbowlUpdateManyMutationInput, Prisma.superbowlUncheckedUpdateManyInput>
  /**
   * Filter which superbowls to update
   */
  where?: Prisma.superbowlWhereInput
  /**
   * Limit how many superbowls to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.superbowlIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * superbowl upsert
 */
export type superbowlUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the superbowl
   */
  select?: Prisma.superbowlSelect<ExtArgs> | null
  /**
   * Omit specific fields from the superbowl
   */
  omit?: Prisma.superbowlOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.superbowlInclude<ExtArgs> | null
  /**
   * The filter to search for the superbowl to update in case it exists.
   */
  where: Prisma.superbowlWhereUniqueInput
  /**
   * In case the superbowl found by the `where` argument doesn't exist, create a new superbowl with this data.
   */
  create: Prisma.XOR<Prisma.superbowlCreateInput, Prisma.superbowlUncheckedCreateInput>
  /**
   * In case the superbowl was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.superbowlUpdateInput, Prisma.superbowlUncheckedUpdateInput>
}

/**
 * superbowl delete
 */
export type superbowlDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the superbowl
   */
  select?: Prisma.superbowlSelect<ExtArgs> | null
  /**
   * Omit specific fields from the superbowl
   */
  omit?: Prisma.superbowlOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.superbowlInclude<ExtArgs> | null
  /**
   * Filter which superbowl to delete.
   */
  where: Prisma.superbowlWhereUniqueInput
}

/**
 * superbowl deleteMany
 */
export type superbowlDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which superbowls to delete
   */
  where?: Prisma.superbowlWhereInput
  /**
   * Limit how many superbowls to delete.
   */
  limit?: number
}

/**
 * superbowl.leaguemembers
 */
export type superbowl$leaguemembersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaguemembers
   */
  select?: Prisma.leaguemembersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaguemembers
   */
  omit?: Prisma.leaguemembersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.leaguemembersInclude<ExtArgs> | null
  where?: Prisma.leaguemembersWhereInput
}

/**
 * superbowl without action
 */
export type superbowlDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the superbowl
   */
  select?: Prisma.superbowlSelect<ExtArgs> | null
  /**
   * Omit specific fields from the superbowl
   */
  omit?: Prisma.superbowlOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.superbowlInclude<ExtArgs> | null
}
