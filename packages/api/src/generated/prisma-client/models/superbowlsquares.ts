
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `superbowlsquares` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model superbowlsquares
 * 
 */
export type superbowlsquaresModel = runtime.Types.Result.DefaultSelection<Prisma.$superbowlsquaresPayload>

export type AggregateSuperbowlsquares = {
  _count: SuperbowlsquaresCountAggregateOutputType | null
  _avg: SuperbowlsquaresAvgAggregateOutputType | null
  _sum: SuperbowlsquaresSumAggregateOutputType | null
  _min: SuperbowlsquaresMinAggregateOutputType | null
  _max: SuperbowlsquaresMaxAggregateOutputType | null
}

export type SuperbowlsquaresAvgAggregateOutputType = {
  square_id: number | null
  uid: number | null
  league_id: number | null
  afc_score_index: number | null
  nfc_score_index: number | null
}

export type SuperbowlsquaresSumAggregateOutputType = {
  square_id: number | null
  uid: number | null
  league_id: number | null
  afc_score_index: number | null
  nfc_score_index: number | null
}

export type SuperbowlsquaresMinAggregateOutputType = {
  square_id: number | null
  uid: number | null
  league_id: number | null
  afc_score_index: number | null
  nfc_score_index: number | null
  correct: boolean | null
  ts: Date | null
}

export type SuperbowlsquaresMaxAggregateOutputType = {
  square_id: number | null
  uid: number | null
  league_id: number | null
  afc_score_index: number | null
  nfc_score_index: number | null
  correct: boolean | null
  ts: Date | null
}

export type SuperbowlsquaresCountAggregateOutputType = {
  square_id: number
  uid: number
  league_id: number
  afc_score_index: number
  nfc_score_index: number
  correct: number
  ts: number
  _all: number
}


export type SuperbowlsquaresAvgAggregateInputType = {
  square_id?: true
  uid?: true
  league_id?: true
  afc_score_index?: true
  nfc_score_index?: true
}

export type SuperbowlsquaresSumAggregateInputType = {
  square_id?: true
  uid?: true
  league_id?: true
  afc_score_index?: true
  nfc_score_index?: true
}

export type SuperbowlsquaresMinAggregateInputType = {
  square_id?: true
  uid?: true
  league_id?: true
  afc_score_index?: true
  nfc_score_index?: true
  correct?: true
  ts?: true
}

export type SuperbowlsquaresMaxAggregateInputType = {
  square_id?: true
  uid?: true
  league_id?: true
  afc_score_index?: true
  nfc_score_index?: true
  correct?: true
  ts?: true
}

export type SuperbowlsquaresCountAggregateInputType = {
  square_id?: true
  uid?: true
  league_id?: true
  afc_score_index?: true
  nfc_score_index?: true
  correct?: true
  ts?: true
  _all?: true
}

export type SuperbowlsquaresAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which superbowlsquares to aggregate.
   */
  where?: Prisma.superbowlsquaresWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of superbowlsquares to fetch.
   */
  orderBy?: Prisma.superbowlsquaresOrderByWithRelationInput | Prisma.superbowlsquaresOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.superbowlsquaresWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` superbowlsquares from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` superbowlsquares.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned superbowlsquares
  **/
  _count?: true | SuperbowlsquaresCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SuperbowlsquaresAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SuperbowlsquaresSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SuperbowlsquaresMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SuperbowlsquaresMaxAggregateInputType
}

export type GetSuperbowlsquaresAggregateType<T extends SuperbowlsquaresAggregateArgs> = {
      [P in keyof T & keyof AggregateSuperbowlsquares]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSuperbowlsquares[P]>
    : Prisma.GetScalarType<T[P], AggregateSuperbowlsquares[P]>
}




export type superbowlsquaresGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.superbowlsquaresWhereInput
  orderBy?: Prisma.superbowlsquaresOrderByWithAggregationInput | Prisma.superbowlsquaresOrderByWithAggregationInput[]
  by: Prisma.SuperbowlsquaresScalarFieldEnum[] | Prisma.SuperbowlsquaresScalarFieldEnum
  having?: Prisma.superbowlsquaresScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SuperbowlsquaresCountAggregateInputType | true
  _avg?: SuperbowlsquaresAvgAggregateInputType
  _sum?: SuperbowlsquaresSumAggregateInputType
  _min?: SuperbowlsquaresMinAggregateInputType
  _max?: SuperbowlsquaresMaxAggregateInputType
}

export type SuperbowlsquaresGroupByOutputType = {
  square_id: number
  uid: number
  league_id: number
  afc_score_index: number
  nfc_score_index: number
  correct: boolean
  ts: Date
  _count: SuperbowlsquaresCountAggregateOutputType | null
  _avg: SuperbowlsquaresAvgAggregateOutputType | null
  _sum: SuperbowlsquaresSumAggregateOutputType | null
  _min: SuperbowlsquaresMinAggregateOutputType | null
  _max: SuperbowlsquaresMaxAggregateOutputType | null
}

type GetSuperbowlsquaresGroupByPayload<T extends superbowlsquaresGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SuperbowlsquaresGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SuperbowlsquaresGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SuperbowlsquaresGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SuperbowlsquaresGroupByOutputType[P]>
      }
    >
  > 



export type superbowlsquaresWhereInput = {
  AND?: Prisma.superbowlsquaresWhereInput | Prisma.superbowlsquaresWhereInput[]
  OR?: Prisma.superbowlsquaresWhereInput[]
  NOT?: Prisma.superbowlsquaresWhereInput | Prisma.superbowlsquaresWhereInput[]
  square_id?: Prisma.IntFilter<"superbowlsquares"> | number
  uid?: Prisma.IntFilter<"superbowlsquares"> | number
  league_id?: Prisma.IntFilter<"superbowlsquares"> | number
  afc_score_index?: Prisma.IntFilter<"superbowlsquares"> | number
  nfc_score_index?: Prisma.IntFilter<"superbowlsquares"> | number
  correct?: Prisma.BoolFilter<"superbowlsquares"> | boolean
  ts?: Prisma.DateTimeFilter<"superbowlsquares"> | Date | string
}

export type superbowlsquaresOrderByWithRelationInput = {
  square_id?: Prisma.SortOrder
  uid?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  afc_score_index?: Prisma.SortOrder
  nfc_score_index?: Prisma.SortOrder
  correct?: Prisma.SortOrder
  ts?: Prisma.SortOrder
}

export type superbowlsquaresWhereUniqueInput = Prisma.AtLeast<{
  square_id?: number
  AND?: Prisma.superbowlsquaresWhereInput | Prisma.superbowlsquaresWhereInput[]
  OR?: Prisma.superbowlsquaresWhereInput[]
  NOT?: Prisma.superbowlsquaresWhereInput | Prisma.superbowlsquaresWhereInput[]
  uid?: Prisma.IntFilter<"superbowlsquares"> | number
  league_id?: Prisma.IntFilter<"superbowlsquares"> | number
  afc_score_index?: Prisma.IntFilter<"superbowlsquares"> | number
  nfc_score_index?: Prisma.IntFilter<"superbowlsquares"> | number
  correct?: Prisma.BoolFilter<"superbowlsquares"> | boolean
  ts?: Prisma.DateTimeFilter<"superbowlsquares"> | Date | string
}, "square_id">

export type superbowlsquaresOrderByWithAggregationInput = {
  square_id?: Prisma.SortOrder
  uid?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  afc_score_index?: Prisma.SortOrder
  nfc_score_index?: Prisma.SortOrder
  correct?: Prisma.SortOrder
  ts?: Prisma.SortOrder
  _count?: Prisma.superbowlsquaresCountOrderByAggregateInput
  _avg?: Prisma.superbowlsquaresAvgOrderByAggregateInput
  _max?: Prisma.superbowlsquaresMaxOrderByAggregateInput
  _min?: Prisma.superbowlsquaresMinOrderByAggregateInput
  _sum?: Prisma.superbowlsquaresSumOrderByAggregateInput
}

export type superbowlsquaresScalarWhereWithAggregatesInput = {
  AND?: Prisma.superbowlsquaresScalarWhereWithAggregatesInput | Prisma.superbowlsquaresScalarWhereWithAggregatesInput[]
  OR?: Prisma.superbowlsquaresScalarWhereWithAggregatesInput[]
  NOT?: Prisma.superbowlsquaresScalarWhereWithAggregatesInput | Prisma.superbowlsquaresScalarWhereWithAggregatesInput[]
  square_id?: Prisma.IntWithAggregatesFilter<"superbowlsquares"> | number
  uid?: Prisma.IntWithAggregatesFilter<"superbowlsquares"> | number
  league_id?: Prisma.IntWithAggregatesFilter<"superbowlsquares"> | number
  afc_score_index?: Prisma.IntWithAggregatesFilter<"superbowlsquares"> | number
  nfc_score_index?: Prisma.IntWithAggregatesFilter<"superbowlsquares"> | number
  correct?: Prisma.BoolWithAggregatesFilter<"superbowlsquares"> | boolean
  ts?: Prisma.DateTimeWithAggregatesFilter<"superbowlsquares"> | Date | string
}

export type superbowlsquaresCreateInput = {
  uid: number
  league_id: number
  afc_score_index: number
  nfc_score_index: number
  correct: boolean
  ts?: Date | string
}

export type superbowlsquaresUncheckedCreateInput = {
  square_id?: number
  uid: number
  league_id: number
  afc_score_index: number
  nfc_score_index: number
  correct: boolean
  ts?: Date | string
}

export type superbowlsquaresUpdateInput = {
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  league_id?: Prisma.IntFieldUpdateOperationsInput | number
  afc_score_index?: Prisma.IntFieldUpdateOperationsInput | number
  nfc_score_index?: Prisma.IntFieldUpdateOperationsInput | number
  correct?: Prisma.BoolFieldUpdateOperationsInput | boolean
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type superbowlsquaresUncheckedUpdateInput = {
  square_id?: Prisma.IntFieldUpdateOperationsInput | number
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  league_id?: Prisma.IntFieldUpdateOperationsInput | number
  afc_score_index?: Prisma.IntFieldUpdateOperationsInput | number
  nfc_score_index?: Prisma.IntFieldUpdateOperationsInput | number
  correct?: Prisma.BoolFieldUpdateOperationsInput | boolean
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type superbowlsquaresCreateManyInput = {
  square_id?: number
  uid: number
  league_id: number
  afc_score_index: number
  nfc_score_index: number
  correct: boolean
  ts?: Date | string
}

export type superbowlsquaresUpdateManyMutationInput = {
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  league_id?: Prisma.IntFieldUpdateOperationsInput | number
  afc_score_index?: Prisma.IntFieldUpdateOperationsInput | number
  nfc_score_index?: Prisma.IntFieldUpdateOperationsInput | number
  correct?: Prisma.BoolFieldUpdateOperationsInput | boolean
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type superbowlsquaresUncheckedUpdateManyInput = {
  square_id?: Prisma.IntFieldUpdateOperationsInput | number
  uid?: Prisma.IntFieldUpdateOperationsInput | number
  league_id?: Prisma.IntFieldUpdateOperationsInput | number
  afc_score_index?: Prisma.IntFieldUpdateOperationsInput | number
  nfc_score_index?: Prisma.IntFieldUpdateOperationsInput | number
  correct?: Prisma.BoolFieldUpdateOperationsInput | boolean
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type superbowlsquaresCountOrderByAggregateInput = {
  square_id?: Prisma.SortOrder
  uid?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  afc_score_index?: Prisma.SortOrder
  nfc_score_index?: Prisma.SortOrder
  correct?: Prisma.SortOrder
  ts?: Prisma.SortOrder
}

export type superbowlsquaresAvgOrderByAggregateInput = {
  square_id?: Prisma.SortOrder
  uid?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  afc_score_index?: Prisma.SortOrder
  nfc_score_index?: Prisma.SortOrder
}

export type superbowlsquaresMaxOrderByAggregateInput = {
  square_id?: Prisma.SortOrder
  uid?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  afc_score_index?: Prisma.SortOrder
  nfc_score_index?: Prisma.SortOrder
  correct?: Prisma.SortOrder
  ts?: Prisma.SortOrder
}

export type superbowlsquaresMinOrderByAggregateInput = {
  square_id?: Prisma.SortOrder
  uid?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  afc_score_index?: Prisma.SortOrder
  nfc_score_index?: Prisma.SortOrder
  correct?: Prisma.SortOrder
  ts?: Prisma.SortOrder
}

export type superbowlsquaresSumOrderByAggregateInput = {
  square_id?: Prisma.SortOrder
  uid?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  afc_score_index?: Prisma.SortOrder
  nfc_score_index?: Prisma.SortOrder
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}



export type superbowlsquaresSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  square_id?: boolean
  uid?: boolean
  league_id?: boolean
  afc_score_index?: boolean
  nfc_score_index?: boolean
  correct?: boolean
  ts?: boolean
}, ExtArgs["result"]["superbowlsquares"]>

export type superbowlsquaresSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  square_id?: boolean
  uid?: boolean
  league_id?: boolean
  afc_score_index?: boolean
  nfc_score_index?: boolean
  correct?: boolean
  ts?: boolean
}, ExtArgs["result"]["superbowlsquares"]>

export type superbowlsquaresSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  square_id?: boolean
  uid?: boolean
  league_id?: boolean
  afc_score_index?: boolean
  nfc_score_index?: boolean
  correct?: boolean
  ts?: boolean
}, ExtArgs["result"]["superbowlsquares"]>

export type superbowlsquaresSelectScalar = {
  square_id?: boolean
  uid?: boolean
  league_id?: boolean
  afc_score_index?: boolean
  nfc_score_index?: boolean
  correct?: boolean
  ts?: boolean
}

export type superbowlsquaresOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"square_id" | "uid" | "league_id" | "afc_score_index" | "nfc_score_index" | "correct" | "ts", ExtArgs["result"]["superbowlsquares"]>

export type $superbowlsquaresPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "superbowlsquares"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    square_id: number
    uid: number
    league_id: number
    afc_score_index: number
    nfc_score_index: number
    correct: boolean
    ts: Date
  }, ExtArgs["result"]["superbowlsquares"]>
  composites: {}
}

export type superbowlsquaresGetPayload<S extends boolean | null | undefined | superbowlsquaresDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$superbowlsquaresPayload, S>

export type superbowlsquaresCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<superbowlsquaresFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SuperbowlsquaresCountAggregateInputType | true
  }

export interface superbowlsquaresDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['superbowlsquares'], meta: { name: 'superbowlsquares' } }
  /**
   * Find zero or one Superbowlsquares that matches the filter.
   * @param {superbowlsquaresFindUniqueArgs} args - Arguments to find a Superbowlsquares
   * @example
   * // Get one Superbowlsquares
   * const superbowlsquares = await prisma.superbowlsquares.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends superbowlsquaresFindUniqueArgs>(args: Prisma.SelectSubset<T, superbowlsquaresFindUniqueArgs<ExtArgs>>): Prisma.Prisma__superbowlsquaresClient<runtime.Types.Result.GetResult<Prisma.$superbowlsquaresPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Superbowlsquares that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {superbowlsquaresFindUniqueOrThrowArgs} args - Arguments to find a Superbowlsquares
   * @example
   * // Get one Superbowlsquares
   * const superbowlsquares = await prisma.superbowlsquares.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends superbowlsquaresFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, superbowlsquaresFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__superbowlsquaresClient<runtime.Types.Result.GetResult<Prisma.$superbowlsquaresPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Superbowlsquares that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {superbowlsquaresFindFirstArgs} args - Arguments to find a Superbowlsquares
   * @example
   * // Get one Superbowlsquares
   * const superbowlsquares = await prisma.superbowlsquares.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends superbowlsquaresFindFirstArgs>(args?: Prisma.SelectSubset<T, superbowlsquaresFindFirstArgs<ExtArgs>>): Prisma.Prisma__superbowlsquaresClient<runtime.Types.Result.GetResult<Prisma.$superbowlsquaresPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Superbowlsquares that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {superbowlsquaresFindFirstOrThrowArgs} args - Arguments to find a Superbowlsquares
   * @example
   * // Get one Superbowlsquares
   * const superbowlsquares = await prisma.superbowlsquares.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends superbowlsquaresFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, superbowlsquaresFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__superbowlsquaresClient<runtime.Types.Result.GetResult<Prisma.$superbowlsquaresPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Superbowlsquares that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {superbowlsquaresFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Superbowlsquares
   * const superbowlsquares = await prisma.superbowlsquares.findMany()
   * 
   * // Get first 10 Superbowlsquares
   * const superbowlsquares = await prisma.superbowlsquares.findMany({ take: 10 })
   * 
   * // Only select the `square_id`
   * const superbowlsquaresWithSquare_idOnly = await prisma.superbowlsquares.findMany({ select: { square_id: true } })
   * 
   */
  findMany<T extends superbowlsquaresFindManyArgs>(args?: Prisma.SelectSubset<T, superbowlsquaresFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$superbowlsquaresPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Superbowlsquares.
   * @param {superbowlsquaresCreateArgs} args - Arguments to create a Superbowlsquares.
   * @example
   * // Create one Superbowlsquares
   * const Superbowlsquares = await prisma.superbowlsquares.create({
   *   data: {
   *     // ... data to create a Superbowlsquares
   *   }
   * })
   * 
   */
  create<T extends superbowlsquaresCreateArgs>(args: Prisma.SelectSubset<T, superbowlsquaresCreateArgs<ExtArgs>>): Prisma.Prisma__superbowlsquaresClient<runtime.Types.Result.GetResult<Prisma.$superbowlsquaresPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Superbowlsquares.
   * @param {superbowlsquaresCreateManyArgs} args - Arguments to create many Superbowlsquares.
   * @example
   * // Create many Superbowlsquares
   * const superbowlsquares = await prisma.superbowlsquares.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends superbowlsquaresCreateManyArgs>(args?: Prisma.SelectSubset<T, superbowlsquaresCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Superbowlsquares and returns the data saved in the database.
   * @param {superbowlsquaresCreateManyAndReturnArgs} args - Arguments to create many Superbowlsquares.
   * @example
   * // Create many Superbowlsquares
   * const superbowlsquares = await prisma.superbowlsquares.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Superbowlsquares and only return the `square_id`
   * const superbowlsquaresWithSquare_idOnly = await prisma.superbowlsquares.createManyAndReturn({
   *   select: { square_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends superbowlsquaresCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, superbowlsquaresCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$superbowlsquaresPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Superbowlsquares.
   * @param {superbowlsquaresDeleteArgs} args - Arguments to delete one Superbowlsquares.
   * @example
   * // Delete one Superbowlsquares
   * const Superbowlsquares = await prisma.superbowlsquares.delete({
   *   where: {
   *     // ... filter to delete one Superbowlsquares
   *   }
   * })
   * 
   */
  delete<T extends superbowlsquaresDeleteArgs>(args: Prisma.SelectSubset<T, superbowlsquaresDeleteArgs<ExtArgs>>): Prisma.Prisma__superbowlsquaresClient<runtime.Types.Result.GetResult<Prisma.$superbowlsquaresPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Superbowlsquares.
   * @param {superbowlsquaresUpdateArgs} args - Arguments to update one Superbowlsquares.
   * @example
   * // Update one Superbowlsquares
   * const superbowlsquares = await prisma.superbowlsquares.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends superbowlsquaresUpdateArgs>(args: Prisma.SelectSubset<T, superbowlsquaresUpdateArgs<ExtArgs>>): Prisma.Prisma__superbowlsquaresClient<runtime.Types.Result.GetResult<Prisma.$superbowlsquaresPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Superbowlsquares.
   * @param {superbowlsquaresDeleteManyArgs} args - Arguments to filter Superbowlsquares to delete.
   * @example
   * // Delete a few Superbowlsquares
   * const { count } = await prisma.superbowlsquares.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends superbowlsquaresDeleteManyArgs>(args?: Prisma.SelectSubset<T, superbowlsquaresDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Superbowlsquares.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {superbowlsquaresUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Superbowlsquares
   * const superbowlsquares = await prisma.superbowlsquares.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends superbowlsquaresUpdateManyArgs>(args: Prisma.SelectSubset<T, superbowlsquaresUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Superbowlsquares and returns the data updated in the database.
   * @param {superbowlsquaresUpdateManyAndReturnArgs} args - Arguments to update many Superbowlsquares.
   * @example
   * // Update many Superbowlsquares
   * const superbowlsquares = await prisma.superbowlsquares.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Superbowlsquares and only return the `square_id`
   * const superbowlsquaresWithSquare_idOnly = await prisma.superbowlsquares.updateManyAndReturn({
   *   select: { square_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends superbowlsquaresUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, superbowlsquaresUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$superbowlsquaresPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Superbowlsquares.
   * @param {superbowlsquaresUpsertArgs} args - Arguments to update or create a Superbowlsquares.
   * @example
   * // Update or create a Superbowlsquares
   * const superbowlsquares = await prisma.superbowlsquares.upsert({
   *   create: {
   *     // ... data to create a Superbowlsquares
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Superbowlsquares we want to update
   *   }
   * })
   */
  upsert<T extends superbowlsquaresUpsertArgs>(args: Prisma.SelectSubset<T, superbowlsquaresUpsertArgs<ExtArgs>>): Prisma.Prisma__superbowlsquaresClient<runtime.Types.Result.GetResult<Prisma.$superbowlsquaresPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Superbowlsquares.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {superbowlsquaresCountArgs} args - Arguments to filter Superbowlsquares to count.
   * @example
   * // Count the number of Superbowlsquares
   * const count = await prisma.superbowlsquares.count({
   *   where: {
   *     // ... the filter for the Superbowlsquares we want to count
   *   }
   * })
  **/
  count<T extends superbowlsquaresCountArgs>(
    args?: Prisma.Subset<T, superbowlsquaresCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SuperbowlsquaresCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Superbowlsquares.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SuperbowlsquaresAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SuperbowlsquaresAggregateArgs>(args: Prisma.Subset<T, SuperbowlsquaresAggregateArgs>): Prisma.PrismaPromise<GetSuperbowlsquaresAggregateType<T>>

  /**
   * Group by Superbowlsquares.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {superbowlsquaresGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends superbowlsquaresGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: superbowlsquaresGroupByArgs['orderBy'] }
      : { orderBy?: superbowlsquaresGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, superbowlsquaresGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSuperbowlsquaresGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the superbowlsquares model
 */
readonly fields: superbowlsquaresFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for superbowlsquares.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__superbowlsquaresClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the superbowlsquares model
 */
export interface superbowlsquaresFieldRefs {
  readonly square_id: Prisma.FieldRef<"superbowlsquares", 'Int'>
  readonly uid: Prisma.FieldRef<"superbowlsquares", 'Int'>
  readonly league_id: Prisma.FieldRef<"superbowlsquares", 'Int'>
  readonly afc_score_index: Prisma.FieldRef<"superbowlsquares", 'Int'>
  readonly nfc_score_index: Prisma.FieldRef<"superbowlsquares", 'Int'>
  readonly correct: Prisma.FieldRef<"superbowlsquares", 'Boolean'>
  readonly ts: Prisma.FieldRef<"superbowlsquares", 'DateTime'>
}
    

// Custom InputTypes
/**
 * superbowlsquares findUnique
 */
export type superbowlsquaresFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the superbowlsquares
   */
  select?: Prisma.superbowlsquaresSelect<ExtArgs> | null
  /**
   * Omit specific fields from the superbowlsquares
   */
  omit?: Prisma.superbowlsquaresOmit<ExtArgs> | null
  /**
   * Filter, which superbowlsquares to fetch.
   */
  where: Prisma.superbowlsquaresWhereUniqueInput
}

/**
 * superbowlsquares findUniqueOrThrow
 */
export type superbowlsquaresFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the superbowlsquares
   */
  select?: Prisma.superbowlsquaresSelect<ExtArgs> | null
  /**
   * Omit specific fields from the superbowlsquares
   */
  omit?: Prisma.superbowlsquaresOmit<ExtArgs> | null
  /**
   * Filter, which superbowlsquares to fetch.
   */
  where: Prisma.superbowlsquaresWhereUniqueInput
}

/**
 * superbowlsquares findFirst
 */
export type superbowlsquaresFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the superbowlsquares
   */
  select?: Prisma.superbowlsquaresSelect<ExtArgs> | null
  /**
   * Omit specific fields from the superbowlsquares
   */
  omit?: Prisma.superbowlsquaresOmit<ExtArgs> | null
  /**
   * Filter, which superbowlsquares to fetch.
   */
  where?: Prisma.superbowlsquaresWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of superbowlsquares to fetch.
   */
  orderBy?: Prisma.superbowlsquaresOrderByWithRelationInput | Prisma.superbowlsquaresOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for superbowlsquares.
   */
  cursor?: Prisma.superbowlsquaresWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` superbowlsquares from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` superbowlsquares.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of superbowlsquares.
   */
  distinct?: Prisma.SuperbowlsquaresScalarFieldEnum | Prisma.SuperbowlsquaresScalarFieldEnum[]
}

/**
 * superbowlsquares findFirstOrThrow
 */
export type superbowlsquaresFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the superbowlsquares
   */
  select?: Prisma.superbowlsquaresSelect<ExtArgs> | null
  /**
   * Omit specific fields from the superbowlsquares
   */
  omit?: Prisma.superbowlsquaresOmit<ExtArgs> | null
  /**
   * Filter, which superbowlsquares to fetch.
   */
  where?: Prisma.superbowlsquaresWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of superbowlsquares to fetch.
   */
  orderBy?: Prisma.superbowlsquaresOrderByWithRelationInput | Prisma.superbowlsquaresOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for superbowlsquares.
   */
  cursor?: Prisma.superbowlsquaresWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` superbowlsquares from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` superbowlsquares.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of superbowlsquares.
   */
  distinct?: Prisma.SuperbowlsquaresScalarFieldEnum | Prisma.SuperbowlsquaresScalarFieldEnum[]
}

/**
 * superbowlsquares findMany
 */
export type superbowlsquaresFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the superbowlsquares
   */
  select?: Prisma.superbowlsquaresSelect<ExtArgs> | null
  /**
   * Omit specific fields from the superbowlsquares
   */
  omit?: Prisma.superbowlsquaresOmit<ExtArgs> | null
  /**
   * Filter, which superbowlsquares to fetch.
   */
  where?: Prisma.superbowlsquaresWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of superbowlsquares to fetch.
   */
  orderBy?: Prisma.superbowlsquaresOrderByWithRelationInput | Prisma.superbowlsquaresOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing superbowlsquares.
   */
  cursor?: Prisma.superbowlsquaresWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` superbowlsquares from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` superbowlsquares.
   */
  skip?: number
  distinct?: Prisma.SuperbowlsquaresScalarFieldEnum | Prisma.SuperbowlsquaresScalarFieldEnum[]
}

/**
 * superbowlsquares create
 */
export type superbowlsquaresCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the superbowlsquares
   */
  select?: Prisma.superbowlsquaresSelect<ExtArgs> | null
  /**
   * Omit specific fields from the superbowlsquares
   */
  omit?: Prisma.superbowlsquaresOmit<ExtArgs> | null
  /**
   * The data needed to create a superbowlsquares.
   */
  data: Prisma.XOR<Prisma.superbowlsquaresCreateInput, Prisma.superbowlsquaresUncheckedCreateInput>
}

/**
 * superbowlsquares createMany
 */
export type superbowlsquaresCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many superbowlsquares.
   */
  data: Prisma.superbowlsquaresCreateManyInput | Prisma.superbowlsquaresCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * superbowlsquares createManyAndReturn
 */
export type superbowlsquaresCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the superbowlsquares
   */
  select?: Prisma.superbowlsquaresSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the superbowlsquares
   */
  omit?: Prisma.superbowlsquaresOmit<ExtArgs> | null
  /**
   * The data used to create many superbowlsquares.
   */
  data: Prisma.superbowlsquaresCreateManyInput | Prisma.superbowlsquaresCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * superbowlsquares update
 */
export type superbowlsquaresUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the superbowlsquares
   */
  select?: Prisma.superbowlsquaresSelect<ExtArgs> | null
  /**
   * Omit specific fields from the superbowlsquares
   */
  omit?: Prisma.superbowlsquaresOmit<ExtArgs> | null
  /**
   * The data needed to update a superbowlsquares.
   */
  data: Prisma.XOR<Prisma.superbowlsquaresUpdateInput, Prisma.superbowlsquaresUncheckedUpdateInput>
  /**
   * Choose, which superbowlsquares to update.
   */
  where: Prisma.superbowlsquaresWhereUniqueInput
}

/**
 * superbowlsquares updateMany
 */
export type superbowlsquaresUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update superbowlsquares.
   */
  data: Prisma.XOR<Prisma.superbowlsquaresUpdateManyMutationInput, Prisma.superbowlsquaresUncheckedUpdateManyInput>
  /**
   * Filter which superbowlsquares to update
   */
  where?: Prisma.superbowlsquaresWhereInput
  /**
   * Limit how many superbowlsquares to update.
   */
  limit?: number
}

/**
 * superbowlsquares updateManyAndReturn
 */
export type superbowlsquaresUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the superbowlsquares
   */
  select?: Prisma.superbowlsquaresSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the superbowlsquares
   */
  omit?: Prisma.superbowlsquaresOmit<ExtArgs> | null
  /**
   * The data used to update superbowlsquares.
   */
  data: Prisma.XOR<Prisma.superbowlsquaresUpdateManyMutationInput, Prisma.superbowlsquaresUncheckedUpdateManyInput>
  /**
   * Filter which superbowlsquares to update
   */
  where?: Prisma.superbowlsquaresWhereInput
  /**
   * Limit how many superbowlsquares to update.
   */
  limit?: number
}

/**
 * superbowlsquares upsert
 */
export type superbowlsquaresUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the superbowlsquares
   */
  select?: Prisma.superbowlsquaresSelect<ExtArgs> | null
  /**
   * Omit specific fields from the superbowlsquares
   */
  omit?: Prisma.superbowlsquaresOmit<ExtArgs> | null
  /**
   * The filter to search for the superbowlsquares to update in case it exists.
   */
  where: Prisma.superbowlsquaresWhereUniqueInput
  /**
   * In case the superbowlsquares found by the `where` argument doesn't exist, create a new superbowlsquares with this data.
   */
  create: Prisma.XOR<Prisma.superbowlsquaresCreateInput, Prisma.superbowlsquaresUncheckedCreateInput>
  /**
   * In case the superbowlsquares was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.superbowlsquaresUpdateInput, Prisma.superbowlsquaresUncheckedUpdateInput>
}

/**
 * superbowlsquares delete
 */
export type superbowlsquaresDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the superbowlsquares
   */
  select?: Prisma.superbowlsquaresSelect<ExtArgs> | null
  /**
   * Omit specific fields from the superbowlsquares
   */
  omit?: Prisma.superbowlsquaresOmit<ExtArgs> | null
  /**
   * Filter which superbowlsquares to delete.
   */
  where: Prisma.superbowlsquaresWhereUniqueInput
}

/**
 * superbowlsquares deleteMany
 */
export type superbowlsquaresDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which superbowlsquares to delete
   */
  where?: Prisma.superbowlsquaresWhereInput
  /**
   * Limit how many superbowlsquares to delete.
   */
  limit?: number
}

/**
 * superbowlsquares without action
 */
export type superbowlsquaresDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the superbowlsquares
   */
  select?: Prisma.superbowlsquaresSelect<ExtArgs> | null
  /**
   * Omit specific fields from the superbowlsquares
   */
  omit?: Prisma.superbowlsquaresOmit<ExtArgs> | null
}
