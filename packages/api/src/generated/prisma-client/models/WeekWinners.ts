
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `WeekWinners` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model WeekWinners
 * 
 */
export type WeekWinnersModel = runtime.Types.Result.DefaultSelection<Prisma.$WeekWinnersPayload>

export type AggregateWeekWinners = {
  _count: WeekWinnersCountAggregateOutputType | null
  _avg: WeekWinnersAvgAggregateOutputType | null
  _sum: WeekWinnersSumAggregateOutputType | null
  _min: WeekWinnersMinAggregateOutputType | null
  _max: WeekWinnersMaxAggregateOutputType | null
}

export type WeekWinnersAvgAggregateOutputType = {
  id: number | null
  league_id: number | null
  membership_id: number | null
  week: number | null
  correct_count: number | null
  score_diff: number | null
}

export type WeekWinnersSumAggregateOutputType = {
  id: number | null
  league_id: number | null
  membership_id: number | null
  week: number | null
  correct_count: number | null
  score_diff: number | null
}

export type WeekWinnersMinAggregateOutputType = {
  id: number | null
  league_id: number | null
  membership_id: number | null
  week: number | null
  correct_count: number | null
  score_diff: number | null
}

export type WeekWinnersMaxAggregateOutputType = {
  id: number | null
  league_id: number | null
  membership_id: number | null
  week: number | null
  correct_count: number | null
  score_diff: number | null
}

export type WeekWinnersCountAggregateOutputType = {
  id: number
  league_id: number
  membership_id: number
  week: number
  correct_count: number
  score_diff: number
  _all: number
}


export type WeekWinnersAvgAggregateInputType = {
  id?: true
  league_id?: true
  membership_id?: true
  week?: true
  correct_count?: true
  score_diff?: true
}

export type WeekWinnersSumAggregateInputType = {
  id?: true
  league_id?: true
  membership_id?: true
  week?: true
  correct_count?: true
  score_diff?: true
}

export type WeekWinnersMinAggregateInputType = {
  id?: true
  league_id?: true
  membership_id?: true
  week?: true
  correct_count?: true
  score_diff?: true
}

export type WeekWinnersMaxAggregateInputType = {
  id?: true
  league_id?: true
  membership_id?: true
  week?: true
  correct_count?: true
  score_diff?: true
}

export type WeekWinnersCountAggregateInputType = {
  id?: true
  league_id?: true
  membership_id?: true
  week?: true
  correct_count?: true
  score_diff?: true
  _all?: true
}

export type WeekWinnersAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WeekWinners to aggregate.
   */
  where?: Prisma.WeekWinnersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WeekWinners to fetch.
   */
  orderBy?: Prisma.WeekWinnersOrderByWithRelationInput | Prisma.WeekWinnersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.WeekWinnersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WeekWinners from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WeekWinners.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned WeekWinners
  **/
  _count?: true | WeekWinnersCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: WeekWinnersAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: WeekWinnersSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: WeekWinnersMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: WeekWinnersMaxAggregateInputType
}

export type GetWeekWinnersAggregateType<T extends WeekWinnersAggregateArgs> = {
      [P in keyof T & keyof AggregateWeekWinners]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateWeekWinners[P]>
    : Prisma.GetScalarType<T[P], AggregateWeekWinners[P]>
}




export type WeekWinnersGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WeekWinnersWhereInput
  orderBy?: Prisma.WeekWinnersOrderByWithAggregationInput | Prisma.WeekWinnersOrderByWithAggregationInput[]
  by: Prisma.WeekWinnersScalarFieldEnum[] | Prisma.WeekWinnersScalarFieldEnum
  having?: Prisma.WeekWinnersScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: WeekWinnersCountAggregateInputType | true
  _avg?: WeekWinnersAvgAggregateInputType
  _sum?: WeekWinnersSumAggregateInputType
  _min?: WeekWinnersMinAggregateInputType
  _max?: WeekWinnersMaxAggregateInputType
}

export type WeekWinnersGroupByOutputType = {
  id: number
  league_id: number
  membership_id: number
  week: number
  correct_count: number
  score_diff: number
  _count: WeekWinnersCountAggregateOutputType | null
  _avg: WeekWinnersAvgAggregateOutputType | null
  _sum: WeekWinnersSumAggregateOutputType | null
  _min: WeekWinnersMinAggregateOutputType | null
  _max: WeekWinnersMaxAggregateOutputType | null
}

type GetWeekWinnersGroupByPayload<T extends WeekWinnersGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<WeekWinnersGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof WeekWinnersGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], WeekWinnersGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], WeekWinnersGroupByOutputType[P]>
      }
    >
  > 



export type WeekWinnersWhereInput = {
  AND?: Prisma.WeekWinnersWhereInput | Prisma.WeekWinnersWhereInput[]
  OR?: Prisma.WeekWinnersWhereInput[]
  NOT?: Prisma.WeekWinnersWhereInput | Prisma.WeekWinnersWhereInput[]
  id?: Prisma.IntFilter<"WeekWinners"> | number
  league_id?: Prisma.IntFilter<"WeekWinners"> | number
  membership_id?: Prisma.IntFilter<"WeekWinners"> | number
  week?: Prisma.IntFilter<"WeekWinners"> | number
  correct_count?: Prisma.IntFilter<"WeekWinners"> | number
  score_diff?: Prisma.IntFilter<"WeekWinners"> | number
  leagues?: Prisma.XOR<Prisma.LeaguesScalarRelationFilter, Prisma.leaguesWhereInput>
  leaguemembers?: Prisma.XOR<Prisma.LeaguemembersScalarRelationFilter, Prisma.leaguemembersWhereInput>
}

export type WeekWinnersOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  membership_id?: Prisma.SortOrder
  week?: Prisma.SortOrder
  correct_count?: Prisma.SortOrder
  score_diff?: Prisma.SortOrder
  leagues?: Prisma.leaguesOrderByWithRelationInput
  leaguemembers?: Prisma.leaguemembersOrderByWithRelationInput
}

export type WeekWinnersWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.WeekWinnersWhereInput | Prisma.WeekWinnersWhereInput[]
  OR?: Prisma.WeekWinnersWhereInput[]
  NOT?: Prisma.WeekWinnersWhereInput | Prisma.WeekWinnersWhereInput[]
  league_id?: Prisma.IntFilter<"WeekWinners"> | number
  membership_id?: Prisma.IntFilter<"WeekWinners"> | number
  week?: Prisma.IntFilter<"WeekWinners"> | number
  correct_count?: Prisma.IntFilter<"WeekWinners"> | number
  score_diff?: Prisma.IntFilter<"WeekWinners"> | number
  leagues?: Prisma.XOR<Prisma.LeaguesScalarRelationFilter, Prisma.leaguesWhereInput>
  leaguemembers?: Prisma.XOR<Prisma.LeaguemembersScalarRelationFilter, Prisma.leaguemembersWhereInput>
}, "id">

export type WeekWinnersOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  membership_id?: Prisma.SortOrder
  week?: Prisma.SortOrder
  correct_count?: Prisma.SortOrder
  score_diff?: Prisma.SortOrder
  _count?: Prisma.WeekWinnersCountOrderByAggregateInput
  _avg?: Prisma.WeekWinnersAvgOrderByAggregateInput
  _max?: Prisma.WeekWinnersMaxOrderByAggregateInput
  _min?: Prisma.WeekWinnersMinOrderByAggregateInput
  _sum?: Prisma.WeekWinnersSumOrderByAggregateInput
}

export type WeekWinnersScalarWhereWithAggregatesInput = {
  AND?: Prisma.WeekWinnersScalarWhereWithAggregatesInput | Prisma.WeekWinnersScalarWhereWithAggregatesInput[]
  OR?: Prisma.WeekWinnersScalarWhereWithAggregatesInput[]
  NOT?: Prisma.WeekWinnersScalarWhereWithAggregatesInput | Prisma.WeekWinnersScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"WeekWinners"> | number
  league_id?: Prisma.IntWithAggregatesFilter<"WeekWinners"> | number
  membership_id?: Prisma.IntWithAggregatesFilter<"WeekWinners"> | number
  week?: Prisma.IntWithAggregatesFilter<"WeekWinners"> | number
  correct_count?: Prisma.IntWithAggregatesFilter<"WeekWinners"> | number
  score_diff?: Prisma.IntWithAggregatesFilter<"WeekWinners"> | number
}

export type WeekWinnersCreateInput = {
  week: number
  correct_count: number
  score_diff: number
  leagues: Prisma.leaguesCreateNestedOneWithoutWeekWinnersInput
  leaguemembers: Prisma.leaguemembersCreateNestedOneWithoutWeekWinnersInput
}

export type WeekWinnersUncheckedCreateInput = {
  id?: number
  league_id: number
  membership_id: number
  week: number
  correct_count: number
  score_diff: number
}

export type WeekWinnersUpdateInput = {
  week?: Prisma.IntFieldUpdateOperationsInput | number
  correct_count?: Prisma.IntFieldUpdateOperationsInput | number
  score_diff?: Prisma.IntFieldUpdateOperationsInput | number
  leagues?: Prisma.leaguesUpdateOneRequiredWithoutWeekWinnersNestedInput
  leaguemembers?: Prisma.leaguemembersUpdateOneRequiredWithoutWeekWinnersNestedInput
}

export type WeekWinnersUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  league_id?: Prisma.IntFieldUpdateOperationsInput | number
  membership_id?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  correct_count?: Prisma.IntFieldUpdateOperationsInput | number
  score_diff?: Prisma.IntFieldUpdateOperationsInput | number
}

export type WeekWinnersCreateManyInput = {
  id?: number
  league_id: number
  membership_id: number
  week: number
  correct_count: number
  score_diff: number
}

export type WeekWinnersUpdateManyMutationInput = {
  week?: Prisma.IntFieldUpdateOperationsInput | number
  correct_count?: Prisma.IntFieldUpdateOperationsInput | number
  score_diff?: Prisma.IntFieldUpdateOperationsInput | number
}

export type WeekWinnersUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  league_id?: Prisma.IntFieldUpdateOperationsInput | number
  membership_id?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  correct_count?: Prisma.IntFieldUpdateOperationsInput | number
  score_diff?: Prisma.IntFieldUpdateOperationsInput | number
}

export type WeekWinnersCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  membership_id?: Prisma.SortOrder
  week?: Prisma.SortOrder
  correct_count?: Prisma.SortOrder
  score_diff?: Prisma.SortOrder
}

export type WeekWinnersAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  membership_id?: Prisma.SortOrder
  week?: Prisma.SortOrder
  correct_count?: Prisma.SortOrder
  score_diff?: Prisma.SortOrder
}

export type WeekWinnersMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  membership_id?: Prisma.SortOrder
  week?: Prisma.SortOrder
  correct_count?: Prisma.SortOrder
  score_diff?: Prisma.SortOrder
}

export type WeekWinnersMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  membership_id?: Prisma.SortOrder
  week?: Prisma.SortOrder
  correct_count?: Prisma.SortOrder
  score_diff?: Prisma.SortOrder
}

export type WeekWinnersSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  membership_id?: Prisma.SortOrder
  week?: Prisma.SortOrder
  correct_count?: Prisma.SortOrder
  score_diff?: Prisma.SortOrder
}

export type WeekWinnersListRelationFilter = {
  every?: Prisma.WeekWinnersWhereInput
  some?: Prisma.WeekWinnersWhereInput
  none?: Prisma.WeekWinnersWhereInput
}

export type WeekWinnersOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type WeekWinnersCreateNestedManyWithoutLeaguemembersInput = {
  create?: Prisma.XOR<Prisma.WeekWinnersCreateWithoutLeaguemembersInput, Prisma.WeekWinnersUncheckedCreateWithoutLeaguemembersInput> | Prisma.WeekWinnersCreateWithoutLeaguemembersInput[] | Prisma.WeekWinnersUncheckedCreateWithoutLeaguemembersInput[]
  connectOrCreate?: Prisma.WeekWinnersCreateOrConnectWithoutLeaguemembersInput | Prisma.WeekWinnersCreateOrConnectWithoutLeaguemembersInput[]
  createMany?: Prisma.WeekWinnersCreateManyLeaguemembersInputEnvelope
  connect?: Prisma.WeekWinnersWhereUniqueInput | Prisma.WeekWinnersWhereUniqueInput[]
}

export type WeekWinnersUncheckedCreateNestedManyWithoutLeaguemembersInput = {
  create?: Prisma.XOR<Prisma.WeekWinnersCreateWithoutLeaguemembersInput, Prisma.WeekWinnersUncheckedCreateWithoutLeaguemembersInput> | Prisma.WeekWinnersCreateWithoutLeaguemembersInput[] | Prisma.WeekWinnersUncheckedCreateWithoutLeaguemembersInput[]
  connectOrCreate?: Prisma.WeekWinnersCreateOrConnectWithoutLeaguemembersInput | Prisma.WeekWinnersCreateOrConnectWithoutLeaguemembersInput[]
  createMany?: Prisma.WeekWinnersCreateManyLeaguemembersInputEnvelope
  connect?: Prisma.WeekWinnersWhereUniqueInput | Prisma.WeekWinnersWhereUniqueInput[]
}

export type WeekWinnersUpdateManyWithoutLeaguemembersNestedInput = {
  create?: Prisma.XOR<Prisma.WeekWinnersCreateWithoutLeaguemembersInput, Prisma.WeekWinnersUncheckedCreateWithoutLeaguemembersInput> | Prisma.WeekWinnersCreateWithoutLeaguemembersInput[] | Prisma.WeekWinnersUncheckedCreateWithoutLeaguemembersInput[]
  connectOrCreate?: Prisma.WeekWinnersCreateOrConnectWithoutLeaguemembersInput | Prisma.WeekWinnersCreateOrConnectWithoutLeaguemembersInput[]
  upsert?: Prisma.WeekWinnersUpsertWithWhereUniqueWithoutLeaguemembersInput | Prisma.WeekWinnersUpsertWithWhereUniqueWithoutLeaguemembersInput[]
  createMany?: Prisma.WeekWinnersCreateManyLeaguemembersInputEnvelope
  set?: Prisma.WeekWinnersWhereUniqueInput | Prisma.WeekWinnersWhereUniqueInput[]
  disconnect?: Prisma.WeekWinnersWhereUniqueInput | Prisma.WeekWinnersWhereUniqueInput[]
  delete?: Prisma.WeekWinnersWhereUniqueInput | Prisma.WeekWinnersWhereUniqueInput[]
  connect?: Prisma.WeekWinnersWhereUniqueInput | Prisma.WeekWinnersWhereUniqueInput[]
  update?: Prisma.WeekWinnersUpdateWithWhereUniqueWithoutLeaguemembersInput | Prisma.WeekWinnersUpdateWithWhereUniqueWithoutLeaguemembersInput[]
  updateMany?: Prisma.WeekWinnersUpdateManyWithWhereWithoutLeaguemembersInput | Prisma.WeekWinnersUpdateManyWithWhereWithoutLeaguemembersInput[]
  deleteMany?: Prisma.WeekWinnersScalarWhereInput | Prisma.WeekWinnersScalarWhereInput[]
}

export type WeekWinnersUncheckedUpdateManyWithoutLeaguemembersNestedInput = {
  create?: Prisma.XOR<Prisma.WeekWinnersCreateWithoutLeaguemembersInput, Prisma.WeekWinnersUncheckedCreateWithoutLeaguemembersInput> | Prisma.WeekWinnersCreateWithoutLeaguemembersInput[] | Prisma.WeekWinnersUncheckedCreateWithoutLeaguemembersInput[]
  connectOrCreate?: Prisma.WeekWinnersCreateOrConnectWithoutLeaguemembersInput | Prisma.WeekWinnersCreateOrConnectWithoutLeaguemembersInput[]
  upsert?: Prisma.WeekWinnersUpsertWithWhereUniqueWithoutLeaguemembersInput | Prisma.WeekWinnersUpsertWithWhereUniqueWithoutLeaguemembersInput[]
  createMany?: Prisma.WeekWinnersCreateManyLeaguemembersInputEnvelope
  set?: Prisma.WeekWinnersWhereUniqueInput | Prisma.WeekWinnersWhereUniqueInput[]
  disconnect?: Prisma.WeekWinnersWhereUniqueInput | Prisma.WeekWinnersWhereUniqueInput[]
  delete?: Prisma.WeekWinnersWhereUniqueInput | Prisma.WeekWinnersWhereUniqueInput[]
  connect?: Prisma.WeekWinnersWhereUniqueInput | Prisma.WeekWinnersWhereUniqueInput[]
  update?: Prisma.WeekWinnersUpdateWithWhereUniqueWithoutLeaguemembersInput | Prisma.WeekWinnersUpdateWithWhereUniqueWithoutLeaguemembersInput[]
  updateMany?: Prisma.WeekWinnersUpdateManyWithWhereWithoutLeaguemembersInput | Prisma.WeekWinnersUpdateManyWithWhereWithoutLeaguemembersInput[]
  deleteMany?: Prisma.WeekWinnersScalarWhereInput | Prisma.WeekWinnersScalarWhereInput[]
}

export type WeekWinnersCreateNestedManyWithoutLeaguesInput = {
  create?: Prisma.XOR<Prisma.WeekWinnersCreateWithoutLeaguesInput, Prisma.WeekWinnersUncheckedCreateWithoutLeaguesInput> | Prisma.WeekWinnersCreateWithoutLeaguesInput[] | Prisma.WeekWinnersUncheckedCreateWithoutLeaguesInput[]
  connectOrCreate?: Prisma.WeekWinnersCreateOrConnectWithoutLeaguesInput | Prisma.WeekWinnersCreateOrConnectWithoutLeaguesInput[]
  createMany?: Prisma.WeekWinnersCreateManyLeaguesInputEnvelope
  connect?: Prisma.WeekWinnersWhereUniqueInput | Prisma.WeekWinnersWhereUniqueInput[]
}

export type WeekWinnersUncheckedCreateNestedManyWithoutLeaguesInput = {
  create?: Prisma.XOR<Prisma.WeekWinnersCreateWithoutLeaguesInput, Prisma.WeekWinnersUncheckedCreateWithoutLeaguesInput> | Prisma.WeekWinnersCreateWithoutLeaguesInput[] | Prisma.WeekWinnersUncheckedCreateWithoutLeaguesInput[]
  connectOrCreate?: Prisma.WeekWinnersCreateOrConnectWithoutLeaguesInput | Prisma.WeekWinnersCreateOrConnectWithoutLeaguesInput[]
  createMany?: Prisma.WeekWinnersCreateManyLeaguesInputEnvelope
  connect?: Prisma.WeekWinnersWhereUniqueInput | Prisma.WeekWinnersWhereUniqueInput[]
}

export type WeekWinnersUpdateManyWithoutLeaguesNestedInput = {
  create?: Prisma.XOR<Prisma.WeekWinnersCreateWithoutLeaguesInput, Prisma.WeekWinnersUncheckedCreateWithoutLeaguesInput> | Prisma.WeekWinnersCreateWithoutLeaguesInput[] | Prisma.WeekWinnersUncheckedCreateWithoutLeaguesInput[]
  connectOrCreate?: Prisma.WeekWinnersCreateOrConnectWithoutLeaguesInput | Prisma.WeekWinnersCreateOrConnectWithoutLeaguesInput[]
  upsert?: Prisma.WeekWinnersUpsertWithWhereUniqueWithoutLeaguesInput | Prisma.WeekWinnersUpsertWithWhereUniqueWithoutLeaguesInput[]
  createMany?: Prisma.WeekWinnersCreateManyLeaguesInputEnvelope
  set?: Prisma.WeekWinnersWhereUniqueInput | Prisma.WeekWinnersWhereUniqueInput[]
  disconnect?: Prisma.WeekWinnersWhereUniqueInput | Prisma.WeekWinnersWhereUniqueInput[]
  delete?: Prisma.WeekWinnersWhereUniqueInput | Prisma.WeekWinnersWhereUniqueInput[]
  connect?: Prisma.WeekWinnersWhereUniqueInput | Prisma.WeekWinnersWhereUniqueInput[]
  update?: Prisma.WeekWinnersUpdateWithWhereUniqueWithoutLeaguesInput | Prisma.WeekWinnersUpdateWithWhereUniqueWithoutLeaguesInput[]
  updateMany?: Prisma.WeekWinnersUpdateManyWithWhereWithoutLeaguesInput | Prisma.WeekWinnersUpdateManyWithWhereWithoutLeaguesInput[]
  deleteMany?: Prisma.WeekWinnersScalarWhereInput | Prisma.WeekWinnersScalarWhereInput[]
}

export type WeekWinnersUncheckedUpdateManyWithoutLeaguesNestedInput = {
  create?: Prisma.XOR<Prisma.WeekWinnersCreateWithoutLeaguesInput, Prisma.WeekWinnersUncheckedCreateWithoutLeaguesInput> | Prisma.WeekWinnersCreateWithoutLeaguesInput[] | Prisma.WeekWinnersUncheckedCreateWithoutLeaguesInput[]
  connectOrCreate?: Prisma.WeekWinnersCreateOrConnectWithoutLeaguesInput | Prisma.WeekWinnersCreateOrConnectWithoutLeaguesInput[]
  upsert?: Prisma.WeekWinnersUpsertWithWhereUniqueWithoutLeaguesInput | Prisma.WeekWinnersUpsertWithWhereUniqueWithoutLeaguesInput[]
  createMany?: Prisma.WeekWinnersCreateManyLeaguesInputEnvelope
  set?: Prisma.WeekWinnersWhereUniqueInput | Prisma.WeekWinnersWhereUniqueInput[]
  disconnect?: Prisma.WeekWinnersWhereUniqueInput | Prisma.WeekWinnersWhereUniqueInput[]
  delete?: Prisma.WeekWinnersWhereUniqueInput | Prisma.WeekWinnersWhereUniqueInput[]
  connect?: Prisma.WeekWinnersWhereUniqueInput | Prisma.WeekWinnersWhereUniqueInput[]
  update?: Prisma.WeekWinnersUpdateWithWhereUniqueWithoutLeaguesInput | Prisma.WeekWinnersUpdateWithWhereUniqueWithoutLeaguesInput[]
  updateMany?: Prisma.WeekWinnersUpdateManyWithWhereWithoutLeaguesInput | Prisma.WeekWinnersUpdateManyWithWhereWithoutLeaguesInput[]
  deleteMany?: Prisma.WeekWinnersScalarWhereInput | Prisma.WeekWinnersScalarWhereInput[]
}

export type WeekWinnersCreateWithoutLeaguemembersInput = {
  week: number
  correct_count: number
  score_diff: number
  leagues: Prisma.leaguesCreateNestedOneWithoutWeekWinnersInput
}

export type WeekWinnersUncheckedCreateWithoutLeaguemembersInput = {
  id?: number
  league_id: number
  week: number
  correct_count: number
  score_diff: number
}

export type WeekWinnersCreateOrConnectWithoutLeaguemembersInput = {
  where: Prisma.WeekWinnersWhereUniqueInput
  create: Prisma.XOR<Prisma.WeekWinnersCreateWithoutLeaguemembersInput, Prisma.WeekWinnersUncheckedCreateWithoutLeaguemembersInput>
}

export type WeekWinnersCreateManyLeaguemembersInputEnvelope = {
  data: Prisma.WeekWinnersCreateManyLeaguemembersInput | Prisma.WeekWinnersCreateManyLeaguemembersInput[]
  skipDuplicates?: boolean
}

export type WeekWinnersUpsertWithWhereUniqueWithoutLeaguemembersInput = {
  where: Prisma.WeekWinnersWhereUniqueInput
  update: Prisma.XOR<Prisma.WeekWinnersUpdateWithoutLeaguemembersInput, Prisma.WeekWinnersUncheckedUpdateWithoutLeaguemembersInput>
  create: Prisma.XOR<Prisma.WeekWinnersCreateWithoutLeaguemembersInput, Prisma.WeekWinnersUncheckedCreateWithoutLeaguemembersInput>
}

export type WeekWinnersUpdateWithWhereUniqueWithoutLeaguemembersInput = {
  where: Prisma.WeekWinnersWhereUniqueInput
  data: Prisma.XOR<Prisma.WeekWinnersUpdateWithoutLeaguemembersInput, Prisma.WeekWinnersUncheckedUpdateWithoutLeaguemembersInput>
}

export type WeekWinnersUpdateManyWithWhereWithoutLeaguemembersInput = {
  where: Prisma.WeekWinnersScalarWhereInput
  data: Prisma.XOR<Prisma.WeekWinnersUpdateManyMutationInput, Prisma.WeekWinnersUncheckedUpdateManyWithoutLeaguemembersInput>
}

export type WeekWinnersScalarWhereInput = {
  AND?: Prisma.WeekWinnersScalarWhereInput | Prisma.WeekWinnersScalarWhereInput[]
  OR?: Prisma.WeekWinnersScalarWhereInput[]
  NOT?: Prisma.WeekWinnersScalarWhereInput | Prisma.WeekWinnersScalarWhereInput[]
  id?: Prisma.IntFilter<"WeekWinners"> | number
  league_id?: Prisma.IntFilter<"WeekWinners"> | number
  membership_id?: Prisma.IntFilter<"WeekWinners"> | number
  week?: Prisma.IntFilter<"WeekWinners"> | number
  correct_count?: Prisma.IntFilter<"WeekWinners"> | number
  score_diff?: Prisma.IntFilter<"WeekWinners"> | number
}

export type WeekWinnersCreateWithoutLeaguesInput = {
  week: number
  correct_count: number
  score_diff: number
  leaguemembers: Prisma.leaguemembersCreateNestedOneWithoutWeekWinnersInput
}

export type WeekWinnersUncheckedCreateWithoutLeaguesInput = {
  id?: number
  membership_id: number
  week: number
  correct_count: number
  score_diff: number
}

export type WeekWinnersCreateOrConnectWithoutLeaguesInput = {
  where: Prisma.WeekWinnersWhereUniqueInput
  create: Prisma.XOR<Prisma.WeekWinnersCreateWithoutLeaguesInput, Prisma.WeekWinnersUncheckedCreateWithoutLeaguesInput>
}

export type WeekWinnersCreateManyLeaguesInputEnvelope = {
  data: Prisma.WeekWinnersCreateManyLeaguesInput | Prisma.WeekWinnersCreateManyLeaguesInput[]
  skipDuplicates?: boolean
}

export type WeekWinnersUpsertWithWhereUniqueWithoutLeaguesInput = {
  where: Prisma.WeekWinnersWhereUniqueInput
  update: Prisma.XOR<Prisma.WeekWinnersUpdateWithoutLeaguesInput, Prisma.WeekWinnersUncheckedUpdateWithoutLeaguesInput>
  create: Prisma.XOR<Prisma.WeekWinnersCreateWithoutLeaguesInput, Prisma.WeekWinnersUncheckedCreateWithoutLeaguesInput>
}

export type WeekWinnersUpdateWithWhereUniqueWithoutLeaguesInput = {
  where: Prisma.WeekWinnersWhereUniqueInput
  data: Prisma.XOR<Prisma.WeekWinnersUpdateWithoutLeaguesInput, Prisma.WeekWinnersUncheckedUpdateWithoutLeaguesInput>
}

export type WeekWinnersUpdateManyWithWhereWithoutLeaguesInput = {
  where: Prisma.WeekWinnersScalarWhereInput
  data: Prisma.XOR<Prisma.WeekWinnersUpdateManyMutationInput, Prisma.WeekWinnersUncheckedUpdateManyWithoutLeaguesInput>
}

export type WeekWinnersCreateManyLeaguemembersInput = {
  id?: number
  league_id: number
  week: number
  correct_count: number
  score_diff: number
}

export type WeekWinnersUpdateWithoutLeaguemembersInput = {
  week?: Prisma.IntFieldUpdateOperationsInput | number
  correct_count?: Prisma.IntFieldUpdateOperationsInput | number
  score_diff?: Prisma.IntFieldUpdateOperationsInput | number
  leagues?: Prisma.leaguesUpdateOneRequiredWithoutWeekWinnersNestedInput
}

export type WeekWinnersUncheckedUpdateWithoutLeaguemembersInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  league_id?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  correct_count?: Prisma.IntFieldUpdateOperationsInput | number
  score_diff?: Prisma.IntFieldUpdateOperationsInput | number
}

export type WeekWinnersUncheckedUpdateManyWithoutLeaguemembersInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  league_id?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  correct_count?: Prisma.IntFieldUpdateOperationsInput | number
  score_diff?: Prisma.IntFieldUpdateOperationsInput | number
}

export type WeekWinnersCreateManyLeaguesInput = {
  id?: number
  membership_id: number
  week: number
  correct_count: number
  score_diff: number
}

export type WeekWinnersUpdateWithoutLeaguesInput = {
  week?: Prisma.IntFieldUpdateOperationsInput | number
  correct_count?: Prisma.IntFieldUpdateOperationsInput | number
  score_diff?: Prisma.IntFieldUpdateOperationsInput | number
  leaguemembers?: Prisma.leaguemembersUpdateOneRequiredWithoutWeekWinnersNestedInput
}

export type WeekWinnersUncheckedUpdateWithoutLeaguesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  membership_id?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  correct_count?: Prisma.IntFieldUpdateOperationsInput | number
  score_diff?: Prisma.IntFieldUpdateOperationsInput | number
}

export type WeekWinnersUncheckedUpdateManyWithoutLeaguesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  membership_id?: Prisma.IntFieldUpdateOperationsInput | number
  week?: Prisma.IntFieldUpdateOperationsInput | number
  correct_count?: Prisma.IntFieldUpdateOperationsInput | number
  score_diff?: Prisma.IntFieldUpdateOperationsInput | number
}



export type WeekWinnersSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  league_id?: boolean
  membership_id?: boolean
  week?: boolean
  correct_count?: boolean
  score_diff?: boolean
  leagues?: boolean | Prisma.leaguesDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.leaguemembersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["weekWinners"]>

export type WeekWinnersSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  league_id?: boolean
  membership_id?: boolean
  week?: boolean
  correct_count?: boolean
  score_diff?: boolean
  leagues?: boolean | Prisma.leaguesDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.leaguemembersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["weekWinners"]>

export type WeekWinnersSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  league_id?: boolean
  membership_id?: boolean
  week?: boolean
  correct_count?: boolean
  score_diff?: boolean
  leagues?: boolean | Prisma.leaguesDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.leaguemembersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["weekWinners"]>

export type WeekWinnersSelectScalar = {
  id?: boolean
  league_id?: boolean
  membership_id?: boolean
  week?: boolean
  correct_count?: boolean
  score_diff?: boolean
}

export type WeekWinnersOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "league_id" | "membership_id" | "week" | "correct_count" | "score_diff", ExtArgs["result"]["weekWinners"]>
export type WeekWinnersInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  leagues?: boolean | Prisma.leaguesDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.leaguemembersDefaultArgs<ExtArgs>
}
export type WeekWinnersIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  leagues?: boolean | Prisma.leaguesDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.leaguemembersDefaultArgs<ExtArgs>
}
export type WeekWinnersIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  leagues?: boolean | Prisma.leaguesDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.leaguemembersDefaultArgs<ExtArgs>
}

export type $WeekWinnersPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "WeekWinners"
  objects: {
    leagues: Prisma.$leaguesPayload<ExtArgs>
    leaguemembers: Prisma.$leaguemembersPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    league_id: number
    membership_id: number
    week: number
    correct_count: number
    score_diff: number
  }, ExtArgs["result"]["weekWinners"]>
  composites: {}
}

export type WeekWinnersGetPayload<S extends boolean | null | undefined | WeekWinnersDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$WeekWinnersPayload, S>

export type WeekWinnersCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<WeekWinnersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: WeekWinnersCountAggregateInputType | true
  }

export interface WeekWinnersDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WeekWinners'], meta: { name: 'WeekWinners' } }
  /**
   * Find zero or one WeekWinners that matches the filter.
   * @param {WeekWinnersFindUniqueArgs} args - Arguments to find a WeekWinners
   * @example
   * // Get one WeekWinners
   * const weekWinners = await prisma.weekWinners.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends WeekWinnersFindUniqueArgs>(args: Prisma.SelectSubset<T, WeekWinnersFindUniqueArgs<ExtArgs>>): Prisma.Prisma__WeekWinnersClient<runtime.Types.Result.GetResult<Prisma.$WeekWinnersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one WeekWinners that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {WeekWinnersFindUniqueOrThrowArgs} args - Arguments to find a WeekWinners
   * @example
   * // Get one WeekWinners
   * const weekWinners = await prisma.weekWinners.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends WeekWinnersFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, WeekWinnersFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__WeekWinnersClient<runtime.Types.Result.GetResult<Prisma.$WeekWinnersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WeekWinners that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WeekWinnersFindFirstArgs} args - Arguments to find a WeekWinners
   * @example
   * // Get one WeekWinners
   * const weekWinners = await prisma.weekWinners.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends WeekWinnersFindFirstArgs>(args?: Prisma.SelectSubset<T, WeekWinnersFindFirstArgs<ExtArgs>>): Prisma.Prisma__WeekWinnersClient<runtime.Types.Result.GetResult<Prisma.$WeekWinnersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first WeekWinners that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WeekWinnersFindFirstOrThrowArgs} args - Arguments to find a WeekWinners
   * @example
   * // Get one WeekWinners
   * const weekWinners = await prisma.weekWinners.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends WeekWinnersFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, WeekWinnersFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__WeekWinnersClient<runtime.Types.Result.GetResult<Prisma.$WeekWinnersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more WeekWinners that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WeekWinnersFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all WeekWinners
   * const weekWinners = await prisma.weekWinners.findMany()
   * 
   * // Get first 10 WeekWinners
   * const weekWinners = await prisma.weekWinners.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const weekWinnersWithIdOnly = await prisma.weekWinners.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends WeekWinnersFindManyArgs>(args?: Prisma.SelectSubset<T, WeekWinnersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WeekWinnersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a WeekWinners.
   * @param {WeekWinnersCreateArgs} args - Arguments to create a WeekWinners.
   * @example
   * // Create one WeekWinners
   * const WeekWinners = await prisma.weekWinners.create({
   *   data: {
   *     // ... data to create a WeekWinners
   *   }
   * })
   * 
   */
  create<T extends WeekWinnersCreateArgs>(args: Prisma.SelectSubset<T, WeekWinnersCreateArgs<ExtArgs>>): Prisma.Prisma__WeekWinnersClient<runtime.Types.Result.GetResult<Prisma.$WeekWinnersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many WeekWinners.
   * @param {WeekWinnersCreateManyArgs} args - Arguments to create many WeekWinners.
   * @example
   * // Create many WeekWinners
   * const weekWinners = await prisma.weekWinners.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends WeekWinnersCreateManyArgs>(args?: Prisma.SelectSubset<T, WeekWinnersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many WeekWinners and returns the data saved in the database.
   * @param {WeekWinnersCreateManyAndReturnArgs} args - Arguments to create many WeekWinners.
   * @example
   * // Create many WeekWinners
   * const weekWinners = await prisma.weekWinners.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many WeekWinners and only return the `id`
   * const weekWinnersWithIdOnly = await prisma.weekWinners.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends WeekWinnersCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, WeekWinnersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WeekWinnersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a WeekWinners.
   * @param {WeekWinnersDeleteArgs} args - Arguments to delete one WeekWinners.
   * @example
   * // Delete one WeekWinners
   * const WeekWinners = await prisma.weekWinners.delete({
   *   where: {
   *     // ... filter to delete one WeekWinners
   *   }
   * })
   * 
   */
  delete<T extends WeekWinnersDeleteArgs>(args: Prisma.SelectSubset<T, WeekWinnersDeleteArgs<ExtArgs>>): Prisma.Prisma__WeekWinnersClient<runtime.Types.Result.GetResult<Prisma.$WeekWinnersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one WeekWinners.
   * @param {WeekWinnersUpdateArgs} args - Arguments to update one WeekWinners.
   * @example
   * // Update one WeekWinners
   * const weekWinners = await prisma.weekWinners.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends WeekWinnersUpdateArgs>(args: Prisma.SelectSubset<T, WeekWinnersUpdateArgs<ExtArgs>>): Prisma.Prisma__WeekWinnersClient<runtime.Types.Result.GetResult<Prisma.$WeekWinnersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more WeekWinners.
   * @param {WeekWinnersDeleteManyArgs} args - Arguments to filter WeekWinners to delete.
   * @example
   * // Delete a few WeekWinners
   * const { count } = await prisma.weekWinners.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends WeekWinnersDeleteManyArgs>(args?: Prisma.SelectSubset<T, WeekWinnersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WeekWinners.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WeekWinnersUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many WeekWinners
   * const weekWinners = await prisma.weekWinners.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends WeekWinnersUpdateManyArgs>(args: Prisma.SelectSubset<T, WeekWinnersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more WeekWinners and returns the data updated in the database.
   * @param {WeekWinnersUpdateManyAndReturnArgs} args - Arguments to update many WeekWinners.
   * @example
   * // Update many WeekWinners
   * const weekWinners = await prisma.weekWinners.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more WeekWinners and only return the `id`
   * const weekWinnersWithIdOnly = await prisma.weekWinners.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends WeekWinnersUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, WeekWinnersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WeekWinnersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one WeekWinners.
   * @param {WeekWinnersUpsertArgs} args - Arguments to update or create a WeekWinners.
   * @example
   * // Update or create a WeekWinners
   * const weekWinners = await prisma.weekWinners.upsert({
   *   create: {
   *     // ... data to create a WeekWinners
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the WeekWinners we want to update
   *   }
   * })
   */
  upsert<T extends WeekWinnersUpsertArgs>(args: Prisma.SelectSubset<T, WeekWinnersUpsertArgs<ExtArgs>>): Prisma.Prisma__WeekWinnersClient<runtime.Types.Result.GetResult<Prisma.$WeekWinnersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of WeekWinners.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WeekWinnersCountArgs} args - Arguments to filter WeekWinners to count.
   * @example
   * // Count the number of WeekWinners
   * const count = await prisma.weekWinners.count({
   *   where: {
   *     // ... the filter for the WeekWinners we want to count
   *   }
   * })
  **/
  count<T extends WeekWinnersCountArgs>(
    args?: Prisma.Subset<T, WeekWinnersCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], WeekWinnersCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a WeekWinners.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WeekWinnersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends WeekWinnersAggregateArgs>(args: Prisma.Subset<T, WeekWinnersAggregateArgs>): Prisma.PrismaPromise<GetWeekWinnersAggregateType<T>>

  /**
   * Group by WeekWinners.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {WeekWinnersGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends WeekWinnersGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: WeekWinnersGroupByArgs['orderBy'] }
      : { orderBy?: WeekWinnersGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, WeekWinnersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWeekWinnersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the WeekWinners model
 */
readonly fields: WeekWinnersFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for WeekWinners.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__WeekWinnersClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  leagues<T extends Prisma.leaguesDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.leaguesDefaultArgs<ExtArgs>>): Prisma.Prisma__leaguesClient<runtime.Types.Result.GetResult<Prisma.$leaguesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  leaguemembers<T extends Prisma.leaguemembersDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.leaguemembersDefaultArgs<ExtArgs>>): Prisma.Prisma__leaguemembersClient<runtime.Types.Result.GetResult<Prisma.$leaguemembersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the WeekWinners model
 */
export interface WeekWinnersFieldRefs {
  readonly id: Prisma.FieldRef<"WeekWinners", 'Int'>
  readonly league_id: Prisma.FieldRef<"WeekWinners", 'Int'>
  readonly membership_id: Prisma.FieldRef<"WeekWinners", 'Int'>
  readonly week: Prisma.FieldRef<"WeekWinners", 'Int'>
  readonly correct_count: Prisma.FieldRef<"WeekWinners", 'Int'>
  readonly score_diff: Prisma.FieldRef<"WeekWinners", 'Int'>
}
    

// Custom InputTypes
/**
 * WeekWinners findUnique
 */
export type WeekWinnersFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WeekWinners
   */
  select?: Prisma.WeekWinnersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WeekWinners
   */
  omit?: Prisma.WeekWinnersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WeekWinnersInclude<ExtArgs> | null
  /**
   * Filter, which WeekWinners to fetch.
   */
  where: Prisma.WeekWinnersWhereUniqueInput
}

/**
 * WeekWinners findUniqueOrThrow
 */
export type WeekWinnersFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WeekWinners
   */
  select?: Prisma.WeekWinnersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WeekWinners
   */
  omit?: Prisma.WeekWinnersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WeekWinnersInclude<ExtArgs> | null
  /**
   * Filter, which WeekWinners to fetch.
   */
  where: Prisma.WeekWinnersWhereUniqueInput
}

/**
 * WeekWinners findFirst
 */
export type WeekWinnersFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WeekWinners
   */
  select?: Prisma.WeekWinnersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WeekWinners
   */
  omit?: Prisma.WeekWinnersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WeekWinnersInclude<ExtArgs> | null
  /**
   * Filter, which WeekWinners to fetch.
   */
  where?: Prisma.WeekWinnersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WeekWinners to fetch.
   */
  orderBy?: Prisma.WeekWinnersOrderByWithRelationInput | Prisma.WeekWinnersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WeekWinners.
   */
  cursor?: Prisma.WeekWinnersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WeekWinners from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WeekWinners.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WeekWinners.
   */
  distinct?: Prisma.WeekWinnersScalarFieldEnum | Prisma.WeekWinnersScalarFieldEnum[]
}

/**
 * WeekWinners findFirstOrThrow
 */
export type WeekWinnersFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WeekWinners
   */
  select?: Prisma.WeekWinnersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WeekWinners
   */
  omit?: Prisma.WeekWinnersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WeekWinnersInclude<ExtArgs> | null
  /**
   * Filter, which WeekWinners to fetch.
   */
  where?: Prisma.WeekWinnersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WeekWinners to fetch.
   */
  orderBy?: Prisma.WeekWinnersOrderByWithRelationInput | Prisma.WeekWinnersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for WeekWinners.
   */
  cursor?: Prisma.WeekWinnersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WeekWinners from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WeekWinners.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of WeekWinners.
   */
  distinct?: Prisma.WeekWinnersScalarFieldEnum | Prisma.WeekWinnersScalarFieldEnum[]
}

/**
 * WeekWinners findMany
 */
export type WeekWinnersFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WeekWinners
   */
  select?: Prisma.WeekWinnersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WeekWinners
   */
  omit?: Prisma.WeekWinnersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WeekWinnersInclude<ExtArgs> | null
  /**
   * Filter, which WeekWinners to fetch.
   */
  where?: Prisma.WeekWinnersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of WeekWinners to fetch.
   */
  orderBy?: Prisma.WeekWinnersOrderByWithRelationInput | Prisma.WeekWinnersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing WeekWinners.
   */
  cursor?: Prisma.WeekWinnersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` WeekWinners from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` WeekWinners.
   */
  skip?: number
  distinct?: Prisma.WeekWinnersScalarFieldEnum | Prisma.WeekWinnersScalarFieldEnum[]
}

/**
 * WeekWinners create
 */
export type WeekWinnersCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WeekWinners
   */
  select?: Prisma.WeekWinnersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WeekWinners
   */
  omit?: Prisma.WeekWinnersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WeekWinnersInclude<ExtArgs> | null
  /**
   * The data needed to create a WeekWinners.
   */
  data: Prisma.XOR<Prisma.WeekWinnersCreateInput, Prisma.WeekWinnersUncheckedCreateInput>
}

/**
 * WeekWinners createMany
 */
export type WeekWinnersCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many WeekWinners.
   */
  data: Prisma.WeekWinnersCreateManyInput | Prisma.WeekWinnersCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * WeekWinners createManyAndReturn
 */
export type WeekWinnersCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WeekWinners
   */
  select?: Prisma.WeekWinnersSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WeekWinners
   */
  omit?: Prisma.WeekWinnersOmit<ExtArgs> | null
  /**
   * The data used to create many WeekWinners.
   */
  data: Prisma.WeekWinnersCreateManyInput | Prisma.WeekWinnersCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WeekWinnersIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * WeekWinners update
 */
export type WeekWinnersUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WeekWinners
   */
  select?: Prisma.WeekWinnersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WeekWinners
   */
  omit?: Prisma.WeekWinnersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WeekWinnersInclude<ExtArgs> | null
  /**
   * The data needed to update a WeekWinners.
   */
  data: Prisma.XOR<Prisma.WeekWinnersUpdateInput, Prisma.WeekWinnersUncheckedUpdateInput>
  /**
   * Choose, which WeekWinners to update.
   */
  where: Prisma.WeekWinnersWhereUniqueInput
}

/**
 * WeekWinners updateMany
 */
export type WeekWinnersUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update WeekWinners.
   */
  data: Prisma.XOR<Prisma.WeekWinnersUpdateManyMutationInput, Prisma.WeekWinnersUncheckedUpdateManyInput>
  /**
   * Filter which WeekWinners to update
   */
  where?: Prisma.WeekWinnersWhereInput
  /**
   * Limit how many WeekWinners to update.
   */
  limit?: number
}

/**
 * WeekWinners updateManyAndReturn
 */
export type WeekWinnersUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WeekWinners
   */
  select?: Prisma.WeekWinnersSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the WeekWinners
   */
  omit?: Prisma.WeekWinnersOmit<ExtArgs> | null
  /**
   * The data used to update WeekWinners.
   */
  data: Prisma.XOR<Prisma.WeekWinnersUpdateManyMutationInput, Prisma.WeekWinnersUncheckedUpdateManyInput>
  /**
   * Filter which WeekWinners to update
   */
  where?: Prisma.WeekWinnersWhereInput
  /**
   * Limit how many WeekWinners to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WeekWinnersIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * WeekWinners upsert
 */
export type WeekWinnersUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WeekWinners
   */
  select?: Prisma.WeekWinnersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WeekWinners
   */
  omit?: Prisma.WeekWinnersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WeekWinnersInclude<ExtArgs> | null
  /**
   * The filter to search for the WeekWinners to update in case it exists.
   */
  where: Prisma.WeekWinnersWhereUniqueInput
  /**
   * In case the WeekWinners found by the `where` argument doesn't exist, create a new WeekWinners with this data.
   */
  create: Prisma.XOR<Prisma.WeekWinnersCreateInput, Prisma.WeekWinnersUncheckedCreateInput>
  /**
   * In case the WeekWinners was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.WeekWinnersUpdateInput, Prisma.WeekWinnersUncheckedUpdateInput>
}

/**
 * WeekWinners delete
 */
export type WeekWinnersDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WeekWinners
   */
  select?: Prisma.WeekWinnersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WeekWinners
   */
  omit?: Prisma.WeekWinnersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WeekWinnersInclude<ExtArgs> | null
  /**
   * Filter which WeekWinners to delete.
   */
  where: Prisma.WeekWinnersWhereUniqueInput
}

/**
 * WeekWinners deleteMany
 */
export type WeekWinnersDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which WeekWinners to delete
   */
  where?: Prisma.WeekWinnersWhereInput
  /**
   * Limit how many WeekWinners to delete.
   */
  limit?: number
}

/**
 * WeekWinners without action
 */
export type WeekWinnersDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WeekWinners
   */
  select?: Prisma.WeekWinnersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WeekWinners
   */
  omit?: Prisma.WeekWinnersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WeekWinnersInclude<ExtArgs> | null
}
