
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `EmailLogs` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model EmailLogs
 * 
 */
export type EmailLogsModel = runtime.Types.Result.DefaultSelection<Prisma.$EmailLogsPayload>

export type AggregateEmailLogs = {
  _count: EmailLogsCountAggregateOutputType | null
  _avg: EmailLogsAvgAggregateOutputType | null
  _sum: EmailLogsSumAggregateOutputType | null
  _min: EmailLogsMinAggregateOutputType | null
  _max: EmailLogsMaxAggregateOutputType | null
}

export type EmailLogsAvgAggregateOutputType = {
  league_id: number | null
  member_id: number | null
  week: number | null
}

export type EmailLogsSumAggregateOutputType = {
  league_id: number | null
  member_id: number | null
  week: number | null
}

export type EmailLogsMinAggregateOutputType = {
  email_log_id: string | null
  league_id: number | null
  member_id: number | null
  email_type: $Enums.EmailType | null
  ts: Date | null
  week: number | null
  resend_id: string | null
}

export type EmailLogsMaxAggregateOutputType = {
  email_log_id: string | null
  league_id: number | null
  member_id: number | null
  email_type: $Enums.EmailType | null
  ts: Date | null
  week: number | null
  resend_id: string | null
}

export type EmailLogsCountAggregateOutputType = {
  email_log_id: number
  league_id: number
  member_id: number
  email_type: number
  ts: number
  week: number
  resend_id: number
  _all: number
}


export type EmailLogsAvgAggregateInputType = {
  league_id?: true
  member_id?: true
  week?: true
}

export type EmailLogsSumAggregateInputType = {
  league_id?: true
  member_id?: true
  week?: true
}

export type EmailLogsMinAggregateInputType = {
  email_log_id?: true
  league_id?: true
  member_id?: true
  email_type?: true
  ts?: true
  week?: true
  resend_id?: true
}

export type EmailLogsMaxAggregateInputType = {
  email_log_id?: true
  league_id?: true
  member_id?: true
  email_type?: true
  ts?: true
  week?: true
  resend_id?: true
}

export type EmailLogsCountAggregateInputType = {
  email_log_id?: true
  league_id?: true
  member_id?: true
  email_type?: true
  ts?: true
  week?: true
  resend_id?: true
  _all?: true
}

export type EmailLogsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EmailLogs to aggregate.
   */
  where?: Prisma.EmailLogsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmailLogs to fetch.
   */
  orderBy?: Prisma.EmailLogsOrderByWithRelationInput | Prisma.EmailLogsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EmailLogsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmailLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmailLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned EmailLogs
  **/
  _count?: true | EmailLogsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: EmailLogsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: EmailLogsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EmailLogsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EmailLogsMaxAggregateInputType
}

export type GetEmailLogsAggregateType<T extends EmailLogsAggregateArgs> = {
      [P in keyof T & keyof AggregateEmailLogs]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEmailLogs[P]>
    : Prisma.GetScalarType<T[P], AggregateEmailLogs[P]>
}




export type EmailLogsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EmailLogsWhereInput
  orderBy?: Prisma.EmailLogsOrderByWithAggregationInput | Prisma.EmailLogsOrderByWithAggregationInput[]
  by: Prisma.EmailLogsScalarFieldEnum[] | Prisma.EmailLogsScalarFieldEnum
  having?: Prisma.EmailLogsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EmailLogsCountAggregateInputType | true
  _avg?: EmailLogsAvgAggregateInputType
  _sum?: EmailLogsSumAggregateInputType
  _min?: EmailLogsMinAggregateInputType
  _max?: EmailLogsMaxAggregateInputType
}

export type EmailLogsGroupByOutputType = {
  email_log_id: string
  league_id: number
  member_id: number
  email_type: $Enums.EmailType
  ts: Date
  week: number | null
  resend_id: string
  _count: EmailLogsCountAggregateOutputType | null
  _avg: EmailLogsAvgAggregateOutputType | null
  _sum: EmailLogsSumAggregateOutputType | null
  _min: EmailLogsMinAggregateOutputType | null
  _max: EmailLogsMaxAggregateOutputType | null
}

type GetEmailLogsGroupByPayload<T extends EmailLogsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EmailLogsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EmailLogsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EmailLogsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EmailLogsGroupByOutputType[P]>
      }
    >
  > 



export type EmailLogsWhereInput = {
  AND?: Prisma.EmailLogsWhereInput | Prisma.EmailLogsWhereInput[]
  OR?: Prisma.EmailLogsWhereInput[]
  NOT?: Prisma.EmailLogsWhereInput | Prisma.EmailLogsWhereInput[]
  email_log_id?: Prisma.StringFilter<"EmailLogs"> | string
  league_id?: Prisma.IntFilter<"EmailLogs"> | number
  member_id?: Prisma.IntFilter<"EmailLogs"> | number
  email_type?: Prisma.EnumEmailTypeFilter<"EmailLogs"> | $Enums.EmailType
  ts?: Prisma.DateTimeFilter<"EmailLogs"> | Date | string
  week?: Prisma.IntNullableFilter<"EmailLogs"> | number | null
  resend_id?: Prisma.StringFilter<"EmailLogs"> | string
  leagues?: Prisma.XOR<Prisma.LeaguesScalarRelationFilter, Prisma.leaguesWhereInput>
  leaguemembers?: Prisma.XOR<Prisma.LeaguemembersScalarRelationFilter, Prisma.leaguemembersWhereInput>
}

export type EmailLogsOrderByWithRelationInput = {
  email_log_id?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  member_id?: Prisma.SortOrder
  email_type?: Prisma.SortOrder
  ts?: Prisma.SortOrder
  week?: Prisma.SortOrderInput | Prisma.SortOrder
  resend_id?: Prisma.SortOrder
  leagues?: Prisma.leaguesOrderByWithRelationInput
  leaguemembers?: Prisma.leaguemembersOrderByWithRelationInput
}

export type EmailLogsWhereUniqueInput = Prisma.AtLeast<{
  email_log_id?: string
  AND?: Prisma.EmailLogsWhereInput | Prisma.EmailLogsWhereInput[]
  OR?: Prisma.EmailLogsWhereInput[]
  NOT?: Prisma.EmailLogsWhereInput | Prisma.EmailLogsWhereInput[]
  league_id?: Prisma.IntFilter<"EmailLogs"> | number
  member_id?: Prisma.IntFilter<"EmailLogs"> | number
  email_type?: Prisma.EnumEmailTypeFilter<"EmailLogs"> | $Enums.EmailType
  ts?: Prisma.DateTimeFilter<"EmailLogs"> | Date | string
  week?: Prisma.IntNullableFilter<"EmailLogs"> | number | null
  resend_id?: Prisma.StringFilter<"EmailLogs"> | string
  leagues?: Prisma.XOR<Prisma.LeaguesScalarRelationFilter, Prisma.leaguesWhereInput>
  leaguemembers?: Prisma.XOR<Prisma.LeaguemembersScalarRelationFilter, Prisma.leaguemembersWhereInput>
}, "email_log_id">

export type EmailLogsOrderByWithAggregationInput = {
  email_log_id?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  member_id?: Prisma.SortOrder
  email_type?: Prisma.SortOrder
  ts?: Prisma.SortOrder
  week?: Prisma.SortOrderInput | Prisma.SortOrder
  resend_id?: Prisma.SortOrder
  _count?: Prisma.EmailLogsCountOrderByAggregateInput
  _avg?: Prisma.EmailLogsAvgOrderByAggregateInput
  _max?: Prisma.EmailLogsMaxOrderByAggregateInput
  _min?: Prisma.EmailLogsMinOrderByAggregateInput
  _sum?: Prisma.EmailLogsSumOrderByAggregateInput
}

export type EmailLogsScalarWhereWithAggregatesInput = {
  AND?: Prisma.EmailLogsScalarWhereWithAggregatesInput | Prisma.EmailLogsScalarWhereWithAggregatesInput[]
  OR?: Prisma.EmailLogsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EmailLogsScalarWhereWithAggregatesInput | Prisma.EmailLogsScalarWhereWithAggregatesInput[]
  email_log_id?: Prisma.StringWithAggregatesFilter<"EmailLogs"> | string
  league_id?: Prisma.IntWithAggregatesFilter<"EmailLogs"> | number
  member_id?: Prisma.IntWithAggregatesFilter<"EmailLogs"> | number
  email_type?: Prisma.EnumEmailTypeWithAggregatesFilter<"EmailLogs"> | $Enums.EmailType
  ts?: Prisma.DateTimeWithAggregatesFilter<"EmailLogs"> | Date | string
  week?: Prisma.IntNullableWithAggregatesFilter<"EmailLogs"> | number | null
  resend_id?: Prisma.StringWithAggregatesFilter<"EmailLogs"> | string
}

export type EmailLogsCreateInput = {
  email_log_id?: string
  email_type: $Enums.EmailType
  ts?: Date | string
  week?: number | null
  resend_id: string
  leagues: Prisma.leaguesCreateNestedOneWithoutEmailLogsInput
  leaguemembers: Prisma.leaguemembersCreateNestedOneWithoutEmailLogsInput
}

export type EmailLogsUncheckedCreateInput = {
  email_log_id?: string
  league_id: number
  member_id: number
  email_type: $Enums.EmailType
  ts?: Date | string
  week?: number | null
  resend_id: string
}

export type EmailLogsUpdateInput = {
  email_log_id?: Prisma.StringFieldUpdateOperationsInput | string
  email_type?: Prisma.EnumEmailTypeFieldUpdateOperationsInput | $Enums.EmailType
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  week?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  resend_id?: Prisma.StringFieldUpdateOperationsInput | string
  leagues?: Prisma.leaguesUpdateOneRequiredWithoutEmailLogsNestedInput
  leaguemembers?: Prisma.leaguemembersUpdateOneRequiredWithoutEmailLogsNestedInput
}

export type EmailLogsUncheckedUpdateInput = {
  email_log_id?: Prisma.StringFieldUpdateOperationsInput | string
  league_id?: Prisma.IntFieldUpdateOperationsInput | number
  member_id?: Prisma.IntFieldUpdateOperationsInput | number
  email_type?: Prisma.EnumEmailTypeFieldUpdateOperationsInput | $Enums.EmailType
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  week?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  resend_id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type EmailLogsCreateManyInput = {
  email_log_id?: string
  league_id: number
  member_id: number
  email_type: $Enums.EmailType
  ts?: Date | string
  week?: number | null
  resend_id: string
}

export type EmailLogsUpdateManyMutationInput = {
  email_log_id?: Prisma.StringFieldUpdateOperationsInput | string
  email_type?: Prisma.EnumEmailTypeFieldUpdateOperationsInput | $Enums.EmailType
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  week?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  resend_id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type EmailLogsUncheckedUpdateManyInput = {
  email_log_id?: Prisma.StringFieldUpdateOperationsInput | string
  league_id?: Prisma.IntFieldUpdateOperationsInput | number
  member_id?: Prisma.IntFieldUpdateOperationsInput | number
  email_type?: Prisma.EnumEmailTypeFieldUpdateOperationsInput | $Enums.EmailType
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  week?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  resend_id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type EmailLogsCountOrderByAggregateInput = {
  email_log_id?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  member_id?: Prisma.SortOrder
  email_type?: Prisma.SortOrder
  ts?: Prisma.SortOrder
  week?: Prisma.SortOrder
  resend_id?: Prisma.SortOrder
}

export type EmailLogsAvgOrderByAggregateInput = {
  league_id?: Prisma.SortOrder
  member_id?: Prisma.SortOrder
  week?: Prisma.SortOrder
}

export type EmailLogsMaxOrderByAggregateInput = {
  email_log_id?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  member_id?: Prisma.SortOrder
  email_type?: Prisma.SortOrder
  ts?: Prisma.SortOrder
  week?: Prisma.SortOrder
  resend_id?: Prisma.SortOrder
}

export type EmailLogsMinOrderByAggregateInput = {
  email_log_id?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  member_id?: Prisma.SortOrder
  email_type?: Prisma.SortOrder
  ts?: Prisma.SortOrder
  week?: Prisma.SortOrder
  resend_id?: Prisma.SortOrder
}

export type EmailLogsSumOrderByAggregateInput = {
  league_id?: Prisma.SortOrder
  member_id?: Prisma.SortOrder
  week?: Prisma.SortOrder
}

export type EmailLogsListRelationFilter = {
  every?: Prisma.EmailLogsWhereInput
  some?: Prisma.EmailLogsWhereInput
  none?: Prisma.EmailLogsWhereInput
}

export type EmailLogsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type EnumEmailTypeFieldUpdateOperationsInput = {
  set?: $Enums.EmailType
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type EmailLogsCreateNestedManyWithoutLeaguemembersInput = {
  create?: Prisma.XOR<Prisma.EmailLogsCreateWithoutLeaguemembersInput, Prisma.EmailLogsUncheckedCreateWithoutLeaguemembersInput> | Prisma.EmailLogsCreateWithoutLeaguemembersInput[] | Prisma.EmailLogsUncheckedCreateWithoutLeaguemembersInput[]
  connectOrCreate?: Prisma.EmailLogsCreateOrConnectWithoutLeaguemembersInput | Prisma.EmailLogsCreateOrConnectWithoutLeaguemembersInput[]
  createMany?: Prisma.EmailLogsCreateManyLeaguemembersInputEnvelope
  connect?: Prisma.EmailLogsWhereUniqueInput | Prisma.EmailLogsWhereUniqueInput[]
}

export type EmailLogsUncheckedCreateNestedManyWithoutLeaguemembersInput = {
  create?: Prisma.XOR<Prisma.EmailLogsCreateWithoutLeaguemembersInput, Prisma.EmailLogsUncheckedCreateWithoutLeaguemembersInput> | Prisma.EmailLogsCreateWithoutLeaguemembersInput[] | Prisma.EmailLogsUncheckedCreateWithoutLeaguemembersInput[]
  connectOrCreate?: Prisma.EmailLogsCreateOrConnectWithoutLeaguemembersInput | Prisma.EmailLogsCreateOrConnectWithoutLeaguemembersInput[]
  createMany?: Prisma.EmailLogsCreateManyLeaguemembersInputEnvelope
  connect?: Prisma.EmailLogsWhereUniqueInput | Prisma.EmailLogsWhereUniqueInput[]
}

export type EmailLogsUpdateManyWithoutLeaguemembersNestedInput = {
  create?: Prisma.XOR<Prisma.EmailLogsCreateWithoutLeaguemembersInput, Prisma.EmailLogsUncheckedCreateWithoutLeaguemembersInput> | Prisma.EmailLogsCreateWithoutLeaguemembersInput[] | Prisma.EmailLogsUncheckedCreateWithoutLeaguemembersInput[]
  connectOrCreate?: Prisma.EmailLogsCreateOrConnectWithoutLeaguemembersInput | Prisma.EmailLogsCreateOrConnectWithoutLeaguemembersInput[]
  upsert?: Prisma.EmailLogsUpsertWithWhereUniqueWithoutLeaguemembersInput | Prisma.EmailLogsUpsertWithWhereUniqueWithoutLeaguemembersInput[]
  createMany?: Prisma.EmailLogsCreateManyLeaguemembersInputEnvelope
  set?: Prisma.EmailLogsWhereUniqueInput | Prisma.EmailLogsWhereUniqueInput[]
  disconnect?: Prisma.EmailLogsWhereUniqueInput | Prisma.EmailLogsWhereUniqueInput[]
  delete?: Prisma.EmailLogsWhereUniqueInput | Prisma.EmailLogsWhereUniqueInput[]
  connect?: Prisma.EmailLogsWhereUniqueInput | Prisma.EmailLogsWhereUniqueInput[]
  update?: Prisma.EmailLogsUpdateWithWhereUniqueWithoutLeaguemembersInput | Prisma.EmailLogsUpdateWithWhereUniqueWithoutLeaguemembersInput[]
  updateMany?: Prisma.EmailLogsUpdateManyWithWhereWithoutLeaguemembersInput | Prisma.EmailLogsUpdateManyWithWhereWithoutLeaguemembersInput[]
  deleteMany?: Prisma.EmailLogsScalarWhereInput | Prisma.EmailLogsScalarWhereInput[]
}

export type EmailLogsUncheckedUpdateManyWithoutLeaguemembersNestedInput = {
  create?: Prisma.XOR<Prisma.EmailLogsCreateWithoutLeaguemembersInput, Prisma.EmailLogsUncheckedCreateWithoutLeaguemembersInput> | Prisma.EmailLogsCreateWithoutLeaguemembersInput[] | Prisma.EmailLogsUncheckedCreateWithoutLeaguemembersInput[]
  connectOrCreate?: Prisma.EmailLogsCreateOrConnectWithoutLeaguemembersInput | Prisma.EmailLogsCreateOrConnectWithoutLeaguemembersInput[]
  upsert?: Prisma.EmailLogsUpsertWithWhereUniqueWithoutLeaguemembersInput | Prisma.EmailLogsUpsertWithWhereUniqueWithoutLeaguemembersInput[]
  createMany?: Prisma.EmailLogsCreateManyLeaguemembersInputEnvelope
  set?: Prisma.EmailLogsWhereUniqueInput | Prisma.EmailLogsWhereUniqueInput[]
  disconnect?: Prisma.EmailLogsWhereUniqueInput | Prisma.EmailLogsWhereUniqueInput[]
  delete?: Prisma.EmailLogsWhereUniqueInput | Prisma.EmailLogsWhereUniqueInput[]
  connect?: Prisma.EmailLogsWhereUniqueInput | Prisma.EmailLogsWhereUniqueInput[]
  update?: Prisma.EmailLogsUpdateWithWhereUniqueWithoutLeaguemembersInput | Prisma.EmailLogsUpdateWithWhereUniqueWithoutLeaguemembersInput[]
  updateMany?: Prisma.EmailLogsUpdateManyWithWhereWithoutLeaguemembersInput | Prisma.EmailLogsUpdateManyWithWhereWithoutLeaguemembersInput[]
  deleteMany?: Prisma.EmailLogsScalarWhereInput | Prisma.EmailLogsScalarWhereInput[]
}

export type EmailLogsCreateNestedManyWithoutLeaguesInput = {
  create?: Prisma.XOR<Prisma.EmailLogsCreateWithoutLeaguesInput, Prisma.EmailLogsUncheckedCreateWithoutLeaguesInput> | Prisma.EmailLogsCreateWithoutLeaguesInput[] | Prisma.EmailLogsUncheckedCreateWithoutLeaguesInput[]
  connectOrCreate?: Prisma.EmailLogsCreateOrConnectWithoutLeaguesInput | Prisma.EmailLogsCreateOrConnectWithoutLeaguesInput[]
  createMany?: Prisma.EmailLogsCreateManyLeaguesInputEnvelope
  connect?: Prisma.EmailLogsWhereUniqueInput | Prisma.EmailLogsWhereUniqueInput[]
}

export type EmailLogsUncheckedCreateNestedManyWithoutLeaguesInput = {
  create?: Prisma.XOR<Prisma.EmailLogsCreateWithoutLeaguesInput, Prisma.EmailLogsUncheckedCreateWithoutLeaguesInput> | Prisma.EmailLogsCreateWithoutLeaguesInput[] | Prisma.EmailLogsUncheckedCreateWithoutLeaguesInput[]
  connectOrCreate?: Prisma.EmailLogsCreateOrConnectWithoutLeaguesInput | Prisma.EmailLogsCreateOrConnectWithoutLeaguesInput[]
  createMany?: Prisma.EmailLogsCreateManyLeaguesInputEnvelope
  connect?: Prisma.EmailLogsWhereUniqueInput | Prisma.EmailLogsWhereUniqueInput[]
}

export type EmailLogsUpdateManyWithoutLeaguesNestedInput = {
  create?: Prisma.XOR<Prisma.EmailLogsCreateWithoutLeaguesInput, Prisma.EmailLogsUncheckedCreateWithoutLeaguesInput> | Prisma.EmailLogsCreateWithoutLeaguesInput[] | Prisma.EmailLogsUncheckedCreateWithoutLeaguesInput[]
  connectOrCreate?: Prisma.EmailLogsCreateOrConnectWithoutLeaguesInput | Prisma.EmailLogsCreateOrConnectWithoutLeaguesInput[]
  upsert?: Prisma.EmailLogsUpsertWithWhereUniqueWithoutLeaguesInput | Prisma.EmailLogsUpsertWithWhereUniqueWithoutLeaguesInput[]
  createMany?: Prisma.EmailLogsCreateManyLeaguesInputEnvelope
  set?: Prisma.EmailLogsWhereUniqueInput | Prisma.EmailLogsWhereUniqueInput[]
  disconnect?: Prisma.EmailLogsWhereUniqueInput | Prisma.EmailLogsWhereUniqueInput[]
  delete?: Prisma.EmailLogsWhereUniqueInput | Prisma.EmailLogsWhereUniqueInput[]
  connect?: Prisma.EmailLogsWhereUniqueInput | Prisma.EmailLogsWhereUniqueInput[]
  update?: Prisma.EmailLogsUpdateWithWhereUniqueWithoutLeaguesInput | Prisma.EmailLogsUpdateWithWhereUniqueWithoutLeaguesInput[]
  updateMany?: Prisma.EmailLogsUpdateManyWithWhereWithoutLeaguesInput | Prisma.EmailLogsUpdateManyWithWhereWithoutLeaguesInput[]
  deleteMany?: Prisma.EmailLogsScalarWhereInput | Prisma.EmailLogsScalarWhereInput[]
}

export type EmailLogsUncheckedUpdateManyWithoutLeaguesNestedInput = {
  create?: Prisma.XOR<Prisma.EmailLogsCreateWithoutLeaguesInput, Prisma.EmailLogsUncheckedCreateWithoutLeaguesInput> | Prisma.EmailLogsCreateWithoutLeaguesInput[] | Prisma.EmailLogsUncheckedCreateWithoutLeaguesInput[]
  connectOrCreate?: Prisma.EmailLogsCreateOrConnectWithoutLeaguesInput | Prisma.EmailLogsCreateOrConnectWithoutLeaguesInput[]
  upsert?: Prisma.EmailLogsUpsertWithWhereUniqueWithoutLeaguesInput | Prisma.EmailLogsUpsertWithWhereUniqueWithoutLeaguesInput[]
  createMany?: Prisma.EmailLogsCreateManyLeaguesInputEnvelope
  set?: Prisma.EmailLogsWhereUniqueInput | Prisma.EmailLogsWhereUniqueInput[]
  disconnect?: Prisma.EmailLogsWhereUniqueInput | Prisma.EmailLogsWhereUniqueInput[]
  delete?: Prisma.EmailLogsWhereUniqueInput | Prisma.EmailLogsWhereUniqueInput[]
  connect?: Prisma.EmailLogsWhereUniqueInput | Prisma.EmailLogsWhereUniqueInput[]
  update?: Prisma.EmailLogsUpdateWithWhereUniqueWithoutLeaguesInput | Prisma.EmailLogsUpdateWithWhereUniqueWithoutLeaguesInput[]
  updateMany?: Prisma.EmailLogsUpdateManyWithWhereWithoutLeaguesInput | Prisma.EmailLogsUpdateManyWithWhereWithoutLeaguesInput[]
  deleteMany?: Prisma.EmailLogsScalarWhereInput | Prisma.EmailLogsScalarWhereInput[]
}

export type EmailLogsCreateWithoutLeaguemembersInput = {
  email_log_id?: string
  email_type: $Enums.EmailType
  ts?: Date | string
  week?: number | null
  resend_id: string
  leagues: Prisma.leaguesCreateNestedOneWithoutEmailLogsInput
}

export type EmailLogsUncheckedCreateWithoutLeaguemembersInput = {
  email_log_id?: string
  league_id: number
  email_type: $Enums.EmailType
  ts?: Date | string
  week?: number | null
  resend_id: string
}

export type EmailLogsCreateOrConnectWithoutLeaguemembersInput = {
  where: Prisma.EmailLogsWhereUniqueInput
  create: Prisma.XOR<Prisma.EmailLogsCreateWithoutLeaguemembersInput, Prisma.EmailLogsUncheckedCreateWithoutLeaguemembersInput>
}

export type EmailLogsCreateManyLeaguemembersInputEnvelope = {
  data: Prisma.EmailLogsCreateManyLeaguemembersInput | Prisma.EmailLogsCreateManyLeaguemembersInput[]
  skipDuplicates?: boolean
}

export type EmailLogsUpsertWithWhereUniqueWithoutLeaguemembersInput = {
  where: Prisma.EmailLogsWhereUniqueInput
  update: Prisma.XOR<Prisma.EmailLogsUpdateWithoutLeaguemembersInput, Prisma.EmailLogsUncheckedUpdateWithoutLeaguemembersInput>
  create: Prisma.XOR<Prisma.EmailLogsCreateWithoutLeaguemembersInput, Prisma.EmailLogsUncheckedCreateWithoutLeaguemembersInput>
}

export type EmailLogsUpdateWithWhereUniqueWithoutLeaguemembersInput = {
  where: Prisma.EmailLogsWhereUniqueInput
  data: Prisma.XOR<Prisma.EmailLogsUpdateWithoutLeaguemembersInput, Prisma.EmailLogsUncheckedUpdateWithoutLeaguemembersInput>
}

export type EmailLogsUpdateManyWithWhereWithoutLeaguemembersInput = {
  where: Prisma.EmailLogsScalarWhereInput
  data: Prisma.XOR<Prisma.EmailLogsUpdateManyMutationInput, Prisma.EmailLogsUncheckedUpdateManyWithoutLeaguemembersInput>
}

export type EmailLogsScalarWhereInput = {
  AND?: Prisma.EmailLogsScalarWhereInput | Prisma.EmailLogsScalarWhereInput[]
  OR?: Prisma.EmailLogsScalarWhereInput[]
  NOT?: Prisma.EmailLogsScalarWhereInput | Prisma.EmailLogsScalarWhereInput[]
  email_log_id?: Prisma.StringFilter<"EmailLogs"> | string
  league_id?: Prisma.IntFilter<"EmailLogs"> | number
  member_id?: Prisma.IntFilter<"EmailLogs"> | number
  email_type?: Prisma.EnumEmailTypeFilter<"EmailLogs"> | $Enums.EmailType
  ts?: Prisma.DateTimeFilter<"EmailLogs"> | Date | string
  week?: Prisma.IntNullableFilter<"EmailLogs"> | number | null
  resend_id?: Prisma.StringFilter<"EmailLogs"> | string
}

export type EmailLogsCreateWithoutLeaguesInput = {
  email_log_id?: string
  email_type: $Enums.EmailType
  ts?: Date | string
  week?: number | null
  resend_id: string
  leaguemembers: Prisma.leaguemembersCreateNestedOneWithoutEmailLogsInput
}

export type EmailLogsUncheckedCreateWithoutLeaguesInput = {
  email_log_id?: string
  member_id: number
  email_type: $Enums.EmailType
  ts?: Date | string
  week?: number | null
  resend_id: string
}

export type EmailLogsCreateOrConnectWithoutLeaguesInput = {
  where: Prisma.EmailLogsWhereUniqueInput
  create: Prisma.XOR<Prisma.EmailLogsCreateWithoutLeaguesInput, Prisma.EmailLogsUncheckedCreateWithoutLeaguesInput>
}

export type EmailLogsCreateManyLeaguesInputEnvelope = {
  data: Prisma.EmailLogsCreateManyLeaguesInput | Prisma.EmailLogsCreateManyLeaguesInput[]
  skipDuplicates?: boolean
}

export type EmailLogsUpsertWithWhereUniqueWithoutLeaguesInput = {
  where: Prisma.EmailLogsWhereUniqueInput
  update: Prisma.XOR<Prisma.EmailLogsUpdateWithoutLeaguesInput, Prisma.EmailLogsUncheckedUpdateWithoutLeaguesInput>
  create: Prisma.XOR<Prisma.EmailLogsCreateWithoutLeaguesInput, Prisma.EmailLogsUncheckedCreateWithoutLeaguesInput>
}

export type EmailLogsUpdateWithWhereUniqueWithoutLeaguesInput = {
  where: Prisma.EmailLogsWhereUniqueInput
  data: Prisma.XOR<Prisma.EmailLogsUpdateWithoutLeaguesInput, Prisma.EmailLogsUncheckedUpdateWithoutLeaguesInput>
}

export type EmailLogsUpdateManyWithWhereWithoutLeaguesInput = {
  where: Prisma.EmailLogsScalarWhereInput
  data: Prisma.XOR<Prisma.EmailLogsUpdateManyMutationInput, Prisma.EmailLogsUncheckedUpdateManyWithoutLeaguesInput>
}

export type EmailLogsCreateManyLeaguemembersInput = {
  email_log_id?: string
  league_id: number
  email_type: $Enums.EmailType
  ts?: Date | string
  week?: number | null
  resend_id: string
}

export type EmailLogsUpdateWithoutLeaguemembersInput = {
  email_log_id?: Prisma.StringFieldUpdateOperationsInput | string
  email_type?: Prisma.EnumEmailTypeFieldUpdateOperationsInput | $Enums.EmailType
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  week?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  resend_id?: Prisma.StringFieldUpdateOperationsInput | string
  leagues?: Prisma.leaguesUpdateOneRequiredWithoutEmailLogsNestedInput
}

export type EmailLogsUncheckedUpdateWithoutLeaguemembersInput = {
  email_log_id?: Prisma.StringFieldUpdateOperationsInput | string
  league_id?: Prisma.IntFieldUpdateOperationsInput | number
  email_type?: Prisma.EnumEmailTypeFieldUpdateOperationsInput | $Enums.EmailType
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  week?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  resend_id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type EmailLogsUncheckedUpdateManyWithoutLeaguemembersInput = {
  email_log_id?: Prisma.StringFieldUpdateOperationsInput | string
  league_id?: Prisma.IntFieldUpdateOperationsInput | number
  email_type?: Prisma.EnumEmailTypeFieldUpdateOperationsInput | $Enums.EmailType
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  week?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  resend_id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type EmailLogsCreateManyLeaguesInput = {
  email_log_id?: string
  member_id: number
  email_type: $Enums.EmailType
  ts?: Date | string
  week?: number | null
  resend_id: string
}

export type EmailLogsUpdateWithoutLeaguesInput = {
  email_log_id?: Prisma.StringFieldUpdateOperationsInput | string
  email_type?: Prisma.EnumEmailTypeFieldUpdateOperationsInput | $Enums.EmailType
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  week?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  resend_id?: Prisma.StringFieldUpdateOperationsInput | string
  leaguemembers?: Prisma.leaguemembersUpdateOneRequiredWithoutEmailLogsNestedInput
}

export type EmailLogsUncheckedUpdateWithoutLeaguesInput = {
  email_log_id?: Prisma.StringFieldUpdateOperationsInput | string
  member_id?: Prisma.IntFieldUpdateOperationsInput | number
  email_type?: Prisma.EnumEmailTypeFieldUpdateOperationsInput | $Enums.EmailType
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  week?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  resend_id?: Prisma.StringFieldUpdateOperationsInput | string
}

export type EmailLogsUncheckedUpdateManyWithoutLeaguesInput = {
  email_log_id?: Prisma.StringFieldUpdateOperationsInput | string
  member_id?: Prisma.IntFieldUpdateOperationsInput | number
  email_type?: Prisma.EnumEmailTypeFieldUpdateOperationsInput | $Enums.EmailType
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  week?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  resend_id?: Prisma.StringFieldUpdateOperationsInput | string
}



export type EmailLogsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  email_log_id?: boolean
  league_id?: boolean
  member_id?: boolean
  email_type?: boolean
  ts?: boolean
  week?: boolean
  resend_id?: boolean
  leagues?: boolean | Prisma.leaguesDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.leaguemembersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["emailLogs"]>

export type EmailLogsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  email_log_id?: boolean
  league_id?: boolean
  member_id?: boolean
  email_type?: boolean
  ts?: boolean
  week?: boolean
  resend_id?: boolean
  leagues?: boolean | Prisma.leaguesDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.leaguemembersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["emailLogs"]>

export type EmailLogsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  email_log_id?: boolean
  league_id?: boolean
  member_id?: boolean
  email_type?: boolean
  ts?: boolean
  week?: boolean
  resend_id?: boolean
  leagues?: boolean | Prisma.leaguesDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.leaguemembersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["emailLogs"]>

export type EmailLogsSelectScalar = {
  email_log_id?: boolean
  league_id?: boolean
  member_id?: boolean
  email_type?: boolean
  ts?: boolean
  week?: boolean
  resend_id?: boolean
}

export type EmailLogsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"email_log_id" | "league_id" | "member_id" | "email_type" | "ts" | "week" | "resend_id", ExtArgs["result"]["emailLogs"]>
export type EmailLogsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  leagues?: boolean | Prisma.leaguesDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.leaguemembersDefaultArgs<ExtArgs>
}
export type EmailLogsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  leagues?: boolean | Prisma.leaguesDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.leaguemembersDefaultArgs<ExtArgs>
}
export type EmailLogsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  leagues?: boolean | Prisma.leaguesDefaultArgs<ExtArgs>
  leaguemembers?: boolean | Prisma.leaguemembersDefaultArgs<ExtArgs>
}

export type $EmailLogsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "EmailLogs"
  objects: {
    leagues: Prisma.$leaguesPayload<ExtArgs>
    leaguemembers: Prisma.$leaguemembersPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    email_log_id: string
    league_id: number
    member_id: number
    email_type: $Enums.EmailType
    ts: Date
    week: number | null
    resend_id: string
  }, ExtArgs["result"]["emailLogs"]>
  composites: {}
}

export type EmailLogsGetPayload<S extends boolean | null | undefined | EmailLogsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EmailLogsPayload, S>

export type EmailLogsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EmailLogsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EmailLogsCountAggregateInputType | true
  }

export interface EmailLogsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailLogs'], meta: { name: 'EmailLogs' } }
  /**
   * Find zero or one EmailLogs that matches the filter.
   * @param {EmailLogsFindUniqueArgs} args - Arguments to find a EmailLogs
   * @example
   * // Get one EmailLogs
   * const emailLogs = await prisma.emailLogs.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EmailLogsFindUniqueArgs>(args: Prisma.SelectSubset<T, EmailLogsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EmailLogsClient<runtime.Types.Result.GetResult<Prisma.$EmailLogsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one EmailLogs that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EmailLogsFindUniqueOrThrowArgs} args - Arguments to find a EmailLogs
   * @example
   * // Get one EmailLogs
   * const emailLogs = await prisma.emailLogs.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EmailLogsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EmailLogsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EmailLogsClient<runtime.Types.Result.GetResult<Prisma.$EmailLogsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EmailLogs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailLogsFindFirstArgs} args - Arguments to find a EmailLogs
   * @example
   * // Get one EmailLogs
   * const emailLogs = await prisma.emailLogs.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EmailLogsFindFirstArgs>(args?: Prisma.SelectSubset<T, EmailLogsFindFirstArgs<ExtArgs>>): Prisma.Prisma__EmailLogsClient<runtime.Types.Result.GetResult<Prisma.$EmailLogsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first EmailLogs that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailLogsFindFirstOrThrowArgs} args - Arguments to find a EmailLogs
   * @example
   * // Get one EmailLogs
   * const emailLogs = await prisma.emailLogs.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EmailLogsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EmailLogsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EmailLogsClient<runtime.Types.Result.GetResult<Prisma.$EmailLogsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more EmailLogs that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailLogsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all EmailLogs
   * const emailLogs = await prisma.emailLogs.findMany()
   * 
   * // Get first 10 EmailLogs
   * const emailLogs = await prisma.emailLogs.findMany({ take: 10 })
   * 
   * // Only select the `email_log_id`
   * const emailLogsWithEmail_log_idOnly = await prisma.emailLogs.findMany({ select: { email_log_id: true } })
   * 
   */
  findMany<T extends EmailLogsFindManyArgs>(args?: Prisma.SelectSubset<T, EmailLogsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmailLogsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a EmailLogs.
   * @param {EmailLogsCreateArgs} args - Arguments to create a EmailLogs.
   * @example
   * // Create one EmailLogs
   * const EmailLogs = await prisma.emailLogs.create({
   *   data: {
   *     // ... data to create a EmailLogs
   *   }
   * })
   * 
   */
  create<T extends EmailLogsCreateArgs>(args: Prisma.SelectSubset<T, EmailLogsCreateArgs<ExtArgs>>): Prisma.Prisma__EmailLogsClient<runtime.Types.Result.GetResult<Prisma.$EmailLogsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many EmailLogs.
   * @param {EmailLogsCreateManyArgs} args - Arguments to create many EmailLogs.
   * @example
   * // Create many EmailLogs
   * const emailLogs = await prisma.emailLogs.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EmailLogsCreateManyArgs>(args?: Prisma.SelectSubset<T, EmailLogsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many EmailLogs and returns the data saved in the database.
   * @param {EmailLogsCreateManyAndReturnArgs} args - Arguments to create many EmailLogs.
   * @example
   * // Create many EmailLogs
   * const emailLogs = await prisma.emailLogs.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many EmailLogs and only return the `email_log_id`
   * const emailLogsWithEmail_log_idOnly = await prisma.emailLogs.createManyAndReturn({
   *   select: { email_log_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends EmailLogsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, EmailLogsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmailLogsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a EmailLogs.
   * @param {EmailLogsDeleteArgs} args - Arguments to delete one EmailLogs.
   * @example
   * // Delete one EmailLogs
   * const EmailLogs = await prisma.emailLogs.delete({
   *   where: {
   *     // ... filter to delete one EmailLogs
   *   }
   * })
   * 
   */
  delete<T extends EmailLogsDeleteArgs>(args: Prisma.SelectSubset<T, EmailLogsDeleteArgs<ExtArgs>>): Prisma.Prisma__EmailLogsClient<runtime.Types.Result.GetResult<Prisma.$EmailLogsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one EmailLogs.
   * @param {EmailLogsUpdateArgs} args - Arguments to update one EmailLogs.
   * @example
   * // Update one EmailLogs
   * const emailLogs = await prisma.emailLogs.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EmailLogsUpdateArgs>(args: Prisma.SelectSubset<T, EmailLogsUpdateArgs<ExtArgs>>): Prisma.Prisma__EmailLogsClient<runtime.Types.Result.GetResult<Prisma.$EmailLogsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more EmailLogs.
   * @param {EmailLogsDeleteManyArgs} args - Arguments to filter EmailLogs to delete.
   * @example
   * // Delete a few EmailLogs
   * const { count } = await prisma.emailLogs.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EmailLogsDeleteManyArgs>(args?: Prisma.SelectSubset<T, EmailLogsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EmailLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailLogsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many EmailLogs
   * const emailLogs = await prisma.emailLogs.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EmailLogsUpdateManyArgs>(args: Prisma.SelectSubset<T, EmailLogsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more EmailLogs and returns the data updated in the database.
   * @param {EmailLogsUpdateManyAndReturnArgs} args - Arguments to update many EmailLogs.
   * @example
   * // Update many EmailLogs
   * const emailLogs = await prisma.emailLogs.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more EmailLogs and only return the `email_log_id`
   * const emailLogsWithEmail_log_idOnly = await prisma.emailLogs.updateManyAndReturn({
   *   select: { email_log_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends EmailLogsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, EmailLogsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmailLogsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one EmailLogs.
   * @param {EmailLogsUpsertArgs} args - Arguments to update or create a EmailLogs.
   * @example
   * // Update or create a EmailLogs
   * const emailLogs = await prisma.emailLogs.upsert({
   *   create: {
   *     // ... data to create a EmailLogs
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the EmailLogs we want to update
   *   }
   * })
   */
  upsert<T extends EmailLogsUpsertArgs>(args: Prisma.SelectSubset<T, EmailLogsUpsertArgs<ExtArgs>>): Prisma.Prisma__EmailLogsClient<runtime.Types.Result.GetResult<Prisma.$EmailLogsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of EmailLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailLogsCountArgs} args - Arguments to filter EmailLogs to count.
   * @example
   * // Count the number of EmailLogs
   * const count = await prisma.emailLogs.count({
   *   where: {
   *     // ... the filter for the EmailLogs we want to count
   *   }
   * })
  **/
  count<T extends EmailLogsCountArgs>(
    args?: Prisma.Subset<T, EmailLogsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EmailLogsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a EmailLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailLogsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EmailLogsAggregateArgs>(args: Prisma.Subset<T, EmailLogsAggregateArgs>): Prisma.PrismaPromise<GetEmailLogsAggregateType<T>>

  /**
   * Group by EmailLogs.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EmailLogsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EmailLogsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EmailLogsGroupByArgs['orderBy'] }
      : { orderBy?: EmailLogsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EmailLogsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailLogsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the EmailLogs model
 */
readonly fields: EmailLogsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for EmailLogs.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EmailLogsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  leagues<T extends Prisma.leaguesDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.leaguesDefaultArgs<ExtArgs>>): Prisma.Prisma__leaguesClient<runtime.Types.Result.GetResult<Prisma.$leaguesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  leaguemembers<T extends Prisma.leaguemembersDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.leaguemembersDefaultArgs<ExtArgs>>): Prisma.Prisma__leaguemembersClient<runtime.Types.Result.GetResult<Prisma.$leaguemembersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the EmailLogs model
 */
export interface EmailLogsFieldRefs {
  readonly email_log_id: Prisma.FieldRef<"EmailLogs", 'String'>
  readonly league_id: Prisma.FieldRef<"EmailLogs", 'Int'>
  readonly member_id: Prisma.FieldRef<"EmailLogs", 'Int'>
  readonly email_type: Prisma.FieldRef<"EmailLogs", 'EmailType'>
  readonly ts: Prisma.FieldRef<"EmailLogs", 'DateTime'>
  readonly week: Prisma.FieldRef<"EmailLogs", 'Int'>
  readonly resend_id: Prisma.FieldRef<"EmailLogs", 'String'>
}
    

// Custom InputTypes
/**
 * EmailLogs findUnique
 */
export type EmailLogsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailLogs
   */
  select?: Prisma.EmailLogsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailLogs
   */
  omit?: Prisma.EmailLogsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailLogsInclude<ExtArgs> | null
  /**
   * Filter, which EmailLogs to fetch.
   */
  where: Prisma.EmailLogsWhereUniqueInput
}

/**
 * EmailLogs findUniqueOrThrow
 */
export type EmailLogsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailLogs
   */
  select?: Prisma.EmailLogsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailLogs
   */
  omit?: Prisma.EmailLogsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailLogsInclude<ExtArgs> | null
  /**
   * Filter, which EmailLogs to fetch.
   */
  where: Prisma.EmailLogsWhereUniqueInput
}

/**
 * EmailLogs findFirst
 */
export type EmailLogsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailLogs
   */
  select?: Prisma.EmailLogsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailLogs
   */
  omit?: Prisma.EmailLogsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailLogsInclude<ExtArgs> | null
  /**
   * Filter, which EmailLogs to fetch.
   */
  where?: Prisma.EmailLogsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmailLogs to fetch.
   */
  orderBy?: Prisma.EmailLogsOrderByWithRelationInput | Prisma.EmailLogsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EmailLogs.
   */
  cursor?: Prisma.EmailLogsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmailLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmailLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EmailLogs.
   */
  distinct?: Prisma.EmailLogsScalarFieldEnum | Prisma.EmailLogsScalarFieldEnum[]
}

/**
 * EmailLogs findFirstOrThrow
 */
export type EmailLogsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailLogs
   */
  select?: Prisma.EmailLogsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailLogs
   */
  omit?: Prisma.EmailLogsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailLogsInclude<ExtArgs> | null
  /**
   * Filter, which EmailLogs to fetch.
   */
  where?: Prisma.EmailLogsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmailLogs to fetch.
   */
  orderBy?: Prisma.EmailLogsOrderByWithRelationInput | Prisma.EmailLogsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for EmailLogs.
   */
  cursor?: Prisma.EmailLogsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmailLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmailLogs.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of EmailLogs.
   */
  distinct?: Prisma.EmailLogsScalarFieldEnum | Prisma.EmailLogsScalarFieldEnum[]
}

/**
 * EmailLogs findMany
 */
export type EmailLogsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailLogs
   */
  select?: Prisma.EmailLogsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailLogs
   */
  omit?: Prisma.EmailLogsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailLogsInclude<ExtArgs> | null
  /**
   * Filter, which EmailLogs to fetch.
   */
  where?: Prisma.EmailLogsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of EmailLogs to fetch.
   */
  orderBy?: Prisma.EmailLogsOrderByWithRelationInput | Prisma.EmailLogsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing EmailLogs.
   */
  cursor?: Prisma.EmailLogsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` EmailLogs from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` EmailLogs.
   */
  skip?: number
  distinct?: Prisma.EmailLogsScalarFieldEnum | Prisma.EmailLogsScalarFieldEnum[]
}

/**
 * EmailLogs create
 */
export type EmailLogsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailLogs
   */
  select?: Prisma.EmailLogsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailLogs
   */
  omit?: Prisma.EmailLogsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailLogsInclude<ExtArgs> | null
  /**
   * The data needed to create a EmailLogs.
   */
  data: Prisma.XOR<Prisma.EmailLogsCreateInput, Prisma.EmailLogsUncheckedCreateInput>
}

/**
 * EmailLogs createMany
 */
export type EmailLogsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many EmailLogs.
   */
  data: Prisma.EmailLogsCreateManyInput | Prisma.EmailLogsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * EmailLogs createManyAndReturn
 */
export type EmailLogsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailLogs
   */
  select?: Prisma.EmailLogsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EmailLogs
   */
  omit?: Prisma.EmailLogsOmit<ExtArgs> | null
  /**
   * The data used to create many EmailLogs.
   */
  data: Prisma.EmailLogsCreateManyInput | Prisma.EmailLogsCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailLogsIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * EmailLogs update
 */
export type EmailLogsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailLogs
   */
  select?: Prisma.EmailLogsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailLogs
   */
  omit?: Prisma.EmailLogsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailLogsInclude<ExtArgs> | null
  /**
   * The data needed to update a EmailLogs.
   */
  data: Prisma.XOR<Prisma.EmailLogsUpdateInput, Prisma.EmailLogsUncheckedUpdateInput>
  /**
   * Choose, which EmailLogs to update.
   */
  where: Prisma.EmailLogsWhereUniqueInput
}

/**
 * EmailLogs updateMany
 */
export type EmailLogsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update EmailLogs.
   */
  data: Prisma.XOR<Prisma.EmailLogsUpdateManyMutationInput, Prisma.EmailLogsUncheckedUpdateManyInput>
  /**
   * Filter which EmailLogs to update
   */
  where?: Prisma.EmailLogsWhereInput
  /**
   * Limit how many EmailLogs to update.
   */
  limit?: number
}

/**
 * EmailLogs updateManyAndReturn
 */
export type EmailLogsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailLogs
   */
  select?: Prisma.EmailLogsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the EmailLogs
   */
  omit?: Prisma.EmailLogsOmit<ExtArgs> | null
  /**
   * The data used to update EmailLogs.
   */
  data: Prisma.XOR<Prisma.EmailLogsUpdateManyMutationInput, Prisma.EmailLogsUncheckedUpdateManyInput>
  /**
   * Filter which EmailLogs to update
   */
  where?: Prisma.EmailLogsWhereInput
  /**
   * Limit how many EmailLogs to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailLogsIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * EmailLogs upsert
 */
export type EmailLogsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailLogs
   */
  select?: Prisma.EmailLogsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailLogs
   */
  omit?: Prisma.EmailLogsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailLogsInclude<ExtArgs> | null
  /**
   * The filter to search for the EmailLogs to update in case it exists.
   */
  where: Prisma.EmailLogsWhereUniqueInput
  /**
   * In case the EmailLogs found by the `where` argument doesn't exist, create a new EmailLogs with this data.
   */
  create: Prisma.XOR<Prisma.EmailLogsCreateInput, Prisma.EmailLogsUncheckedCreateInput>
  /**
   * In case the EmailLogs was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EmailLogsUpdateInput, Prisma.EmailLogsUncheckedUpdateInput>
}

/**
 * EmailLogs delete
 */
export type EmailLogsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailLogs
   */
  select?: Prisma.EmailLogsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailLogs
   */
  omit?: Prisma.EmailLogsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailLogsInclude<ExtArgs> | null
  /**
   * Filter which EmailLogs to delete.
   */
  where: Prisma.EmailLogsWhereUniqueInput
}

/**
 * EmailLogs deleteMany
 */
export type EmailLogsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which EmailLogs to delete
   */
  where?: Prisma.EmailLogsWhereInput
  /**
   * Limit how many EmailLogs to delete.
   */
  limit?: number
}

/**
 * EmailLogs without action
 */
export type EmailLogsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailLogs
   */
  select?: Prisma.EmailLogsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailLogs
   */
  omit?: Prisma.EmailLogsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailLogsInclude<ExtArgs> | null
}
