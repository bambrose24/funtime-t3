
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `leaguemembers` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model leaguemembers
 * 
 */
export type leaguemembersModel = runtime.Types.Result.DefaultSelection<Prisma.$leaguemembersPayload>

export type AggregateLeaguemembers = {
  _count: LeaguemembersCountAggregateOutputType | null
  _avg: LeaguemembersAvgAggregateOutputType | null
  _sum: LeaguemembersSumAggregateOutputType | null
  _min: LeaguemembersMinAggregateOutputType | null
  _max: LeaguemembersMaxAggregateOutputType | null
}

export type LeaguemembersAvgAggregateOutputType = {
  membership_id: number | null
  league_id: number | null
  user_id: number | null
}

export type LeaguemembersSumAggregateOutputType = {
  membership_id: number | null
  league_id: number | null
  user_id: number | null
}

export type LeaguemembersMinAggregateOutputType = {
  membership_id: number | null
  league_id: number | null
  user_id: number | null
  ts: Date | null
  role: $Enums.MemberRole | null
  paid: boolean | null
}

export type LeaguemembersMaxAggregateOutputType = {
  membership_id: number | null
  league_id: number | null
  user_id: number | null
  ts: Date | null
  role: $Enums.MemberRole | null
  paid: boolean | null
}

export type LeaguemembersCountAggregateOutputType = {
  membership_id: number
  league_id: number
  user_id: number
  ts: number
  role: number
  paid: number
  _all: number
}


export type LeaguemembersAvgAggregateInputType = {
  membership_id?: true
  league_id?: true
  user_id?: true
}

export type LeaguemembersSumAggregateInputType = {
  membership_id?: true
  league_id?: true
  user_id?: true
}

export type LeaguemembersMinAggregateInputType = {
  membership_id?: true
  league_id?: true
  user_id?: true
  ts?: true
  role?: true
  paid?: true
}

export type LeaguemembersMaxAggregateInputType = {
  membership_id?: true
  league_id?: true
  user_id?: true
  ts?: true
  role?: true
  paid?: true
}

export type LeaguemembersCountAggregateInputType = {
  membership_id?: true
  league_id?: true
  user_id?: true
  ts?: true
  role?: true
  paid?: true
  _all?: true
}

export type LeaguemembersAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which leaguemembers to aggregate.
   */
  where?: Prisma.leaguemembersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of leaguemembers to fetch.
   */
  orderBy?: Prisma.leaguemembersOrderByWithRelationInput | Prisma.leaguemembersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.leaguemembersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` leaguemembers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` leaguemembers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned leaguemembers
  **/
  _count?: true | LeaguemembersCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: LeaguemembersAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: LeaguemembersSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: LeaguemembersMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: LeaguemembersMaxAggregateInputType
}

export type GetLeaguemembersAggregateType<T extends LeaguemembersAggregateArgs> = {
      [P in keyof T & keyof AggregateLeaguemembers]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateLeaguemembers[P]>
    : Prisma.GetScalarType<T[P], AggregateLeaguemembers[P]>
}




export type leaguemembersGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.leaguemembersWhereInput
  orderBy?: Prisma.leaguemembersOrderByWithAggregationInput | Prisma.leaguemembersOrderByWithAggregationInput[]
  by: Prisma.LeaguemembersScalarFieldEnum[] | Prisma.LeaguemembersScalarFieldEnum
  having?: Prisma.leaguemembersScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: LeaguemembersCountAggregateInputType | true
  _avg?: LeaguemembersAvgAggregateInputType
  _sum?: LeaguemembersSumAggregateInputType
  _min?: LeaguemembersMinAggregateInputType
  _max?: LeaguemembersMaxAggregateInputType
}

export type LeaguemembersGroupByOutputType = {
  membership_id: number
  league_id: number
  user_id: number
  ts: Date
  role: $Enums.MemberRole | null
  paid: boolean | null
  _count: LeaguemembersCountAggregateOutputType | null
  _avg: LeaguemembersAvgAggregateOutputType | null
  _sum: LeaguemembersSumAggregateOutputType | null
  _min: LeaguemembersMinAggregateOutputType | null
  _max: LeaguemembersMaxAggregateOutputType | null
}

type GetLeaguemembersGroupByPayload<T extends leaguemembersGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<LeaguemembersGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof LeaguemembersGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], LeaguemembersGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], LeaguemembersGroupByOutputType[P]>
      }
    >
  > 



export type leaguemembersWhereInput = {
  AND?: Prisma.leaguemembersWhereInput | Prisma.leaguemembersWhereInput[]
  OR?: Prisma.leaguemembersWhereInput[]
  NOT?: Prisma.leaguemembersWhereInput | Prisma.leaguemembersWhereInput[]
  membership_id?: Prisma.IntFilter<"leaguemembers"> | number
  league_id?: Prisma.IntFilter<"leaguemembers"> | number
  user_id?: Prisma.IntFilter<"leaguemembers"> | number
  ts?: Prisma.DateTimeFilter<"leaguemembers"> | Date | string
  role?: Prisma.EnumMemberRoleNullableFilter<"leaguemembers"> | $Enums.MemberRole | null
  paid?: Prisma.BoolNullableFilter<"leaguemembers"> | boolean | null
  EmailLogs?: Prisma.EmailLogsListRelationFilter
  WeekWinners?: Prisma.WeekWinnersListRelationFilter
  people?: Prisma.XOR<Prisma.PeopleScalarRelationFilter, Prisma.peopleWhereInput>
  leagues?: Prisma.XOR<Prisma.LeaguesScalarRelationFilter, Prisma.leaguesWhereInput>
  leaguemessages?: Prisma.LeaguemessagesListRelationFilter
  picks?: Prisma.PicksListRelationFilter
  superbowl?: Prisma.SuperbowlListRelationFilter
}

export type leaguemembersOrderByWithRelationInput = {
  membership_id?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  ts?: Prisma.SortOrder
  role?: Prisma.SortOrderInput | Prisma.SortOrder
  paid?: Prisma.SortOrderInput | Prisma.SortOrder
  EmailLogs?: Prisma.EmailLogsOrderByRelationAggregateInput
  WeekWinners?: Prisma.WeekWinnersOrderByRelationAggregateInput
  people?: Prisma.peopleOrderByWithRelationInput
  leagues?: Prisma.leaguesOrderByWithRelationInput
  leaguemessages?: Prisma.leaguemessagesOrderByRelationAggregateInput
  picks?: Prisma.picksOrderByRelationAggregateInput
  superbowl?: Prisma.superbowlOrderByRelationAggregateInput
}

export type leaguemembersWhereUniqueInput = Prisma.AtLeast<{
  membership_id?: number
  AND?: Prisma.leaguemembersWhereInput | Prisma.leaguemembersWhereInput[]
  OR?: Prisma.leaguemembersWhereInput[]
  NOT?: Prisma.leaguemembersWhereInput | Prisma.leaguemembersWhereInput[]
  league_id?: Prisma.IntFilter<"leaguemembers"> | number
  user_id?: Prisma.IntFilter<"leaguemembers"> | number
  ts?: Prisma.DateTimeFilter<"leaguemembers"> | Date | string
  role?: Prisma.EnumMemberRoleNullableFilter<"leaguemembers"> | $Enums.MemberRole | null
  paid?: Prisma.BoolNullableFilter<"leaguemembers"> | boolean | null
  EmailLogs?: Prisma.EmailLogsListRelationFilter
  WeekWinners?: Prisma.WeekWinnersListRelationFilter
  people?: Prisma.XOR<Prisma.PeopleScalarRelationFilter, Prisma.peopleWhereInput>
  leagues?: Prisma.XOR<Prisma.LeaguesScalarRelationFilter, Prisma.leaguesWhereInput>
  leaguemessages?: Prisma.LeaguemessagesListRelationFilter
  picks?: Prisma.PicksListRelationFilter
  superbowl?: Prisma.SuperbowlListRelationFilter
}, "membership_id">

export type leaguemembersOrderByWithAggregationInput = {
  membership_id?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  ts?: Prisma.SortOrder
  role?: Prisma.SortOrderInput | Prisma.SortOrder
  paid?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.leaguemembersCountOrderByAggregateInput
  _avg?: Prisma.leaguemembersAvgOrderByAggregateInput
  _max?: Prisma.leaguemembersMaxOrderByAggregateInput
  _min?: Prisma.leaguemembersMinOrderByAggregateInput
  _sum?: Prisma.leaguemembersSumOrderByAggregateInput
}

export type leaguemembersScalarWhereWithAggregatesInput = {
  AND?: Prisma.leaguemembersScalarWhereWithAggregatesInput | Prisma.leaguemembersScalarWhereWithAggregatesInput[]
  OR?: Prisma.leaguemembersScalarWhereWithAggregatesInput[]
  NOT?: Prisma.leaguemembersScalarWhereWithAggregatesInput | Prisma.leaguemembersScalarWhereWithAggregatesInput[]
  membership_id?: Prisma.IntWithAggregatesFilter<"leaguemembers"> | number
  league_id?: Prisma.IntWithAggregatesFilter<"leaguemembers"> | number
  user_id?: Prisma.IntWithAggregatesFilter<"leaguemembers"> | number
  ts?: Prisma.DateTimeWithAggregatesFilter<"leaguemembers"> | Date | string
  role?: Prisma.EnumMemberRoleNullableWithAggregatesFilter<"leaguemembers"> | $Enums.MemberRole | null
  paid?: Prisma.BoolNullableWithAggregatesFilter<"leaguemembers"> | boolean | null
}

export type leaguemembersCreateInput = {
  ts?: Date | string
  role?: $Enums.MemberRole | null
  paid?: boolean | null
  EmailLogs?: Prisma.EmailLogsCreateNestedManyWithoutLeaguemembersInput
  WeekWinners?: Prisma.WeekWinnersCreateNestedManyWithoutLeaguemembersInput
  people: Prisma.peopleCreateNestedOneWithoutLeaguemembersInput
  leagues: Prisma.leaguesCreateNestedOneWithoutLeaguemembersInput
  leaguemessages?: Prisma.leaguemessagesCreateNestedManyWithoutLeaguemembersInput
  picks?: Prisma.picksCreateNestedManyWithoutLeaguemembersInput
  superbowl?: Prisma.superbowlCreateNestedManyWithoutLeaguemembersInput
}

export type leaguemembersUncheckedCreateInput = {
  membership_id?: number
  league_id: number
  user_id: number
  ts?: Date | string
  role?: $Enums.MemberRole | null
  paid?: boolean | null
  EmailLogs?: Prisma.EmailLogsUncheckedCreateNestedManyWithoutLeaguemembersInput
  WeekWinners?: Prisma.WeekWinnersUncheckedCreateNestedManyWithoutLeaguemembersInput
  leaguemessages?: Prisma.leaguemessagesUncheckedCreateNestedManyWithoutLeaguemembersInput
  picks?: Prisma.picksUncheckedCreateNestedManyWithoutLeaguemembersInput
  superbowl?: Prisma.superbowlUncheckedCreateNestedManyWithoutLeaguemembersInput
}

export type leaguemembersUpdateInput = {
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableEnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole | null
  paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  EmailLogs?: Prisma.EmailLogsUpdateManyWithoutLeaguemembersNestedInput
  WeekWinners?: Prisma.WeekWinnersUpdateManyWithoutLeaguemembersNestedInput
  people?: Prisma.peopleUpdateOneRequiredWithoutLeaguemembersNestedInput
  leagues?: Prisma.leaguesUpdateOneRequiredWithoutLeaguemembersNestedInput
  leaguemessages?: Prisma.leaguemessagesUpdateManyWithoutLeaguemembersNestedInput
  picks?: Prisma.picksUpdateManyWithoutLeaguemembersNestedInput
  superbowl?: Prisma.superbowlUpdateManyWithoutLeaguemembersNestedInput
}

export type leaguemembersUncheckedUpdateInput = {
  membership_id?: Prisma.IntFieldUpdateOperationsInput | number
  league_id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableEnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole | null
  paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  EmailLogs?: Prisma.EmailLogsUncheckedUpdateManyWithoutLeaguemembersNestedInput
  WeekWinners?: Prisma.WeekWinnersUncheckedUpdateManyWithoutLeaguemembersNestedInput
  leaguemessages?: Prisma.leaguemessagesUncheckedUpdateManyWithoutLeaguemembersNestedInput
  picks?: Prisma.picksUncheckedUpdateManyWithoutLeaguemembersNestedInput
  superbowl?: Prisma.superbowlUncheckedUpdateManyWithoutLeaguemembersNestedInput
}

export type leaguemembersCreateManyInput = {
  membership_id?: number
  league_id: number
  user_id: number
  ts?: Date | string
  role?: $Enums.MemberRole | null
  paid?: boolean | null
}

export type leaguemembersUpdateManyMutationInput = {
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableEnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole | null
  paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type leaguemembersUncheckedUpdateManyInput = {
  membership_id?: Prisma.IntFieldUpdateOperationsInput | number
  league_id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableEnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole | null
  paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type LeaguemembersScalarRelationFilter = {
  is?: Prisma.leaguemembersWhereInput
  isNot?: Prisma.leaguemembersWhereInput
}

export type leaguemembersCountOrderByAggregateInput = {
  membership_id?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  ts?: Prisma.SortOrder
  role?: Prisma.SortOrder
  paid?: Prisma.SortOrder
}

export type leaguemembersAvgOrderByAggregateInput = {
  membership_id?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
}

export type leaguemembersMaxOrderByAggregateInput = {
  membership_id?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  ts?: Prisma.SortOrder
  role?: Prisma.SortOrder
  paid?: Prisma.SortOrder
}

export type leaguemembersMinOrderByAggregateInput = {
  membership_id?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  ts?: Prisma.SortOrder
  role?: Prisma.SortOrder
  paid?: Prisma.SortOrder
}

export type leaguemembersSumOrderByAggregateInput = {
  membership_id?: Prisma.SortOrder
  league_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
}

export type LeaguemembersListRelationFilter = {
  every?: Prisma.leaguemembersWhereInput
  some?: Prisma.leaguemembersWhereInput
  none?: Prisma.leaguemembersWhereInput
}

export type leaguemembersOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type LeaguemembersNullableScalarRelationFilter = {
  is?: Prisma.leaguemembersWhereInput | null
  isNot?: Prisma.leaguemembersWhereInput | null
}

export type leaguemembersCreateNestedOneWithoutEmailLogsInput = {
  create?: Prisma.XOR<Prisma.leaguemembersCreateWithoutEmailLogsInput, Prisma.leaguemembersUncheckedCreateWithoutEmailLogsInput>
  connectOrCreate?: Prisma.leaguemembersCreateOrConnectWithoutEmailLogsInput
  connect?: Prisma.leaguemembersWhereUniqueInput
}

export type leaguemembersUpdateOneRequiredWithoutEmailLogsNestedInput = {
  create?: Prisma.XOR<Prisma.leaguemembersCreateWithoutEmailLogsInput, Prisma.leaguemembersUncheckedCreateWithoutEmailLogsInput>
  connectOrCreate?: Prisma.leaguemembersCreateOrConnectWithoutEmailLogsInput
  upsert?: Prisma.leaguemembersUpsertWithoutEmailLogsInput
  connect?: Prisma.leaguemembersWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.leaguemembersUpdateToOneWithWhereWithoutEmailLogsInput, Prisma.leaguemembersUpdateWithoutEmailLogsInput>, Prisma.leaguemembersUncheckedUpdateWithoutEmailLogsInput>
}

export type leaguemembersCreateNestedOneWithoutWeekWinnersInput = {
  create?: Prisma.XOR<Prisma.leaguemembersCreateWithoutWeekWinnersInput, Prisma.leaguemembersUncheckedCreateWithoutWeekWinnersInput>
  connectOrCreate?: Prisma.leaguemembersCreateOrConnectWithoutWeekWinnersInput
  connect?: Prisma.leaguemembersWhereUniqueInput
}

export type leaguemembersUpdateOneRequiredWithoutWeekWinnersNestedInput = {
  create?: Prisma.XOR<Prisma.leaguemembersCreateWithoutWeekWinnersInput, Prisma.leaguemembersUncheckedCreateWithoutWeekWinnersInput>
  connectOrCreate?: Prisma.leaguemembersCreateOrConnectWithoutWeekWinnersInput
  upsert?: Prisma.leaguemembersUpsertWithoutWeekWinnersInput
  connect?: Prisma.leaguemembersWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.leaguemembersUpdateToOneWithWhereWithoutWeekWinnersInput, Prisma.leaguemembersUpdateWithoutWeekWinnersInput>, Prisma.leaguemembersUncheckedUpdateWithoutWeekWinnersInput>
}

export type NullableEnumMemberRoleFieldUpdateOperationsInput = {
  set?: $Enums.MemberRole | null
}

export type leaguemembersCreateNestedOneWithoutLeaguemessagesInput = {
  create?: Prisma.XOR<Prisma.leaguemembersCreateWithoutLeaguemessagesInput, Prisma.leaguemembersUncheckedCreateWithoutLeaguemessagesInput>
  connectOrCreate?: Prisma.leaguemembersCreateOrConnectWithoutLeaguemessagesInput
  connect?: Prisma.leaguemembersWhereUniqueInput
}

export type leaguemembersUpdateOneRequiredWithoutLeaguemessagesNestedInput = {
  create?: Prisma.XOR<Prisma.leaguemembersCreateWithoutLeaguemessagesInput, Prisma.leaguemembersUncheckedCreateWithoutLeaguemessagesInput>
  connectOrCreate?: Prisma.leaguemembersCreateOrConnectWithoutLeaguemessagesInput
  upsert?: Prisma.leaguemembersUpsertWithoutLeaguemessagesInput
  connect?: Prisma.leaguemembersWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.leaguemembersUpdateToOneWithWhereWithoutLeaguemessagesInput, Prisma.leaguemembersUpdateWithoutLeaguemessagesInput>, Prisma.leaguemembersUncheckedUpdateWithoutLeaguemessagesInput>
}

export type leaguemembersCreateNestedManyWithoutLeaguesInput = {
  create?: Prisma.XOR<Prisma.leaguemembersCreateWithoutLeaguesInput, Prisma.leaguemembersUncheckedCreateWithoutLeaguesInput> | Prisma.leaguemembersCreateWithoutLeaguesInput[] | Prisma.leaguemembersUncheckedCreateWithoutLeaguesInput[]
  connectOrCreate?: Prisma.leaguemembersCreateOrConnectWithoutLeaguesInput | Prisma.leaguemembersCreateOrConnectWithoutLeaguesInput[]
  createMany?: Prisma.leaguemembersCreateManyLeaguesInputEnvelope
  connect?: Prisma.leaguemembersWhereUniqueInput | Prisma.leaguemembersWhereUniqueInput[]
}

export type leaguemembersUncheckedCreateNestedManyWithoutLeaguesInput = {
  create?: Prisma.XOR<Prisma.leaguemembersCreateWithoutLeaguesInput, Prisma.leaguemembersUncheckedCreateWithoutLeaguesInput> | Prisma.leaguemembersCreateWithoutLeaguesInput[] | Prisma.leaguemembersUncheckedCreateWithoutLeaguesInput[]
  connectOrCreate?: Prisma.leaguemembersCreateOrConnectWithoutLeaguesInput | Prisma.leaguemembersCreateOrConnectWithoutLeaguesInput[]
  createMany?: Prisma.leaguemembersCreateManyLeaguesInputEnvelope
  connect?: Prisma.leaguemembersWhereUniqueInput | Prisma.leaguemembersWhereUniqueInput[]
}

export type leaguemembersUpdateManyWithoutLeaguesNestedInput = {
  create?: Prisma.XOR<Prisma.leaguemembersCreateWithoutLeaguesInput, Prisma.leaguemembersUncheckedCreateWithoutLeaguesInput> | Prisma.leaguemembersCreateWithoutLeaguesInput[] | Prisma.leaguemembersUncheckedCreateWithoutLeaguesInput[]
  connectOrCreate?: Prisma.leaguemembersCreateOrConnectWithoutLeaguesInput | Prisma.leaguemembersCreateOrConnectWithoutLeaguesInput[]
  upsert?: Prisma.leaguemembersUpsertWithWhereUniqueWithoutLeaguesInput | Prisma.leaguemembersUpsertWithWhereUniqueWithoutLeaguesInput[]
  createMany?: Prisma.leaguemembersCreateManyLeaguesInputEnvelope
  set?: Prisma.leaguemembersWhereUniqueInput | Prisma.leaguemembersWhereUniqueInput[]
  disconnect?: Prisma.leaguemembersWhereUniqueInput | Prisma.leaguemembersWhereUniqueInput[]
  delete?: Prisma.leaguemembersWhereUniqueInput | Prisma.leaguemembersWhereUniqueInput[]
  connect?: Prisma.leaguemembersWhereUniqueInput | Prisma.leaguemembersWhereUniqueInput[]
  update?: Prisma.leaguemembersUpdateWithWhereUniqueWithoutLeaguesInput | Prisma.leaguemembersUpdateWithWhereUniqueWithoutLeaguesInput[]
  updateMany?: Prisma.leaguemembersUpdateManyWithWhereWithoutLeaguesInput | Prisma.leaguemembersUpdateManyWithWhereWithoutLeaguesInput[]
  deleteMany?: Prisma.leaguemembersScalarWhereInput | Prisma.leaguemembersScalarWhereInput[]
}

export type leaguemembersUncheckedUpdateManyWithoutLeaguesNestedInput = {
  create?: Prisma.XOR<Prisma.leaguemembersCreateWithoutLeaguesInput, Prisma.leaguemembersUncheckedCreateWithoutLeaguesInput> | Prisma.leaguemembersCreateWithoutLeaguesInput[] | Prisma.leaguemembersUncheckedCreateWithoutLeaguesInput[]
  connectOrCreate?: Prisma.leaguemembersCreateOrConnectWithoutLeaguesInput | Prisma.leaguemembersCreateOrConnectWithoutLeaguesInput[]
  upsert?: Prisma.leaguemembersUpsertWithWhereUniqueWithoutLeaguesInput | Prisma.leaguemembersUpsertWithWhereUniqueWithoutLeaguesInput[]
  createMany?: Prisma.leaguemembersCreateManyLeaguesInputEnvelope
  set?: Prisma.leaguemembersWhereUniqueInput | Prisma.leaguemembersWhereUniqueInput[]
  disconnect?: Prisma.leaguemembersWhereUniqueInput | Prisma.leaguemembersWhereUniqueInput[]
  delete?: Prisma.leaguemembersWhereUniqueInput | Prisma.leaguemembersWhereUniqueInput[]
  connect?: Prisma.leaguemembersWhereUniqueInput | Prisma.leaguemembersWhereUniqueInput[]
  update?: Prisma.leaguemembersUpdateWithWhereUniqueWithoutLeaguesInput | Prisma.leaguemembersUpdateWithWhereUniqueWithoutLeaguesInput[]
  updateMany?: Prisma.leaguemembersUpdateManyWithWhereWithoutLeaguesInput | Prisma.leaguemembersUpdateManyWithWhereWithoutLeaguesInput[]
  deleteMany?: Prisma.leaguemembersScalarWhereInput | Prisma.leaguemembersScalarWhereInput[]
}

export type leaguemembersCreateNestedManyWithoutPeopleInput = {
  create?: Prisma.XOR<Prisma.leaguemembersCreateWithoutPeopleInput, Prisma.leaguemembersUncheckedCreateWithoutPeopleInput> | Prisma.leaguemembersCreateWithoutPeopleInput[] | Prisma.leaguemembersUncheckedCreateWithoutPeopleInput[]
  connectOrCreate?: Prisma.leaguemembersCreateOrConnectWithoutPeopleInput | Prisma.leaguemembersCreateOrConnectWithoutPeopleInput[]
  createMany?: Prisma.leaguemembersCreateManyPeopleInputEnvelope
  connect?: Prisma.leaguemembersWhereUniqueInput | Prisma.leaguemembersWhereUniqueInput[]
}

export type leaguemembersUncheckedCreateNestedManyWithoutPeopleInput = {
  create?: Prisma.XOR<Prisma.leaguemembersCreateWithoutPeopleInput, Prisma.leaguemembersUncheckedCreateWithoutPeopleInput> | Prisma.leaguemembersCreateWithoutPeopleInput[] | Prisma.leaguemembersUncheckedCreateWithoutPeopleInput[]
  connectOrCreate?: Prisma.leaguemembersCreateOrConnectWithoutPeopleInput | Prisma.leaguemembersCreateOrConnectWithoutPeopleInput[]
  createMany?: Prisma.leaguemembersCreateManyPeopleInputEnvelope
  connect?: Prisma.leaguemembersWhereUniqueInput | Prisma.leaguemembersWhereUniqueInput[]
}

export type leaguemembersUpdateManyWithoutPeopleNestedInput = {
  create?: Prisma.XOR<Prisma.leaguemembersCreateWithoutPeopleInput, Prisma.leaguemembersUncheckedCreateWithoutPeopleInput> | Prisma.leaguemembersCreateWithoutPeopleInput[] | Prisma.leaguemembersUncheckedCreateWithoutPeopleInput[]
  connectOrCreate?: Prisma.leaguemembersCreateOrConnectWithoutPeopleInput | Prisma.leaguemembersCreateOrConnectWithoutPeopleInput[]
  upsert?: Prisma.leaguemembersUpsertWithWhereUniqueWithoutPeopleInput | Prisma.leaguemembersUpsertWithWhereUniqueWithoutPeopleInput[]
  createMany?: Prisma.leaguemembersCreateManyPeopleInputEnvelope
  set?: Prisma.leaguemembersWhereUniqueInput | Prisma.leaguemembersWhereUniqueInput[]
  disconnect?: Prisma.leaguemembersWhereUniqueInput | Prisma.leaguemembersWhereUniqueInput[]
  delete?: Prisma.leaguemembersWhereUniqueInput | Prisma.leaguemembersWhereUniqueInput[]
  connect?: Prisma.leaguemembersWhereUniqueInput | Prisma.leaguemembersWhereUniqueInput[]
  update?: Prisma.leaguemembersUpdateWithWhereUniqueWithoutPeopleInput | Prisma.leaguemembersUpdateWithWhereUniqueWithoutPeopleInput[]
  updateMany?: Prisma.leaguemembersUpdateManyWithWhereWithoutPeopleInput | Prisma.leaguemembersUpdateManyWithWhereWithoutPeopleInput[]
  deleteMany?: Prisma.leaguemembersScalarWhereInput | Prisma.leaguemembersScalarWhereInput[]
}

export type leaguemembersUncheckedUpdateManyWithoutPeopleNestedInput = {
  create?: Prisma.XOR<Prisma.leaguemembersCreateWithoutPeopleInput, Prisma.leaguemembersUncheckedCreateWithoutPeopleInput> | Prisma.leaguemembersCreateWithoutPeopleInput[] | Prisma.leaguemembersUncheckedCreateWithoutPeopleInput[]
  connectOrCreate?: Prisma.leaguemembersCreateOrConnectWithoutPeopleInput | Prisma.leaguemembersCreateOrConnectWithoutPeopleInput[]
  upsert?: Prisma.leaguemembersUpsertWithWhereUniqueWithoutPeopleInput | Prisma.leaguemembersUpsertWithWhereUniqueWithoutPeopleInput[]
  createMany?: Prisma.leaguemembersCreateManyPeopleInputEnvelope
  set?: Prisma.leaguemembersWhereUniqueInput | Prisma.leaguemembersWhereUniqueInput[]
  disconnect?: Prisma.leaguemembersWhereUniqueInput | Prisma.leaguemembersWhereUniqueInput[]
  delete?: Prisma.leaguemembersWhereUniqueInput | Prisma.leaguemembersWhereUniqueInput[]
  connect?: Prisma.leaguemembersWhereUniqueInput | Prisma.leaguemembersWhereUniqueInput[]
  update?: Prisma.leaguemembersUpdateWithWhereUniqueWithoutPeopleInput | Prisma.leaguemembersUpdateWithWhereUniqueWithoutPeopleInput[]
  updateMany?: Prisma.leaguemembersUpdateManyWithWhereWithoutPeopleInput | Prisma.leaguemembersUpdateManyWithWhereWithoutPeopleInput[]
  deleteMany?: Prisma.leaguemembersScalarWhereInput | Prisma.leaguemembersScalarWhereInput[]
}

export type leaguemembersCreateNestedOneWithoutPicksInput = {
  create?: Prisma.XOR<Prisma.leaguemembersCreateWithoutPicksInput, Prisma.leaguemembersUncheckedCreateWithoutPicksInput>
  connectOrCreate?: Prisma.leaguemembersCreateOrConnectWithoutPicksInput
  connect?: Prisma.leaguemembersWhereUniqueInput
}

export type leaguemembersUpdateOneWithoutPicksNestedInput = {
  create?: Prisma.XOR<Prisma.leaguemembersCreateWithoutPicksInput, Prisma.leaguemembersUncheckedCreateWithoutPicksInput>
  connectOrCreate?: Prisma.leaguemembersCreateOrConnectWithoutPicksInput
  upsert?: Prisma.leaguemembersUpsertWithoutPicksInput
  disconnect?: Prisma.leaguemembersWhereInput | boolean
  delete?: Prisma.leaguemembersWhereInput | boolean
  connect?: Prisma.leaguemembersWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.leaguemembersUpdateToOneWithWhereWithoutPicksInput, Prisma.leaguemembersUpdateWithoutPicksInput>, Prisma.leaguemembersUncheckedUpdateWithoutPicksInput>
}

export type leaguemembersCreateNestedOneWithoutSuperbowlInput = {
  create?: Prisma.XOR<Prisma.leaguemembersCreateWithoutSuperbowlInput, Prisma.leaguemembersUncheckedCreateWithoutSuperbowlInput>
  connectOrCreate?: Prisma.leaguemembersCreateOrConnectWithoutSuperbowlInput
  connect?: Prisma.leaguemembersWhereUniqueInput
}

export type leaguemembersUpdateOneWithoutSuperbowlNestedInput = {
  create?: Prisma.XOR<Prisma.leaguemembersCreateWithoutSuperbowlInput, Prisma.leaguemembersUncheckedCreateWithoutSuperbowlInput>
  connectOrCreate?: Prisma.leaguemembersCreateOrConnectWithoutSuperbowlInput
  upsert?: Prisma.leaguemembersUpsertWithoutSuperbowlInput
  disconnect?: Prisma.leaguemembersWhereInput | boolean
  delete?: Prisma.leaguemembersWhereInput | boolean
  connect?: Prisma.leaguemembersWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.leaguemembersUpdateToOneWithWhereWithoutSuperbowlInput, Prisma.leaguemembersUpdateWithoutSuperbowlInput>, Prisma.leaguemembersUncheckedUpdateWithoutSuperbowlInput>
}

export type leaguemembersCreateWithoutEmailLogsInput = {
  ts?: Date | string
  role?: $Enums.MemberRole | null
  paid?: boolean | null
  WeekWinners?: Prisma.WeekWinnersCreateNestedManyWithoutLeaguemembersInput
  people: Prisma.peopleCreateNestedOneWithoutLeaguemembersInput
  leagues: Prisma.leaguesCreateNestedOneWithoutLeaguemembersInput
  leaguemessages?: Prisma.leaguemessagesCreateNestedManyWithoutLeaguemembersInput
  picks?: Prisma.picksCreateNestedManyWithoutLeaguemembersInput
  superbowl?: Prisma.superbowlCreateNestedManyWithoutLeaguemembersInput
}

export type leaguemembersUncheckedCreateWithoutEmailLogsInput = {
  membership_id?: number
  league_id: number
  user_id: number
  ts?: Date | string
  role?: $Enums.MemberRole | null
  paid?: boolean | null
  WeekWinners?: Prisma.WeekWinnersUncheckedCreateNestedManyWithoutLeaguemembersInput
  leaguemessages?: Prisma.leaguemessagesUncheckedCreateNestedManyWithoutLeaguemembersInput
  picks?: Prisma.picksUncheckedCreateNestedManyWithoutLeaguemembersInput
  superbowl?: Prisma.superbowlUncheckedCreateNestedManyWithoutLeaguemembersInput
}

export type leaguemembersCreateOrConnectWithoutEmailLogsInput = {
  where: Prisma.leaguemembersWhereUniqueInput
  create: Prisma.XOR<Prisma.leaguemembersCreateWithoutEmailLogsInput, Prisma.leaguemembersUncheckedCreateWithoutEmailLogsInput>
}

export type leaguemembersUpsertWithoutEmailLogsInput = {
  update: Prisma.XOR<Prisma.leaguemembersUpdateWithoutEmailLogsInput, Prisma.leaguemembersUncheckedUpdateWithoutEmailLogsInput>
  create: Prisma.XOR<Prisma.leaguemembersCreateWithoutEmailLogsInput, Prisma.leaguemembersUncheckedCreateWithoutEmailLogsInput>
  where?: Prisma.leaguemembersWhereInput
}

export type leaguemembersUpdateToOneWithWhereWithoutEmailLogsInput = {
  where?: Prisma.leaguemembersWhereInput
  data: Prisma.XOR<Prisma.leaguemembersUpdateWithoutEmailLogsInput, Prisma.leaguemembersUncheckedUpdateWithoutEmailLogsInput>
}

export type leaguemembersUpdateWithoutEmailLogsInput = {
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableEnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole | null
  paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  WeekWinners?: Prisma.WeekWinnersUpdateManyWithoutLeaguemembersNestedInput
  people?: Prisma.peopleUpdateOneRequiredWithoutLeaguemembersNestedInput
  leagues?: Prisma.leaguesUpdateOneRequiredWithoutLeaguemembersNestedInput
  leaguemessages?: Prisma.leaguemessagesUpdateManyWithoutLeaguemembersNestedInput
  picks?: Prisma.picksUpdateManyWithoutLeaguemembersNestedInput
  superbowl?: Prisma.superbowlUpdateManyWithoutLeaguemembersNestedInput
}

export type leaguemembersUncheckedUpdateWithoutEmailLogsInput = {
  membership_id?: Prisma.IntFieldUpdateOperationsInput | number
  league_id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableEnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole | null
  paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  WeekWinners?: Prisma.WeekWinnersUncheckedUpdateManyWithoutLeaguemembersNestedInput
  leaguemessages?: Prisma.leaguemessagesUncheckedUpdateManyWithoutLeaguemembersNestedInput
  picks?: Prisma.picksUncheckedUpdateManyWithoutLeaguemembersNestedInput
  superbowl?: Prisma.superbowlUncheckedUpdateManyWithoutLeaguemembersNestedInput
}

export type leaguemembersCreateWithoutWeekWinnersInput = {
  ts?: Date | string
  role?: $Enums.MemberRole | null
  paid?: boolean | null
  EmailLogs?: Prisma.EmailLogsCreateNestedManyWithoutLeaguemembersInput
  people: Prisma.peopleCreateNestedOneWithoutLeaguemembersInput
  leagues: Prisma.leaguesCreateNestedOneWithoutLeaguemembersInput
  leaguemessages?: Prisma.leaguemessagesCreateNestedManyWithoutLeaguemembersInput
  picks?: Prisma.picksCreateNestedManyWithoutLeaguemembersInput
  superbowl?: Prisma.superbowlCreateNestedManyWithoutLeaguemembersInput
}

export type leaguemembersUncheckedCreateWithoutWeekWinnersInput = {
  membership_id?: number
  league_id: number
  user_id: number
  ts?: Date | string
  role?: $Enums.MemberRole | null
  paid?: boolean | null
  EmailLogs?: Prisma.EmailLogsUncheckedCreateNestedManyWithoutLeaguemembersInput
  leaguemessages?: Prisma.leaguemessagesUncheckedCreateNestedManyWithoutLeaguemembersInput
  picks?: Prisma.picksUncheckedCreateNestedManyWithoutLeaguemembersInput
  superbowl?: Prisma.superbowlUncheckedCreateNestedManyWithoutLeaguemembersInput
}

export type leaguemembersCreateOrConnectWithoutWeekWinnersInput = {
  where: Prisma.leaguemembersWhereUniqueInput
  create: Prisma.XOR<Prisma.leaguemembersCreateWithoutWeekWinnersInput, Prisma.leaguemembersUncheckedCreateWithoutWeekWinnersInput>
}

export type leaguemembersUpsertWithoutWeekWinnersInput = {
  update: Prisma.XOR<Prisma.leaguemembersUpdateWithoutWeekWinnersInput, Prisma.leaguemembersUncheckedUpdateWithoutWeekWinnersInput>
  create: Prisma.XOR<Prisma.leaguemembersCreateWithoutWeekWinnersInput, Prisma.leaguemembersUncheckedCreateWithoutWeekWinnersInput>
  where?: Prisma.leaguemembersWhereInput
}

export type leaguemembersUpdateToOneWithWhereWithoutWeekWinnersInput = {
  where?: Prisma.leaguemembersWhereInput
  data: Prisma.XOR<Prisma.leaguemembersUpdateWithoutWeekWinnersInput, Prisma.leaguemembersUncheckedUpdateWithoutWeekWinnersInput>
}

export type leaguemembersUpdateWithoutWeekWinnersInput = {
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableEnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole | null
  paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  EmailLogs?: Prisma.EmailLogsUpdateManyWithoutLeaguemembersNestedInput
  people?: Prisma.peopleUpdateOneRequiredWithoutLeaguemembersNestedInput
  leagues?: Prisma.leaguesUpdateOneRequiredWithoutLeaguemembersNestedInput
  leaguemessages?: Prisma.leaguemessagesUpdateManyWithoutLeaguemembersNestedInput
  picks?: Prisma.picksUpdateManyWithoutLeaguemembersNestedInput
  superbowl?: Prisma.superbowlUpdateManyWithoutLeaguemembersNestedInput
}

export type leaguemembersUncheckedUpdateWithoutWeekWinnersInput = {
  membership_id?: Prisma.IntFieldUpdateOperationsInput | number
  league_id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableEnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole | null
  paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  EmailLogs?: Prisma.EmailLogsUncheckedUpdateManyWithoutLeaguemembersNestedInput
  leaguemessages?: Prisma.leaguemessagesUncheckedUpdateManyWithoutLeaguemembersNestedInput
  picks?: Prisma.picksUncheckedUpdateManyWithoutLeaguemembersNestedInput
  superbowl?: Prisma.superbowlUncheckedUpdateManyWithoutLeaguemembersNestedInput
}

export type leaguemembersCreateWithoutLeaguemessagesInput = {
  ts?: Date | string
  role?: $Enums.MemberRole | null
  paid?: boolean | null
  EmailLogs?: Prisma.EmailLogsCreateNestedManyWithoutLeaguemembersInput
  WeekWinners?: Prisma.WeekWinnersCreateNestedManyWithoutLeaguemembersInput
  people: Prisma.peopleCreateNestedOneWithoutLeaguemembersInput
  leagues: Prisma.leaguesCreateNestedOneWithoutLeaguemembersInput
  picks?: Prisma.picksCreateNestedManyWithoutLeaguemembersInput
  superbowl?: Prisma.superbowlCreateNestedManyWithoutLeaguemembersInput
}

export type leaguemembersUncheckedCreateWithoutLeaguemessagesInput = {
  membership_id?: number
  league_id: number
  user_id: number
  ts?: Date | string
  role?: $Enums.MemberRole | null
  paid?: boolean | null
  EmailLogs?: Prisma.EmailLogsUncheckedCreateNestedManyWithoutLeaguemembersInput
  WeekWinners?: Prisma.WeekWinnersUncheckedCreateNestedManyWithoutLeaguemembersInput
  picks?: Prisma.picksUncheckedCreateNestedManyWithoutLeaguemembersInput
  superbowl?: Prisma.superbowlUncheckedCreateNestedManyWithoutLeaguemembersInput
}

export type leaguemembersCreateOrConnectWithoutLeaguemessagesInput = {
  where: Prisma.leaguemembersWhereUniqueInput
  create: Prisma.XOR<Prisma.leaguemembersCreateWithoutLeaguemessagesInput, Prisma.leaguemembersUncheckedCreateWithoutLeaguemessagesInput>
}

export type leaguemembersUpsertWithoutLeaguemessagesInput = {
  update: Prisma.XOR<Prisma.leaguemembersUpdateWithoutLeaguemessagesInput, Prisma.leaguemembersUncheckedUpdateWithoutLeaguemessagesInput>
  create: Prisma.XOR<Prisma.leaguemembersCreateWithoutLeaguemessagesInput, Prisma.leaguemembersUncheckedCreateWithoutLeaguemessagesInput>
  where?: Prisma.leaguemembersWhereInput
}

export type leaguemembersUpdateToOneWithWhereWithoutLeaguemessagesInput = {
  where?: Prisma.leaguemembersWhereInput
  data: Prisma.XOR<Prisma.leaguemembersUpdateWithoutLeaguemessagesInput, Prisma.leaguemembersUncheckedUpdateWithoutLeaguemessagesInput>
}

export type leaguemembersUpdateWithoutLeaguemessagesInput = {
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableEnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole | null
  paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  EmailLogs?: Prisma.EmailLogsUpdateManyWithoutLeaguemembersNestedInput
  WeekWinners?: Prisma.WeekWinnersUpdateManyWithoutLeaguemembersNestedInput
  people?: Prisma.peopleUpdateOneRequiredWithoutLeaguemembersNestedInput
  leagues?: Prisma.leaguesUpdateOneRequiredWithoutLeaguemembersNestedInput
  picks?: Prisma.picksUpdateManyWithoutLeaguemembersNestedInput
  superbowl?: Prisma.superbowlUpdateManyWithoutLeaguemembersNestedInput
}

export type leaguemembersUncheckedUpdateWithoutLeaguemessagesInput = {
  membership_id?: Prisma.IntFieldUpdateOperationsInput | number
  league_id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableEnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole | null
  paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  EmailLogs?: Prisma.EmailLogsUncheckedUpdateManyWithoutLeaguemembersNestedInput
  WeekWinners?: Prisma.WeekWinnersUncheckedUpdateManyWithoutLeaguemembersNestedInput
  picks?: Prisma.picksUncheckedUpdateManyWithoutLeaguemembersNestedInput
  superbowl?: Prisma.superbowlUncheckedUpdateManyWithoutLeaguemembersNestedInput
}

export type leaguemembersCreateWithoutLeaguesInput = {
  ts?: Date | string
  role?: $Enums.MemberRole | null
  paid?: boolean | null
  EmailLogs?: Prisma.EmailLogsCreateNestedManyWithoutLeaguemembersInput
  WeekWinners?: Prisma.WeekWinnersCreateNestedManyWithoutLeaguemembersInput
  people: Prisma.peopleCreateNestedOneWithoutLeaguemembersInput
  leaguemessages?: Prisma.leaguemessagesCreateNestedManyWithoutLeaguemembersInput
  picks?: Prisma.picksCreateNestedManyWithoutLeaguemembersInput
  superbowl?: Prisma.superbowlCreateNestedManyWithoutLeaguemembersInput
}

export type leaguemembersUncheckedCreateWithoutLeaguesInput = {
  membership_id?: number
  user_id: number
  ts?: Date | string
  role?: $Enums.MemberRole | null
  paid?: boolean | null
  EmailLogs?: Prisma.EmailLogsUncheckedCreateNestedManyWithoutLeaguemembersInput
  WeekWinners?: Prisma.WeekWinnersUncheckedCreateNestedManyWithoutLeaguemembersInput
  leaguemessages?: Prisma.leaguemessagesUncheckedCreateNestedManyWithoutLeaguemembersInput
  picks?: Prisma.picksUncheckedCreateNestedManyWithoutLeaguemembersInput
  superbowl?: Prisma.superbowlUncheckedCreateNestedManyWithoutLeaguemembersInput
}

export type leaguemembersCreateOrConnectWithoutLeaguesInput = {
  where: Prisma.leaguemembersWhereUniqueInput
  create: Prisma.XOR<Prisma.leaguemembersCreateWithoutLeaguesInput, Prisma.leaguemembersUncheckedCreateWithoutLeaguesInput>
}

export type leaguemembersCreateManyLeaguesInputEnvelope = {
  data: Prisma.leaguemembersCreateManyLeaguesInput | Prisma.leaguemembersCreateManyLeaguesInput[]
  skipDuplicates?: boolean
}

export type leaguemembersUpsertWithWhereUniqueWithoutLeaguesInput = {
  where: Prisma.leaguemembersWhereUniqueInput
  update: Prisma.XOR<Prisma.leaguemembersUpdateWithoutLeaguesInput, Prisma.leaguemembersUncheckedUpdateWithoutLeaguesInput>
  create: Prisma.XOR<Prisma.leaguemembersCreateWithoutLeaguesInput, Prisma.leaguemembersUncheckedCreateWithoutLeaguesInput>
}

export type leaguemembersUpdateWithWhereUniqueWithoutLeaguesInput = {
  where: Prisma.leaguemembersWhereUniqueInput
  data: Prisma.XOR<Prisma.leaguemembersUpdateWithoutLeaguesInput, Prisma.leaguemembersUncheckedUpdateWithoutLeaguesInput>
}

export type leaguemembersUpdateManyWithWhereWithoutLeaguesInput = {
  where: Prisma.leaguemembersScalarWhereInput
  data: Prisma.XOR<Prisma.leaguemembersUpdateManyMutationInput, Prisma.leaguemembersUncheckedUpdateManyWithoutLeaguesInput>
}

export type leaguemembersScalarWhereInput = {
  AND?: Prisma.leaguemembersScalarWhereInput | Prisma.leaguemembersScalarWhereInput[]
  OR?: Prisma.leaguemembersScalarWhereInput[]
  NOT?: Prisma.leaguemembersScalarWhereInput | Prisma.leaguemembersScalarWhereInput[]
  membership_id?: Prisma.IntFilter<"leaguemembers"> | number
  league_id?: Prisma.IntFilter<"leaguemembers"> | number
  user_id?: Prisma.IntFilter<"leaguemembers"> | number
  ts?: Prisma.DateTimeFilter<"leaguemembers"> | Date | string
  role?: Prisma.EnumMemberRoleNullableFilter<"leaguemembers"> | $Enums.MemberRole | null
  paid?: Prisma.BoolNullableFilter<"leaguemembers"> | boolean | null
}

export type leaguemembersCreateWithoutPeopleInput = {
  ts?: Date | string
  role?: $Enums.MemberRole | null
  paid?: boolean | null
  EmailLogs?: Prisma.EmailLogsCreateNestedManyWithoutLeaguemembersInput
  WeekWinners?: Prisma.WeekWinnersCreateNestedManyWithoutLeaguemembersInput
  leagues: Prisma.leaguesCreateNestedOneWithoutLeaguemembersInput
  leaguemessages?: Prisma.leaguemessagesCreateNestedManyWithoutLeaguemembersInput
  picks?: Prisma.picksCreateNestedManyWithoutLeaguemembersInput
  superbowl?: Prisma.superbowlCreateNestedManyWithoutLeaguemembersInput
}

export type leaguemembersUncheckedCreateWithoutPeopleInput = {
  membership_id?: number
  league_id: number
  ts?: Date | string
  role?: $Enums.MemberRole | null
  paid?: boolean | null
  EmailLogs?: Prisma.EmailLogsUncheckedCreateNestedManyWithoutLeaguemembersInput
  WeekWinners?: Prisma.WeekWinnersUncheckedCreateNestedManyWithoutLeaguemembersInput
  leaguemessages?: Prisma.leaguemessagesUncheckedCreateNestedManyWithoutLeaguemembersInput
  picks?: Prisma.picksUncheckedCreateNestedManyWithoutLeaguemembersInput
  superbowl?: Prisma.superbowlUncheckedCreateNestedManyWithoutLeaguemembersInput
}

export type leaguemembersCreateOrConnectWithoutPeopleInput = {
  where: Prisma.leaguemembersWhereUniqueInput
  create: Prisma.XOR<Prisma.leaguemembersCreateWithoutPeopleInput, Prisma.leaguemembersUncheckedCreateWithoutPeopleInput>
}

export type leaguemembersCreateManyPeopleInputEnvelope = {
  data: Prisma.leaguemembersCreateManyPeopleInput | Prisma.leaguemembersCreateManyPeopleInput[]
  skipDuplicates?: boolean
}

export type leaguemembersUpsertWithWhereUniqueWithoutPeopleInput = {
  where: Prisma.leaguemembersWhereUniqueInput
  update: Prisma.XOR<Prisma.leaguemembersUpdateWithoutPeopleInput, Prisma.leaguemembersUncheckedUpdateWithoutPeopleInput>
  create: Prisma.XOR<Prisma.leaguemembersCreateWithoutPeopleInput, Prisma.leaguemembersUncheckedCreateWithoutPeopleInput>
}

export type leaguemembersUpdateWithWhereUniqueWithoutPeopleInput = {
  where: Prisma.leaguemembersWhereUniqueInput
  data: Prisma.XOR<Prisma.leaguemembersUpdateWithoutPeopleInput, Prisma.leaguemembersUncheckedUpdateWithoutPeopleInput>
}

export type leaguemembersUpdateManyWithWhereWithoutPeopleInput = {
  where: Prisma.leaguemembersScalarWhereInput
  data: Prisma.XOR<Prisma.leaguemembersUpdateManyMutationInput, Prisma.leaguemembersUncheckedUpdateManyWithoutPeopleInput>
}

export type leaguemembersCreateWithoutPicksInput = {
  ts?: Date | string
  role?: $Enums.MemberRole | null
  paid?: boolean | null
  EmailLogs?: Prisma.EmailLogsCreateNestedManyWithoutLeaguemembersInput
  WeekWinners?: Prisma.WeekWinnersCreateNestedManyWithoutLeaguemembersInput
  people: Prisma.peopleCreateNestedOneWithoutLeaguemembersInput
  leagues: Prisma.leaguesCreateNestedOneWithoutLeaguemembersInput
  leaguemessages?: Prisma.leaguemessagesCreateNestedManyWithoutLeaguemembersInput
  superbowl?: Prisma.superbowlCreateNestedManyWithoutLeaguemembersInput
}

export type leaguemembersUncheckedCreateWithoutPicksInput = {
  membership_id?: number
  league_id: number
  user_id: number
  ts?: Date | string
  role?: $Enums.MemberRole | null
  paid?: boolean | null
  EmailLogs?: Prisma.EmailLogsUncheckedCreateNestedManyWithoutLeaguemembersInput
  WeekWinners?: Prisma.WeekWinnersUncheckedCreateNestedManyWithoutLeaguemembersInput
  leaguemessages?: Prisma.leaguemessagesUncheckedCreateNestedManyWithoutLeaguemembersInput
  superbowl?: Prisma.superbowlUncheckedCreateNestedManyWithoutLeaguemembersInput
}

export type leaguemembersCreateOrConnectWithoutPicksInput = {
  where: Prisma.leaguemembersWhereUniqueInput
  create: Prisma.XOR<Prisma.leaguemembersCreateWithoutPicksInput, Prisma.leaguemembersUncheckedCreateWithoutPicksInput>
}

export type leaguemembersUpsertWithoutPicksInput = {
  update: Prisma.XOR<Prisma.leaguemembersUpdateWithoutPicksInput, Prisma.leaguemembersUncheckedUpdateWithoutPicksInput>
  create: Prisma.XOR<Prisma.leaguemembersCreateWithoutPicksInput, Prisma.leaguemembersUncheckedCreateWithoutPicksInput>
  where?: Prisma.leaguemembersWhereInput
}

export type leaguemembersUpdateToOneWithWhereWithoutPicksInput = {
  where?: Prisma.leaguemembersWhereInput
  data: Prisma.XOR<Prisma.leaguemembersUpdateWithoutPicksInput, Prisma.leaguemembersUncheckedUpdateWithoutPicksInput>
}

export type leaguemembersUpdateWithoutPicksInput = {
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableEnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole | null
  paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  EmailLogs?: Prisma.EmailLogsUpdateManyWithoutLeaguemembersNestedInput
  WeekWinners?: Prisma.WeekWinnersUpdateManyWithoutLeaguemembersNestedInput
  people?: Prisma.peopleUpdateOneRequiredWithoutLeaguemembersNestedInput
  leagues?: Prisma.leaguesUpdateOneRequiredWithoutLeaguemembersNestedInput
  leaguemessages?: Prisma.leaguemessagesUpdateManyWithoutLeaguemembersNestedInput
  superbowl?: Prisma.superbowlUpdateManyWithoutLeaguemembersNestedInput
}

export type leaguemembersUncheckedUpdateWithoutPicksInput = {
  membership_id?: Prisma.IntFieldUpdateOperationsInput | number
  league_id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableEnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole | null
  paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  EmailLogs?: Prisma.EmailLogsUncheckedUpdateManyWithoutLeaguemembersNestedInput
  WeekWinners?: Prisma.WeekWinnersUncheckedUpdateManyWithoutLeaguemembersNestedInput
  leaguemessages?: Prisma.leaguemessagesUncheckedUpdateManyWithoutLeaguemembersNestedInput
  superbowl?: Prisma.superbowlUncheckedUpdateManyWithoutLeaguemembersNestedInput
}

export type leaguemembersCreateWithoutSuperbowlInput = {
  ts?: Date | string
  role?: $Enums.MemberRole | null
  paid?: boolean | null
  EmailLogs?: Prisma.EmailLogsCreateNestedManyWithoutLeaguemembersInput
  WeekWinners?: Prisma.WeekWinnersCreateNestedManyWithoutLeaguemembersInput
  people: Prisma.peopleCreateNestedOneWithoutLeaguemembersInput
  leagues: Prisma.leaguesCreateNestedOneWithoutLeaguemembersInput
  leaguemessages?: Prisma.leaguemessagesCreateNestedManyWithoutLeaguemembersInput
  picks?: Prisma.picksCreateNestedManyWithoutLeaguemembersInput
}

export type leaguemembersUncheckedCreateWithoutSuperbowlInput = {
  membership_id?: number
  league_id: number
  user_id: number
  ts?: Date | string
  role?: $Enums.MemberRole | null
  paid?: boolean | null
  EmailLogs?: Prisma.EmailLogsUncheckedCreateNestedManyWithoutLeaguemembersInput
  WeekWinners?: Prisma.WeekWinnersUncheckedCreateNestedManyWithoutLeaguemembersInput
  leaguemessages?: Prisma.leaguemessagesUncheckedCreateNestedManyWithoutLeaguemembersInput
  picks?: Prisma.picksUncheckedCreateNestedManyWithoutLeaguemembersInput
}

export type leaguemembersCreateOrConnectWithoutSuperbowlInput = {
  where: Prisma.leaguemembersWhereUniqueInput
  create: Prisma.XOR<Prisma.leaguemembersCreateWithoutSuperbowlInput, Prisma.leaguemembersUncheckedCreateWithoutSuperbowlInput>
}

export type leaguemembersUpsertWithoutSuperbowlInput = {
  update: Prisma.XOR<Prisma.leaguemembersUpdateWithoutSuperbowlInput, Prisma.leaguemembersUncheckedUpdateWithoutSuperbowlInput>
  create: Prisma.XOR<Prisma.leaguemembersCreateWithoutSuperbowlInput, Prisma.leaguemembersUncheckedCreateWithoutSuperbowlInput>
  where?: Prisma.leaguemembersWhereInput
}

export type leaguemembersUpdateToOneWithWhereWithoutSuperbowlInput = {
  where?: Prisma.leaguemembersWhereInput
  data: Prisma.XOR<Prisma.leaguemembersUpdateWithoutSuperbowlInput, Prisma.leaguemembersUncheckedUpdateWithoutSuperbowlInput>
}

export type leaguemembersUpdateWithoutSuperbowlInput = {
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableEnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole | null
  paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  EmailLogs?: Prisma.EmailLogsUpdateManyWithoutLeaguemembersNestedInput
  WeekWinners?: Prisma.WeekWinnersUpdateManyWithoutLeaguemembersNestedInput
  people?: Prisma.peopleUpdateOneRequiredWithoutLeaguemembersNestedInput
  leagues?: Prisma.leaguesUpdateOneRequiredWithoutLeaguemembersNestedInput
  leaguemessages?: Prisma.leaguemessagesUpdateManyWithoutLeaguemembersNestedInput
  picks?: Prisma.picksUpdateManyWithoutLeaguemembersNestedInput
}

export type leaguemembersUncheckedUpdateWithoutSuperbowlInput = {
  membership_id?: Prisma.IntFieldUpdateOperationsInput | number
  league_id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableEnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole | null
  paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  EmailLogs?: Prisma.EmailLogsUncheckedUpdateManyWithoutLeaguemembersNestedInput
  WeekWinners?: Prisma.WeekWinnersUncheckedUpdateManyWithoutLeaguemembersNestedInput
  leaguemessages?: Prisma.leaguemessagesUncheckedUpdateManyWithoutLeaguemembersNestedInput
  picks?: Prisma.picksUncheckedUpdateManyWithoutLeaguemembersNestedInput
}

export type leaguemembersCreateManyLeaguesInput = {
  membership_id?: number
  user_id: number
  ts?: Date | string
  role?: $Enums.MemberRole | null
  paid?: boolean | null
}

export type leaguemembersUpdateWithoutLeaguesInput = {
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableEnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole | null
  paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  EmailLogs?: Prisma.EmailLogsUpdateManyWithoutLeaguemembersNestedInput
  WeekWinners?: Prisma.WeekWinnersUpdateManyWithoutLeaguemembersNestedInput
  people?: Prisma.peopleUpdateOneRequiredWithoutLeaguemembersNestedInput
  leaguemessages?: Prisma.leaguemessagesUpdateManyWithoutLeaguemembersNestedInput
  picks?: Prisma.picksUpdateManyWithoutLeaguemembersNestedInput
  superbowl?: Prisma.superbowlUpdateManyWithoutLeaguemembersNestedInput
}

export type leaguemembersUncheckedUpdateWithoutLeaguesInput = {
  membership_id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableEnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole | null
  paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  EmailLogs?: Prisma.EmailLogsUncheckedUpdateManyWithoutLeaguemembersNestedInput
  WeekWinners?: Prisma.WeekWinnersUncheckedUpdateManyWithoutLeaguemembersNestedInput
  leaguemessages?: Prisma.leaguemessagesUncheckedUpdateManyWithoutLeaguemembersNestedInput
  picks?: Prisma.picksUncheckedUpdateManyWithoutLeaguemembersNestedInput
  superbowl?: Prisma.superbowlUncheckedUpdateManyWithoutLeaguemembersNestedInput
}

export type leaguemembersUncheckedUpdateManyWithoutLeaguesInput = {
  membership_id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableEnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole | null
  paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}

export type leaguemembersCreateManyPeopleInput = {
  membership_id?: number
  league_id: number
  ts?: Date | string
  role?: $Enums.MemberRole | null
  paid?: boolean | null
}

export type leaguemembersUpdateWithoutPeopleInput = {
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableEnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole | null
  paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  EmailLogs?: Prisma.EmailLogsUpdateManyWithoutLeaguemembersNestedInput
  WeekWinners?: Prisma.WeekWinnersUpdateManyWithoutLeaguemembersNestedInput
  leagues?: Prisma.leaguesUpdateOneRequiredWithoutLeaguemembersNestedInput
  leaguemessages?: Prisma.leaguemessagesUpdateManyWithoutLeaguemembersNestedInput
  picks?: Prisma.picksUpdateManyWithoutLeaguemembersNestedInput
  superbowl?: Prisma.superbowlUpdateManyWithoutLeaguemembersNestedInput
}

export type leaguemembersUncheckedUpdateWithoutPeopleInput = {
  membership_id?: Prisma.IntFieldUpdateOperationsInput | number
  league_id?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableEnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole | null
  paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  EmailLogs?: Prisma.EmailLogsUncheckedUpdateManyWithoutLeaguemembersNestedInput
  WeekWinners?: Prisma.WeekWinnersUncheckedUpdateManyWithoutLeaguemembersNestedInput
  leaguemessages?: Prisma.leaguemessagesUncheckedUpdateManyWithoutLeaguemembersNestedInput
  picks?: Prisma.picksUncheckedUpdateManyWithoutLeaguemembersNestedInput
  superbowl?: Prisma.superbowlUncheckedUpdateManyWithoutLeaguemembersNestedInput
}

export type leaguemembersUncheckedUpdateManyWithoutPeopleInput = {
  membership_id?: Prisma.IntFieldUpdateOperationsInput | number
  league_id?: Prisma.IntFieldUpdateOperationsInput | number
  ts?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  role?: Prisma.NullableEnumMemberRoleFieldUpdateOperationsInput | $Enums.MemberRole | null
  paid?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
}


/**
 * Count Type LeaguemembersCountOutputType
 */

export type LeaguemembersCountOutputType = {
  EmailLogs: number
  WeekWinners: number
  leaguemessages: number
  picks: number
  superbowl: number
}

export type LeaguemembersCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  EmailLogs?: boolean | LeaguemembersCountOutputTypeCountEmailLogsArgs
  WeekWinners?: boolean | LeaguemembersCountOutputTypeCountWeekWinnersArgs
  leaguemessages?: boolean | LeaguemembersCountOutputTypeCountLeaguemessagesArgs
  picks?: boolean | LeaguemembersCountOutputTypeCountPicksArgs
  superbowl?: boolean | LeaguemembersCountOutputTypeCountSuperbowlArgs
}

/**
 * LeaguemembersCountOutputType without action
 */
export type LeaguemembersCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the LeaguemembersCountOutputType
   */
  select?: Prisma.LeaguemembersCountOutputTypeSelect<ExtArgs> | null
}

/**
 * LeaguemembersCountOutputType without action
 */
export type LeaguemembersCountOutputTypeCountEmailLogsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EmailLogsWhereInput
}

/**
 * LeaguemembersCountOutputType without action
 */
export type LeaguemembersCountOutputTypeCountWeekWinnersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.WeekWinnersWhereInput
}

/**
 * LeaguemembersCountOutputType without action
 */
export type LeaguemembersCountOutputTypeCountLeaguemessagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.leaguemessagesWhereInput
}

/**
 * LeaguemembersCountOutputType without action
 */
export type LeaguemembersCountOutputTypeCountPicksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.picksWhereInput
}

/**
 * LeaguemembersCountOutputType without action
 */
export type LeaguemembersCountOutputTypeCountSuperbowlArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.superbowlWhereInput
}


export type leaguemembersSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  membership_id?: boolean
  league_id?: boolean
  user_id?: boolean
  ts?: boolean
  role?: boolean
  paid?: boolean
  EmailLogs?: boolean | Prisma.leaguemembers$EmailLogsArgs<ExtArgs>
  WeekWinners?: boolean | Prisma.leaguemembers$WeekWinnersArgs<ExtArgs>
  people?: boolean | Prisma.peopleDefaultArgs<ExtArgs>
  leagues?: boolean | Prisma.leaguesDefaultArgs<ExtArgs>
  leaguemessages?: boolean | Prisma.leaguemembers$leaguemessagesArgs<ExtArgs>
  picks?: boolean | Prisma.leaguemembers$picksArgs<ExtArgs>
  superbowl?: boolean | Prisma.leaguemembers$superbowlArgs<ExtArgs>
  _count?: boolean | Prisma.LeaguemembersCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["leaguemembers"]>

export type leaguemembersSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  membership_id?: boolean
  league_id?: boolean
  user_id?: boolean
  ts?: boolean
  role?: boolean
  paid?: boolean
  people?: boolean | Prisma.peopleDefaultArgs<ExtArgs>
  leagues?: boolean | Prisma.leaguesDefaultArgs<ExtArgs>
}, ExtArgs["result"]["leaguemembers"]>

export type leaguemembersSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  membership_id?: boolean
  league_id?: boolean
  user_id?: boolean
  ts?: boolean
  role?: boolean
  paid?: boolean
  people?: boolean | Prisma.peopleDefaultArgs<ExtArgs>
  leagues?: boolean | Prisma.leaguesDefaultArgs<ExtArgs>
}, ExtArgs["result"]["leaguemembers"]>

export type leaguemembersSelectScalar = {
  membership_id?: boolean
  league_id?: boolean
  user_id?: boolean
  ts?: boolean
  role?: boolean
  paid?: boolean
}

export type leaguemembersOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"membership_id" | "league_id" | "user_id" | "ts" | "role" | "paid", ExtArgs["result"]["leaguemembers"]>
export type leaguemembersInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  EmailLogs?: boolean | Prisma.leaguemembers$EmailLogsArgs<ExtArgs>
  WeekWinners?: boolean | Prisma.leaguemembers$WeekWinnersArgs<ExtArgs>
  people?: boolean | Prisma.peopleDefaultArgs<ExtArgs>
  leagues?: boolean | Prisma.leaguesDefaultArgs<ExtArgs>
  leaguemessages?: boolean | Prisma.leaguemembers$leaguemessagesArgs<ExtArgs>
  picks?: boolean | Prisma.leaguemembers$picksArgs<ExtArgs>
  superbowl?: boolean | Prisma.leaguemembers$superbowlArgs<ExtArgs>
  _count?: boolean | Prisma.LeaguemembersCountOutputTypeDefaultArgs<ExtArgs>
}
export type leaguemembersIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  people?: boolean | Prisma.peopleDefaultArgs<ExtArgs>
  leagues?: boolean | Prisma.leaguesDefaultArgs<ExtArgs>
}
export type leaguemembersIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  people?: boolean | Prisma.peopleDefaultArgs<ExtArgs>
  leagues?: boolean | Prisma.leaguesDefaultArgs<ExtArgs>
}

export type $leaguemembersPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "leaguemembers"
  objects: {
    EmailLogs: Prisma.$EmailLogsPayload<ExtArgs>[]
    WeekWinners: Prisma.$WeekWinnersPayload<ExtArgs>[]
    people: Prisma.$peoplePayload<ExtArgs>
    leagues: Prisma.$leaguesPayload<ExtArgs>
    leaguemessages: Prisma.$leaguemessagesPayload<ExtArgs>[]
    picks: Prisma.$picksPayload<ExtArgs>[]
    superbowl: Prisma.$superbowlPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    membership_id: number
    league_id: number
    user_id: number
    ts: Date
    role: $Enums.MemberRole | null
    paid: boolean | null
  }, ExtArgs["result"]["leaguemembers"]>
  composites: {}
}

export type leaguemembersGetPayload<S extends boolean | null | undefined | leaguemembersDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$leaguemembersPayload, S>

export type leaguemembersCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<leaguemembersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: LeaguemembersCountAggregateInputType | true
  }

export interface leaguemembersDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['leaguemembers'], meta: { name: 'leaguemembers' } }
  /**
   * Find zero or one Leaguemembers that matches the filter.
   * @param {leaguemembersFindUniqueArgs} args - Arguments to find a Leaguemembers
   * @example
   * // Get one Leaguemembers
   * const leaguemembers = await prisma.leaguemembers.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends leaguemembersFindUniqueArgs>(args: Prisma.SelectSubset<T, leaguemembersFindUniqueArgs<ExtArgs>>): Prisma.Prisma__leaguemembersClient<runtime.Types.Result.GetResult<Prisma.$leaguemembersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Leaguemembers that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {leaguemembersFindUniqueOrThrowArgs} args - Arguments to find a Leaguemembers
   * @example
   * // Get one Leaguemembers
   * const leaguemembers = await prisma.leaguemembers.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends leaguemembersFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, leaguemembersFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__leaguemembersClient<runtime.Types.Result.GetResult<Prisma.$leaguemembersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Leaguemembers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {leaguemembersFindFirstArgs} args - Arguments to find a Leaguemembers
   * @example
   * // Get one Leaguemembers
   * const leaguemembers = await prisma.leaguemembers.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends leaguemembersFindFirstArgs>(args?: Prisma.SelectSubset<T, leaguemembersFindFirstArgs<ExtArgs>>): Prisma.Prisma__leaguemembersClient<runtime.Types.Result.GetResult<Prisma.$leaguemembersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Leaguemembers that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {leaguemembersFindFirstOrThrowArgs} args - Arguments to find a Leaguemembers
   * @example
   * // Get one Leaguemembers
   * const leaguemembers = await prisma.leaguemembers.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends leaguemembersFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, leaguemembersFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__leaguemembersClient<runtime.Types.Result.GetResult<Prisma.$leaguemembersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Leaguemembers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {leaguemembersFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Leaguemembers
   * const leaguemembers = await prisma.leaguemembers.findMany()
   * 
   * // Get first 10 Leaguemembers
   * const leaguemembers = await prisma.leaguemembers.findMany({ take: 10 })
   * 
   * // Only select the `membership_id`
   * const leaguemembersWithMembership_idOnly = await prisma.leaguemembers.findMany({ select: { membership_id: true } })
   * 
   */
  findMany<T extends leaguemembersFindManyArgs>(args?: Prisma.SelectSubset<T, leaguemembersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$leaguemembersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Leaguemembers.
   * @param {leaguemembersCreateArgs} args - Arguments to create a Leaguemembers.
   * @example
   * // Create one Leaguemembers
   * const Leaguemembers = await prisma.leaguemembers.create({
   *   data: {
   *     // ... data to create a Leaguemembers
   *   }
   * })
   * 
   */
  create<T extends leaguemembersCreateArgs>(args: Prisma.SelectSubset<T, leaguemembersCreateArgs<ExtArgs>>): Prisma.Prisma__leaguemembersClient<runtime.Types.Result.GetResult<Prisma.$leaguemembersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Leaguemembers.
   * @param {leaguemembersCreateManyArgs} args - Arguments to create many Leaguemembers.
   * @example
   * // Create many Leaguemembers
   * const leaguemembers = await prisma.leaguemembers.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends leaguemembersCreateManyArgs>(args?: Prisma.SelectSubset<T, leaguemembersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Leaguemembers and returns the data saved in the database.
   * @param {leaguemembersCreateManyAndReturnArgs} args - Arguments to create many Leaguemembers.
   * @example
   * // Create many Leaguemembers
   * const leaguemembers = await prisma.leaguemembers.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Leaguemembers and only return the `membership_id`
   * const leaguemembersWithMembership_idOnly = await prisma.leaguemembers.createManyAndReturn({
   *   select: { membership_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends leaguemembersCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, leaguemembersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$leaguemembersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Leaguemembers.
   * @param {leaguemembersDeleteArgs} args - Arguments to delete one Leaguemembers.
   * @example
   * // Delete one Leaguemembers
   * const Leaguemembers = await prisma.leaguemembers.delete({
   *   where: {
   *     // ... filter to delete one Leaguemembers
   *   }
   * })
   * 
   */
  delete<T extends leaguemembersDeleteArgs>(args: Prisma.SelectSubset<T, leaguemembersDeleteArgs<ExtArgs>>): Prisma.Prisma__leaguemembersClient<runtime.Types.Result.GetResult<Prisma.$leaguemembersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Leaguemembers.
   * @param {leaguemembersUpdateArgs} args - Arguments to update one Leaguemembers.
   * @example
   * // Update one Leaguemembers
   * const leaguemembers = await prisma.leaguemembers.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends leaguemembersUpdateArgs>(args: Prisma.SelectSubset<T, leaguemembersUpdateArgs<ExtArgs>>): Prisma.Prisma__leaguemembersClient<runtime.Types.Result.GetResult<Prisma.$leaguemembersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Leaguemembers.
   * @param {leaguemembersDeleteManyArgs} args - Arguments to filter Leaguemembers to delete.
   * @example
   * // Delete a few Leaguemembers
   * const { count } = await prisma.leaguemembers.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends leaguemembersDeleteManyArgs>(args?: Prisma.SelectSubset<T, leaguemembersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Leaguemembers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {leaguemembersUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Leaguemembers
   * const leaguemembers = await prisma.leaguemembers.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends leaguemembersUpdateManyArgs>(args: Prisma.SelectSubset<T, leaguemembersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Leaguemembers and returns the data updated in the database.
   * @param {leaguemembersUpdateManyAndReturnArgs} args - Arguments to update many Leaguemembers.
   * @example
   * // Update many Leaguemembers
   * const leaguemembers = await prisma.leaguemembers.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Leaguemembers and only return the `membership_id`
   * const leaguemembersWithMembership_idOnly = await prisma.leaguemembers.updateManyAndReturn({
   *   select: { membership_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends leaguemembersUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, leaguemembersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$leaguemembersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Leaguemembers.
   * @param {leaguemembersUpsertArgs} args - Arguments to update or create a Leaguemembers.
   * @example
   * // Update or create a Leaguemembers
   * const leaguemembers = await prisma.leaguemembers.upsert({
   *   create: {
   *     // ... data to create a Leaguemembers
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Leaguemembers we want to update
   *   }
   * })
   */
  upsert<T extends leaguemembersUpsertArgs>(args: Prisma.SelectSubset<T, leaguemembersUpsertArgs<ExtArgs>>): Prisma.Prisma__leaguemembersClient<runtime.Types.Result.GetResult<Prisma.$leaguemembersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Leaguemembers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {leaguemembersCountArgs} args - Arguments to filter Leaguemembers to count.
   * @example
   * // Count the number of Leaguemembers
   * const count = await prisma.leaguemembers.count({
   *   where: {
   *     // ... the filter for the Leaguemembers we want to count
   *   }
   * })
  **/
  count<T extends leaguemembersCountArgs>(
    args?: Prisma.Subset<T, leaguemembersCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], LeaguemembersCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Leaguemembers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {LeaguemembersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends LeaguemembersAggregateArgs>(args: Prisma.Subset<T, LeaguemembersAggregateArgs>): Prisma.PrismaPromise<GetLeaguemembersAggregateType<T>>

  /**
   * Group by Leaguemembers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {leaguemembersGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends leaguemembersGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: leaguemembersGroupByArgs['orderBy'] }
      : { orderBy?: leaguemembersGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, leaguemembersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeaguemembersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the leaguemembers model
 */
readonly fields: leaguemembersFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for leaguemembers.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__leaguemembersClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  EmailLogs<T extends Prisma.leaguemembers$EmailLogsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.leaguemembers$EmailLogsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmailLogsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  WeekWinners<T extends Prisma.leaguemembers$WeekWinnersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.leaguemembers$WeekWinnersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$WeekWinnersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  people<T extends Prisma.peopleDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.peopleDefaultArgs<ExtArgs>>): Prisma.Prisma__peopleClient<runtime.Types.Result.GetResult<Prisma.$peoplePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  leagues<T extends Prisma.leaguesDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.leaguesDefaultArgs<ExtArgs>>): Prisma.Prisma__leaguesClient<runtime.Types.Result.GetResult<Prisma.$leaguesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  leaguemessages<T extends Prisma.leaguemembers$leaguemessagesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.leaguemembers$leaguemessagesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$leaguemessagesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  picks<T extends Prisma.leaguemembers$picksArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.leaguemembers$picksArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$picksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  superbowl<T extends Prisma.leaguemembers$superbowlArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.leaguemembers$superbowlArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$superbowlPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the leaguemembers model
 */
export interface leaguemembersFieldRefs {
  readonly membership_id: Prisma.FieldRef<"leaguemembers", 'Int'>
  readonly league_id: Prisma.FieldRef<"leaguemembers", 'Int'>
  readonly user_id: Prisma.FieldRef<"leaguemembers", 'Int'>
  readonly ts: Prisma.FieldRef<"leaguemembers", 'DateTime'>
  readonly role: Prisma.FieldRef<"leaguemembers", 'MemberRole'>
  readonly paid: Prisma.FieldRef<"leaguemembers", 'Boolean'>
}
    

// Custom InputTypes
/**
 * leaguemembers findUnique
 */
export type leaguemembersFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaguemembers
   */
  select?: Prisma.leaguemembersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaguemembers
   */
  omit?: Prisma.leaguemembersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.leaguemembersInclude<ExtArgs> | null
  /**
   * Filter, which leaguemembers to fetch.
   */
  where: Prisma.leaguemembersWhereUniqueInput
}

/**
 * leaguemembers findUniqueOrThrow
 */
export type leaguemembersFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaguemembers
   */
  select?: Prisma.leaguemembersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaguemembers
   */
  omit?: Prisma.leaguemembersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.leaguemembersInclude<ExtArgs> | null
  /**
   * Filter, which leaguemembers to fetch.
   */
  where: Prisma.leaguemembersWhereUniqueInput
}

/**
 * leaguemembers findFirst
 */
export type leaguemembersFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaguemembers
   */
  select?: Prisma.leaguemembersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaguemembers
   */
  omit?: Prisma.leaguemembersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.leaguemembersInclude<ExtArgs> | null
  /**
   * Filter, which leaguemembers to fetch.
   */
  where?: Prisma.leaguemembersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of leaguemembers to fetch.
   */
  orderBy?: Prisma.leaguemembersOrderByWithRelationInput | Prisma.leaguemembersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for leaguemembers.
   */
  cursor?: Prisma.leaguemembersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` leaguemembers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` leaguemembers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of leaguemembers.
   */
  distinct?: Prisma.LeaguemembersScalarFieldEnum | Prisma.LeaguemembersScalarFieldEnum[]
}

/**
 * leaguemembers findFirstOrThrow
 */
export type leaguemembersFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaguemembers
   */
  select?: Prisma.leaguemembersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaguemembers
   */
  omit?: Prisma.leaguemembersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.leaguemembersInclude<ExtArgs> | null
  /**
   * Filter, which leaguemembers to fetch.
   */
  where?: Prisma.leaguemembersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of leaguemembers to fetch.
   */
  orderBy?: Prisma.leaguemembersOrderByWithRelationInput | Prisma.leaguemembersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for leaguemembers.
   */
  cursor?: Prisma.leaguemembersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` leaguemembers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` leaguemembers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of leaguemembers.
   */
  distinct?: Prisma.LeaguemembersScalarFieldEnum | Prisma.LeaguemembersScalarFieldEnum[]
}

/**
 * leaguemembers findMany
 */
export type leaguemembersFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaguemembers
   */
  select?: Prisma.leaguemembersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaguemembers
   */
  omit?: Prisma.leaguemembersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.leaguemembersInclude<ExtArgs> | null
  /**
   * Filter, which leaguemembers to fetch.
   */
  where?: Prisma.leaguemembersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of leaguemembers to fetch.
   */
  orderBy?: Prisma.leaguemembersOrderByWithRelationInput | Prisma.leaguemembersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing leaguemembers.
   */
  cursor?: Prisma.leaguemembersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` leaguemembers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` leaguemembers.
   */
  skip?: number
  distinct?: Prisma.LeaguemembersScalarFieldEnum | Prisma.LeaguemembersScalarFieldEnum[]
}

/**
 * leaguemembers create
 */
export type leaguemembersCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaguemembers
   */
  select?: Prisma.leaguemembersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaguemembers
   */
  omit?: Prisma.leaguemembersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.leaguemembersInclude<ExtArgs> | null
  /**
   * The data needed to create a leaguemembers.
   */
  data: Prisma.XOR<Prisma.leaguemembersCreateInput, Prisma.leaguemembersUncheckedCreateInput>
}

/**
 * leaguemembers createMany
 */
export type leaguemembersCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many leaguemembers.
   */
  data: Prisma.leaguemembersCreateManyInput | Prisma.leaguemembersCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * leaguemembers createManyAndReturn
 */
export type leaguemembersCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaguemembers
   */
  select?: Prisma.leaguemembersSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the leaguemembers
   */
  omit?: Prisma.leaguemembersOmit<ExtArgs> | null
  /**
   * The data used to create many leaguemembers.
   */
  data: Prisma.leaguemembersCreateManyInput | Prisma.leaguemembersCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.leaguemembersIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * leaguemembers update
 */
export type leaguemembersUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaguemembers
   */
  select?: Prisma.leaguemembersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaguemembers
   */
  omit?: Prisma.leaguemembersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.leaguemembersInclude<ExtArgs> | null
  /**
   * The data needed to update a leaguemembers.
   */
  data: Prisma.XOR<Prisma.leaguemembersUpdateInput, Prisma.leaguemembersUncheckedUpdateInput>
  /**
   * Choose, which leaguemembers to update.
   */
  where: Prisma.leaguemembersWhereUniqueInput
}

/**
 * leaguemembers updateMany
 */
export type leaguemembersUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update leaguemembers.
   */
  data: Prisma.XOR<Prisma.leaguemembersUpdateManyMutationInput, Prisma.leaguemembersUncheckedUpdateManyInput>
  /**
   * Filter which leaguemembers to update
   */
  where?: Prisma.leaguemembersWhereInput
  /**
   * Limit how many leaguemembers to update.
   */
  limit?: number
}

/**
 * leaguemembers updateManyAndReturn
 */
export type leaguemembersUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaguemembers
   */
  select?: Prisma.leaguemembersSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the leaguemembers
   */
  omit?: Prisma.leaguemembersOmit<ExtArgs> | null
  /**
   * The data used to update leaguemembers.
   */
  data: Prisma.XOR<Prisma.leaguemembersUpdateManyMutationInput, Prisma.leaguemembersUncheckedUpdateManyInput>
  /**
   * Filter which leaguemembers to update
   */
  where?: Prisma.leaguemembersWhereInput
  /**
   * Limit how many leaguemembers to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.leaguemembersIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * leaguemembers upsert
 */
export type leaguemembersUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaguemembers
   */
  select?: Prisma.leaguemembersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaguemembers
   */
  omit?: Prisma.leaguemembersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.leaguemembersInclude<ExtArgs> | null
  /**
   * The filter to search for the leaguemembers to update in case it exists.
   */
  where: Prisma.leaguemembersWhereUniqueInput
  /**
   * In case the leaguemembers found by the `where` argument doesn't exist, create a new leaguemembers with this data.
   */
  create: Prisma.XOR<Prisma.leaguemembersCreateInput, Prisma.leaguemembersUncheckedCreateInput>
  /**
   * In case the leaguemembers was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.leaguemembersUpdateInput, Prisma.leaguemembersUncheckedUpdateInput>
}

/**
 * leaguemembers delete
 */
export type leaguemembersDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaguemembers
   */
  select?: Prisma.leaguemembersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaguemembers
   */
  omit?: Prisma.leaguemembersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.leaguemembersInclude<ExtArgs> | null
  /**
   * Filter which leaguemembers to delete.
   */
  where: Prisma.leaguemembersWhereUniqueInput
}

/**
 * leaguemembers deleteMany
 */
export type leaguemembersDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which leaguemembers to delete
   */
  where?: Prisma.leaguemembersWhereInput
  /**
   * Limit how many leaguemembers to delete.
   */
  limit?: number
}

/**
 * leaguemembers.EmailLogs
 */
export type leaguemembers$EmailLogsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the EmailLogs
   */
  select?: Prisma.EmailLogsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the EmailLogs
   */
  omit?: Prisma.EmailLogsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmailLogsInclude<ExtArgs> | null
  where?: Prisma.EmailLogsWhereInput
  orderBy?: Prisma.EmailLogsOrderByWithRelationInput | Prisma.EmailLogsOrderByWithRelationInput[]
  cursor?: Prisma.EmailLogsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.EmailLogsScalarFieldEnum | Prisma.EmailLogsScalarFieldEnum[]
}

/**
 * leaguemembers.WeekWinners
 */
export type leaguemembers$WeekWinnersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the WeekWinners
   */
  select?: Prisma.WeekWinnersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the WeekWinners
   */
  omit?: Prisma.WeekWinnersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.WeekWinnersInclude<ExtArgs> | null
  where?: Prisma.WeekWinnersWhereInput
  orderBy?: Prisma.WeekWinnersOrderByWithRelationInput | Prisma.WeekWinnersOrderByWithRelationInput[]
  cursor?: Prisma.WeekWinnersWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.WeekWinnersScalarFieldEnum | Prisma.WeekWinnersScalarFieldEnum[]
}

/**
 * leaguemembers.leaguemessages
 */
export type leaguemembers$leaguemessagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaguemessages
   */
  select?: Prisma.leaguemessagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaguemessages
   */
  omit?: Prisma.leaguemessagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.leaguemessagesInclude<ExtArgs> | null
  where?: Prisma.leaguemessagesWhereInput
  orderBy?: Prisma.leaguemessagesOrderByWithRelationInput | Prisma.leaguemessagesOrderByWithRelationInput[]
  cursor?: Prisma.leaguemessagesWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.LeaguemessagesScalarFieldEnum | Prisma.LeaguemessagesScalarFieldEnum[]
}

/**
 * leaguemembers.picks
 */
export type leaguemembers$picksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the picks
   */
  select?: Prisma.picksSelect<ExtArgs> | null
  /**
   * Omit specific fields from the picks
   */
  omit?: Prisma.picksOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.picksInclude<ExtArgs> | null
  where?: Prisma.picksWhereInput
  orderBy?: Prisma.picksOrderByWithRelationInput | Prisma.picksOrderByWithRelationInput[]
  cursor?: Prisma.picksWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PicksScalarFieldEnum | Prisma.PicksScalarFieldEnum[]
}

/**
 * leaguemembers.superbowl
 */
export type leaguemembers$superbowlArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the superbowl
   */
  select?: Prisma.superbowlSelect<ExtArgs> | null
  /**
   * Omit specific fields from the superbowl
   */
  omit?: Prisma.superbowlOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.superbowlInclude<ExtArgs> | null
  where?: Prisma.superbowlWhereInput
  orderBy?: Prisma.superbowlOrderByWithRelationInput | Prisma.superbowlOrderByWithRelationInput[]
  cursor?: Prisma.superbowlWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.SuperbowlScalarFieldEnum | Prisma.SuperbowlScalarFieldEnum[]
}

/**
 * leaguemembers without action
 */
export type leaguemembersDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the leaguemembers
   */
  select?: Prisma.leaguemembersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the leaguemembers
   */
  omit?: Prisma.leaguemembersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.leaguemembersInclude<ExtArgs> | null
}
